   1              		.file	"conv.c"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/asoreyh/Dropbox/projects/lago/acqua/nexys/src/makestuff/libs/libbuffer" "conv.c"
   5              		.globl	getHexNibble
   7              	getHexNibble:
   8              	.LFB4:
   9              		.file 1 "conv.c"
   1:conv.c        **** /*
   2:conv.c        ****  * Copyright (C) 2009-2012 Chris McClelland
   3:conv.c        ****  *
   4:conv.c        ****  * This program is free software: you can redistribute it and/or modify
   5:conv.c        ****  * it under the terms of the GNU Lesser General Public License as published by
   6:conv.c        ****  * the Free Software Foundation, either version 3 of the License, or
   7:conv.c        ****  * (at your option) any later version.
   8:conv.c        ****  *
   9:conv.c        ****  * This program is distributed in the hope that it will be useful,
  10:conv.c        ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:conv.c        ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:conv.c        ****  * GNU Lesser General Public License for more details.
  13:conv.c        ****  *
  14:conv.c        ****  * You should have received a copy of the GNU Lesser General Public License
  15:conv.c        ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:conv.c        ****  */
  17:conv.c        **** #include "conv.h"
  18:conv.c        **** 
  19:conv.c        **** // Updates *outputNibble with the nibble represented by the supplied ascii hex digit.
  20:conv.c        **** // Return false on success or true for illegal char.
  21:conv.c        **** //
  22:conv.c        **** bool getHexNibble(char hexDigit, uint8 *outputNibble) {
  10              		.loc 1 22 55
  11              		.cfi_startproc
  12 0000 F30F1EFA 		endbr64
  13 0004 55       		pushq	%rbp
  14              		.cfi_def_cfa_offset 16
  15              		.cfi_offset 6, -16
  16 0005 4889E5   		movq	%rsp, %rbp
  17              		.cfi_def_cfa_register 6
  18 0008 89F8     		movl	%edi, %eax
  19 000a 488975F0 		movq	%rsi, -16(%rbp)
  20 000e 8845FC   		movb	%al, -4(%rbp)
  23:conv.c        **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
  21              		.loc 1 23 5
  22 0011 807DFC2F 		cmpb	$47, -4(%rbp)
  23 0015 7E1A     		jle	.L2
  24              		.loc 1 23 23 discriminator 1
  25 0017 807DFC39 		cmpb	$57, -4(%rbp)
  26 001b 7F14     		jg	.L2
  24:conv.c        **** 		*outputNibble = hexDigit - '0';
  27              		.loc 1 24 28
  28 001d 0FB645FC 		movzbl	-4(%rbp), %eax
  29 0021 8D50D0   		leal	-48(%rax), %edx
  30              		.loc 1 24 17
  31 0024 488B45F0 		movq	-16(%rbp), %rax
  32 0028 8810     		movb	%dl, (%rax)
  25:conv.c        **** 		return false;
  33              		.loc 1 25 10
  34 002a B8000000 		movl	$0, %eax
  34      00
  35 002f EB45     		jmp	.L3
  36              	.L2:
  26:conv.c        **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
  37              		.loc 1 26 12
  38 0031 807DFC60 		cmpb	$96, -4(%rbp)
  39 0035 7E1A     		jle	.L4
  40              		.loc 1 26 30 discriminator 1
  41 0037 807DFC66 		cmpb	$102, -4(%rbp)
  42 003b 7F14     		jg	.L4
  27:conv.c        **** 		*outputNibble = hexDigit - 'a' + 10;
  43              		.loc 1 27 34
  44 003d 0FB645FC 		movzbl	-4(%rbp), %eax
  45 0041 8D50A9   		leal	-87(%rax), %edx
  46              		.loc 1 27 17
  47 0044 488B45F0 		movq	-16(%rbp), %rax
  48 0048 8810     		movb	%dl, (%rax)
  28:conv.c        **** 		return false;
  49              		.loc 1 28 10
  50 004a B8000000 		movl	$0, %eax
  50      00
  51 004f EB25     		jmp	.L3
  52              	.L4:
  29:conv.c        **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
  53              		.loc 1 29 12
  54 0051 807DFC40 		cmpb	$64, -4(%rbp)
  55 0055 7E1A     		jle	.L5
  56              		.loc 1 29 30 discriminator 1
  57 0057 807DFC46 		cmpb	$70, -4(%rbp)
  58 005b 7F14     		jg	.L5
  30:conv.c        **** 		*outputNibble = hexDigit - 'A' + 10;
  59              		.loc 1 30 34
  60 005d 0FB645FC 		movzbl	-4(%rbp), %eax
  61 0061 8D50C9   		leal	-55(%rax), %edx
  62              		.loc 1 30 17
  63 0064 488B45F0 		movq	-16(%rbp), %rax
  64 0068 8810     		movb	%dl, (%rax)
  31:conv.c        **** 		return false;
  65              		.loc 1 31 10
  66 006a B8000000 		movl	$0, %eax
  66      00
  67 006f EB05     		jmp	.L3
  68              	.L5:
  32:conv.c        **** 	} else {
  33:conv.c        **** 		return true;
  69              		.loc 1 33 10
  70 0071 B8010000 		movl	$1, %eax
  70      00
  71              	.L3:
  34:conv.c        **** 	}
  35:conv.c        **** }
  72              		.loc 1 35 1
  73 0076 5D       		popq	%rbp
  74              		.cfi_def_cfa 7, 8
  75 0077 C3       		ret
  76              		.cfi_endproc
  77              	.LFE4:
  79              		.globl	getHexByte
  81              	getHexByte:
  82              	.LFB5:
  36:conv.c        **** 
  37:conv.c        **** // Updates *outputByte with the byte represented by the two ascii hex digits pointed to by hexDigit
  38:conv.c        **** // Return false on success or true for illegal char.
  39:conv.c        **** //
  40:conv.c        **** bool getHexByte(const char *hexDigitPair, uint8 *outputByte) {
  83              		.loc 1 40 62
  84              		.cfi_startproc
  85 0078 F30F1EFA 		endbr64
  86 007c 55       		pushq	%rbp
  87              		.cfi_def_cfa_offset 16
  88              		.cfi_offset 6, -16
  89 007d 4889E5   		movq	%rsp, %rbp
  90              		.cfi_def_cfa_register 6
  91 0080 4883EC20 		subq	$32, %rsp
  92 0084 48897DE8 		movq	%rdi, -24(%rbp)
  93 0088 488975E0 		movq	%rsi, -32(%rbp)
  94              		.loc 1 40 62
  95 008c 64488B04 		movq	%fs:40, %rax
  95      25280000 
  95      00
  96 0095 488945F8 		movq	%rax, -8(%rbp)
  97 0099 31C0     		xorl	%eax, %eax
  41:conv.c        **** 	uint8 upperNibble;
  42:conv.c        **** 	uint8 lowerNibble;
  43:conv.c        **** 	if ( !getHexNibble(hexDigitPair[0], &upperNibble) && !getHexNibble(hexDigitPair[1], &lowerNibble) 
  98              		.loc 1 43 33
  99 009b 488B45E8 		movq	-24(%rbp), %rax
 100 009f 0FB600   		movzbl	(%rax), %eax
 101              		.loc 1 43 8
 102 00a2 0FBEC0   		movsbl	%al, %eax
 103 00a5 488D55F6 		leaq	-10(%rbp), %rdx
 104 00a9 4889D6   		movq	%rdx, %rsi
 105 00ac 89C7     		movl	%eax, %edi
 106 00ae E8000000 		call	getHexNibble@PLT
 106      00
 107              		.loc 1 43 7
 108 00b3 83F001   		xorl	$1, %eax
 109              		.loc 1 43 5
 110 00b6 84C0     		testb	%al, %al
 111 00b8 7444     		je	.L7
 112              		.loc 1 43 81 discriminator 1
 113 00ba 488B45E8 		movq	-24(%rbp), %rax
 114 00be 4883C001 		addq	$1, %rax
 115 00c2 0FB600   		movzbl	(%rax), %eax
 116              		.loc 1 43 56 discriminator 1
 117 00c5 0FBEC0   		movsbl	%al, %eax
 118 00c8 488D55F7 		leaq	-9(%rbp), %rdx
 119 00cc 4889D6   		movq	%rdx, %rsi
 120 00cf 89C7     		movl	%eax, %edi
 121 00d1 E8000000 		call	getHexNibble@PLT
 121      00
 122              		.loc 1 43 55 discriminator 1
 123 00d6 83F001   		xorl	$1, %eax
 124              		.loc 1 43 52 discriminator 1
 125 00d9 84C0     		testb	%al, %al
 126 00db 7421     		je	.L7
  44:conv.c        **** 		*outputByte = (upperNibble << 4) | lowerNibble;
 127              		.loc 1 44 30
 128 00dd 0FB645F6 		movzbl	-10(%rbp), %eax
 129 00e1 0FB6C0   		movzbl	%al, %eax
 130 00e4 C1E004   		sall	$4, %eax
 131              		.loc 1 44 36
 132 00e7 89C2     		movl	%eax, %edx
 133 00e9 0FB645F7 		movzbl	-9(%rbp), %eax
 134 00ed 09D0     		orl	%edx, %eax
 135 00ef 89C2     		movl	%eax, %edx
 136              		.loc 1 44 15
 137 00f1 488B45E0 		movq	-32(%rbp), %rax
 138 00f5 8810     		movb	%dl, (%rax)
  45:conv.c        **** 		return false;
 139              		.loc 1 45 10
 140 00f7 B8000000 		movl	$0, %eax
 140      00
 141 00fc EB05     		jmp	.L9
 142              	.L7:
  46:conv.c        **** 	} else {
  47:conv.c        **** 		return true;
 143              		.loc 1 47 10
 144 00fe B8010000 		movl	$1, %eax
 144      00
 145              	.L9:
  48:conv.c        **** 	}
  49:conv.c        **** }
 146              		.loc 1 49 1 discriminator 1
 147 0103 488B55F8 		movq	-8(%rbp), %rdx
 148 0107 64482B14 		subq	%fs:40, %rdx
 148      25280000 
 148      00
 149 0110 7405     		je	.L10
 150              		.loc 1 49 1 is_stmt 0
 151 0112 E8000000 		call	__stack_chk_fail@PLT
 151      00
 152              	.L10:
 153 0117 C9       		leave
 154              		.cfi_def_cfa 7, 8
 155 0118 C3       		ret
 156              		.cfi_endproc
 157              	.LFE5:
 159              		.globl	getHexUpperNibble
 161              	getHexUpperNibble:
 162              	.LFB6:
  50:conv.c        **** 
  51:conv.c        **** // Return the ascii hex digit representing the most significant nibble of the supplied byte.
  52:conv.c        **** //
  53:conv.c        **** char getHexUpperNibble(uint8 byte) {
 163              		.loc 1 53 36 is_stmt 1
 164              		.cfi_startproc
 165 0119 F30F1EFA 		endbr64
 166 011d 55       		pushq	%rbp
 167              		.cfi_def_cfa_offset 16
 168              		.cfi_offset 6, -16
 169 011e 4889E5   		movq	%rsp, %rbp
 170              		.cfi_def_cfa_register 6
 171 0121 89F8     		movl	%edi, %eax
 172 0123 8845EC   		movb	%al, -20(%rbp)
  54:conv.c        **** 	uint8 tmp = byte >> 4;
 173              		.loc 1 54 8
 174 0126 0FB645EC 		movzbl	-20(%rbp), %eax
 175 012a C0E804   		shrb	$4, %al
 176 012d 8845FF   		movb	%al, -1(%rbp)
  55:conv.c        **** 	tmp += (tmp < 10) ? '0' : 'A' - 10;
 177              		.loc 1 55 6
 178 0130 807DFF09 		cmpb	$9, -1(%rbp)
 179 0134 7707     		ja	.L12
 180              		.loc 1 55 6 is_stmt 0 discriminator 1
 181 0136 B8300000 		movl	$48, %eax
 181      00
 182 013b EB05     		jmp	.L13
 183              	.L12:
 184              		.loc 1 55 6 discriminator 2
 185 013d B8370000 		movl	$55, %eax
 185      00
 186              	.L13:
 187              		.loc 1 55 6 discriminator 4
 188 0142 0045FF   		addb	%al, -1(%rbp)
  56:conv.c        **** 	return tmp;
 189              		.loc 1 56 9 is_stmt 1 discriminator 4
 190 0145 0FB645FF 		movzbl	-1(%rbp), %eax
  57:conv.c        **** }
 191              		.loc 1 57 1 discriminator 4
 192 0149 5D       		popq	%rbp
 193              		.cfi_def_cfa 7, 8
 194 014a C3       		ret
 195              		.cfi_endproc
 196              	.LFE6:
 198              		.globl	getHexLowerNibble
 200              	getHexLowerNibble:
 201              	.LFB7:
  58:conv.c        **** 
  59:conv.c        **** // Return the ascii hex digit representing the least significant nibble of the supplied byte.
  60:conv.c        **** //
  61:conv.c        **** char getHexLowerNibble(uint8 byte) {
 202              		.loc 1 61 36
 203              		.cfi_startproc
 204 014b F30F1EFA 		endbr64
 205 014f 55       		pushq	%rbp
 206              		.cfi_def_cfa_offset 16
 207              		.cfi_offset 6, -16
 208 0150 4889E5   		movq	%rsp, %rbp
 209              		.cfi_def_cfa_register 6
 210 0153 89F8     		movl	%edi, %eax
 211 0155 8845EC   		movb	%al, -20(%rbp)
  62:conv.c        **** 	uint8 tmp = byte & 0x0F;
 212              		.loc 1 62 8
 213 0158 0FB645EC 		movzbl	-20(%rbp), %eax
 214 015c 83E00F   		andl	$15, %eax
 215 015f 8845FF   		movb	%al, -1(%rbp)
  63:conv.c        **** 	tmp += (tmp < 10) ? '0' : 'A' - 10;
 216              		.loc 1 63 6
 217 0162 807DFF09 		cmpb	$9, -1(%rbp)
 218 0166 7707     		ja	.L16
 219              		.loc 1 63 6 is_stmt 0 discriminator 1
 220 0168 B8300000 		movl	$48, %eax
 220      00
 221 016d EB05     		jmp	.L17
 222              	.L16:
 223              		.loc 1 63 6 discriminator 2
 224 016f B8370000 		movl	$55, %eax
 224      00
 225              	.L17:
 226              		.loc 1 63 6 discriminator 4
 227 0174 0045FF   		addb	%al, -1(%rbp)
  64:conv.c        **** 	return tmp;
 228              		.loc 1 64 9 is_stmt 1 discriminator 4
 229 0177 0FB645FF 		movzbl	-1(%rbp), %eax
  65:conv.c        **** }
 230              		.loc 1 65 1 discriminator 4
 231 017b 5D       		popq	%rbp
 232              		.cfi_def_cfa 7, 8
 233 017c C3       		ret
 234              		.cfi_endproc
 235              	.LFE7:
 237              	.Letext0:
 238              		.file 2 "/home/asoreyh/Dropbox/projects/lago/acqua/nexys/src/makestuff/common/makestuff.h"
 711              		.section	.note.gnu.property,"a"
 712              		.align 8
 713 0000 04000000 		.long	1f - 0f
 714 0004 10000000 		.long	4f - 1f
 715 0008 05000000 		.long	5
 716              	0:
 717 000c 474E5500 		.string	"GNU"
 718              	1:
 719              		.align 8
 720 0010 020000C0 		.long	0xc0000002
 721 0014 04000000 		.long	3f - 2f
 722              	2:
 723 0018 03000000 		.long	0x3
 724              	3:
 725 001c 00000000 		.align 8
 726              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 conv.c
     /tmp/ccByoNRV.s:7      .text:0000000000000000 getHexNibble
     /tmp/ccByoNRV.s:81     .text:0000000000000078 getHexByte
     /tmp/ccByoNRV.s:161    .text:0000000000000119 getHexUpperNibble
     /tmp/ccByoNRV.s:200    .text:000000000000014b getHexLowerNibble

UNDEFINED SYMBOLS
__stack_chk_fail
