   1              		.file	"DeferredTestReporter.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text._ZnwmPv,"axG",@progbits,_ZnwmPv,comdat
   5              		.weak	_ZnwmPv
   7              	_ZnwmPv:
   8              	.LFB265:
   9              		.file 1 "/usr/include/c++/4.9/new"
   1:/usr/include/c++/4.9/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/include/c++/4.9/new **** 
   3:/usr/include/c++/4.9/new **** // Copyright (C) 1994-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/new **** 
   5:/usr/include/c++/4.9/new **** // This file is part of GCC.
   6:/usr/include/c++/4.9/new **** //
   7:/usr/include/c++/4.9/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/include/c++/4.9/new **** // it under the terms of the GNU General Public License as published by
   9:/usr/include/c++/4.9/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/4.9/new **** // any later version.
  11:/usr/include/c++/4.9/new **** // 
  12:/usr/include/c++/4.9/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/include/c++/4.9/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/4.9/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/4.9/new **** // GNU General Public License for more details.
  16:/usr/include/c++/4.9/new **** // 
  17:/usr/include/c++/4.9/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/4.9/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/4.9/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/4.9/new **** 
  21:/usr/include/c++/4.9/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/4.9/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/4.9/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/4.9/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/4.9/new **** 
  26:/usr/include/c++/4.9/new **** /** @file new
  27:/usr/include/c++/4.9/new ****  *  This is a Standard C++ Library header.
  28:/usr/include/c++/4.9/new ****  *
  29:/usr/include/c++/4.9/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/include/c++/4.9/new ****  *  handling memory allocation errors; see
  31:/usr/include/c++/4.9/new ****  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
  32:/usr/include/c++/4.9/new ****  */
  33:/usr/include/c++/4.9/new **** 
  34:/usr/include/c++/4.9/new **** #ifndef _NEW
  35:/usr/include/c++/4.9/new **** #define _NEW
  36:/usr/include/c++/4.9/new **** 
  37:/usr/include/c++/4.9/new **** #pragma GCC system_header
  38:/usr/include/c++/4.9/new **** 
  39:/usr/include/c++/4.9/new **** #include <bits/c++config.h>
  40:/usr/include/c++/4.9/new **** #include <exception>
  41:/usr/include/c++/4.9/new **** 
  42:/usr/include/c++/4.9/new **** #pragma GCC visibility push(default)
  43:/usr/include/c++/4.9/new **** 
  44:/usr/include/c++/4.9/new **** extern "C++" {
  45:/usr/include/c++/4.9/new **** 
  46:/usr/include/c++/4.9/new **** namespace std 
  47:/usr/include/c++/4.9/new **** {
  48:/usr/include/c++/4.9/new ****   /**
  49:/usr/include/c++/4.9/new ****    *  @brief  Exception possibly thrown by @c new.
  50:/usr/include/c++/4.9/new ****    *  @ingroup exceptions
  51:/usr/include/c++/4.9/new ****    *
  52:/usr/include/c++/4.9/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  53:/usr/include/c++/4.9/new ****    *  errors from the throwing forms of @c new.  */
  54:/usr/include/c++/4.9/new ****   class bad_alloc : public exception 
  55:/usr/include/c++/4.9/new ****   {
  56:/usr/include/c++/4.9/new ****   public:
  57:/usr/include/c++/4.9/new ****     bad_alloc() throw() { }
  58:/usr/include/c++/4.9/new **** 
  59:/usr/include/c++/4.9/new ****     // This declaration is not useless:
  60:/usr/include/c++/4.9/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  61:/usr/include/c++/4.9/new ****     virtual ~bad_alloc() throw();
  62:/usr/include/c++/4.9/new **** 
  63:/usr/include/c++/4.9/new ****     // See comment in eh_exception.cc.
  64:/usr/include/c++/4.9/new ****     virtual const char* what() const throw();
  65:/usr/include/c++/4.9/new ****   };
  66:/usr/include/c++/4.9/new **** 
  67:/usr/include/c++/4.9/new **** #if __cplusplus >= 201103L
  68:/usr/include/c++/4.9/new ****   class bad_array_new_length : public bad_alloc
  69:/usr/include/c++/4.9/new ****   {
  70:/usr/include/c++/4.9/new ****   public:
  71:/usr/include/c++/4.9/new ****     bad_array_new_length() throw() { };
  72:/usr/include/c++/4.9/new **** 
  73:/usr/include/c++/4.9/new ****     // This declaration is not useless:
  74:/usr/include/c++/4.9/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  75:/usr/include/c++/4.9/new ****     virtual ~bad_array_new_length() throw();
  76:/usr/include/c++/4.9/new **** 
  77:/usr/include/c++/4.9/new ****     // See comment in eh_exception.cc.
  78:/usr/include/c++/4.9/new ****     virtual const char* what() const throw();
  79:/usr/include/c++/4.9/new ****   };
  80:/usr/include/c++/4.9/new **** #endif
  81:/usr/include/c++/4.9/new **** 
  82:/usr/include/c++/4.9/new ****   // We throw this exception for GNU VLAs of negative length in all C++
  83:/usr/include/c++/4.9/new ****   // dialects, so declare it if we aren't in strict conformance mode.
  84:/usr/include/c++/4.9/new **** #if __cplusplus > 201103L || !defined(__STRICT_ANSI__)
  85:/usr/include/c++/4.9/new ****   class bad_array_length : public bad_alloc
  86:/usr/include/c++/4.9/new ****   {
  87:/usr/include/c++/4.9/new ****   public:
  88:/usr/include/c++/4.9/new ****     bad_array_length() throw() { };
  89:/usr/include/c++/4.9/new **** 
  90:/usr/include/c++/4.9/new ****     // This declaration is not useless:
  91:/usr/include/c++/4.9/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  92:/usr/include/c++/4.9/new ****     virtual ~bad_array_length() throw();
  93:/usr/include/c++/4.9/new **** 
  94:/usr/include/c++/4.9/new ****     // See comment in eh_exception.cc.
  95:/usr/include/c++/4.9/new ****     virtual const char* what() const throw();
  96:/usr/include/c++/4.9/new ****   };
  97:/usr/include/c++/4.9/new **** #endif
  98:/usr/include/c++/4.9/new **** 
  99:/usr/include/c++/4.9/new ****   struct nothrow_t { };
 100:/usr/include/c++/4.9/new **** 
 101:/usr/include/c++/4.9/new ****   extern const nothrow_t nothrow;
 102:/usr/include/c++/4.9/new **** 
 103:/usr/include/c++/4.9/new ****   /** If you write your own error handler to be called by @c new, it must
 104:/usr/include/c++/4.9/new ****    *  be of this type.  */
 105:/usr/include/c++/4.9/new ****   typedef void (*new_handler)();
 106:/usr/include/c++/4.9/new **** 
 107:/usr/include/c++/4.9/new ****   /// Takes a replacement handler as the argument, returns the
 108:/usr/include/c++/4.9/new ****   /// previous handler.
 109:/usr/include/c++/4.9/new ****   new_handler set_new_handler(new_handler) throw();
 110:/usr/include/c++/4.9/new **** 
 111:/usr/include/c++/4.9/new **** #if __cplusplus >= 201103L
 112:/usr/include/c++/4.9/new ****   /// Return the current new handler.
 113:/usr/include/c++/4.9/new ****   new_handler get_new_handler() noexcept;
 114:/usr/include/c++/4.9/new **** #endif
 115:/usr/include/c++/4.9/new **** } // namespace std
 116:/usr/include/c++/4.9/new **** 
 117:/usr/include/c++/4.9/new **** //@{
 118:/usr/include/c++/4.9/new **** /** These are replaceable signatures:
 119:/usr/include/c++/4.9/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 120:/usr/include/c++/4.9/new ****  *  - normal array new and delete (same)
 121:/usr/include/c++/4.9/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 122:/usr/include/c++/4.9/new ****  *    @c NULL on error)
 123:/usr/include/c++/4.9/new ****  *  - @c nothrow array new and delete (same)
 124:/usr/include/c++/4.9/new ****  *
 125:/usr/include/c++/4.9/new ****  *  Placement new and delete signatures (take a memory address argument,
 126:/usr/include/c++/4.9/new ****  *  does nothing) may not be replaced by a user's program.
 127:/usr/include/c++/4.9/new **** */
 128:/usr/include/c++/4.9/new **** void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 129:/usr/include/c++/4.9/new ****   __attribute__((__externally_visible__));
 130:/usr/include/c++/4.9/new **** void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 131:/usr/include/c++/4.9/new ****   __attribute__((__externally_visible__));
 132:/usr/include/c++/4.9/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 133:/usr/include/c++/4.9/new ****   __attribute__((__externally_visible__));
 134:/usr/include/c++/4.9/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 135:/usr/include/c++/4.9/new ****   __attribute__((__externally_visible__));
 136:/usr/include/c++/4.9/new **** void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 137:/usr/include/c++/4.9/new ****   __attribute__((__externally_visible__));
 138:/usr/include/c++/4.9/new **** void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 139:/usr/include/c++/4.9/new ****   __attribute__((__externally_visible__));
 140:/usr/include/c++/4.9/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 141:/usr/include/c++/4.9/new ****   __attribute__((__externally_visible__));
 142:/usr/include/c++/4.9/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 143:/usr/include/c++/4.9/new ****   __attribute__((__externally_visible__));
 144:/usr/include/c++/4.9/new **** 
 145:/usr/include/c++/4.9/new **** // Default placement versions of operator new.
 146:/usr/include/c++/4.9/new **** inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 147:/usr/include/c++/4.9/new **** { return __p; }
  10              		.loc 1 147 0
  11              		.cfi_startproc
  12 0000 55       		pushq	%rbp
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 6, -16
  15 0001 4889E5   		movq	%rsp, %rbp
  16              		.cfi_def_cfa_register 6
  17 0004 48897DF8 		movq	%rdi, -8(%rbp)
  18 0008 488975F0 		movq	%rsi, -16(%rbp)
  19              		.loc 1 147 0
  20 000c 488B45F0 		movq	-16(%rbp), %rax
  21 0010 5D       		popq	%rbp
  22              		.cfi_def_cfa 7, 8
  23 0011 C3       		ret
  24              		.cfi_endproc
  25              	.LFE265:
  27              		.section	.text._ZdlPvS_,"axG",@progbits,_ZdlPvS_,comdat
  28              		.weak	_ZdlPvS_
  30              	_ZdlPvS_:
  31              	.LFB267:
 148:/usr/include/c++/4.9/new **** inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 149:/usr/include/c++/4.9/new **** { return __p; }
 150:/usr/include/c++/4.9/new **** 
 151:/usr/include/c++/4.9/new **** // Default placement versions of operator delete.
 152:/usr/include/c++/4.9/new **** inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
  32              		.loc 1 152 0
  33              		.cfi_startproc
  34 0000 55       		pushq	%rbp
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 6, -16
  37 0001 4889E5   		movq	%rsp, %rbp
  38              		.cfi_def_cfa_register 6
  39 0004 48897DF8 		movq	%rdi, -8(%rbp)
  40 0008 488975F0 		movq	%rsi, -16(%rbp)
  41              		.loc 1 152 0
  42 000c 5D       		popq	%rbp
  43              		.cfi_def_cfa 7, 8
  44 000d C3       		ret
  45              		.cfi_endproc
  46              	.LFE267:
  48              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
  49              		.align 2
  50              		.weak	_ZN8UnitTest18DeferredTestResultD2Ev
  52              	_ZN8UnitTest18DeferredTestResultD2Ev:
  53              	.LFB872:
  54              		.file 2 "DeferredTestResult.h"
   1:DeferredTestResult.h **** #ifndef UNITTEST_DEFERREDTESTRESULT_H
   2:DeferredTestResult.h **** #define UNITTEST_DEFERREDTESTRESULT_H
   3:DeferredTestResult.h **** 
   4:DeferredTestResult.h **** #include <string>
   5:DeferredTestResult.h **** #include <vector>
   6:DeferredTestResult.h **** 
   7:DeferredTestResult.h **** namespace UnitTest
   8:DeferredTestResult.h **** {
   9:DeferredTestResult.h **** 
  10:DeferredTestResult.h **** struct DeferredTestResult
  55              		.loc 2 10 0
  56              		.cfi_startproc
  57              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
  58              		.cfi_lsda 0x1b,.LLSDA872
  59 0000 55       		pushq	%rbp
  60              		.cfi_def_cfa_offset 16
  61              		.cfi_offset 6, -16
  62 0001 4889E5   		movq	%rsp, %rbp
  63              		.cfi_def_cfa_register 6
  64 0004 53       		pushq	%rbx
  65 0005 4883EC18 		subq	$24, %rsp
  66              		.cfi_offset 3, -24
  67 0009 48897DE8 		movq	%rdi, -24(%rbp)
  68              	.LBB2:
  69              		.loc 2 10 0
  70 000d 488B45E8 		movq	-24(%rbp), %rax
  71 0011 4883C018 		addq	$24, %rax
  72 0015 4889C7   		movq	%rax, %rdi
  73              	.LEHB0:
  74 0018 E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev@PLT
  74      00
  75              	.LEHE0:
  76              		.loc 2 10 0 is_stmt 0 discriminator 2
  77 001d 488B45E8 		movq	-24(%rbp), %rax
  78 0021 4883C010 		addq	$16, %rax
  79 0025 4889C7   		movq	%rax, %rdi
  80              	.LEHB1:
  81 0028 E8000000 		call	_ZNSsD1Ev@PLT
  81      00
  82              	.LEHE1:
  83              		.loc 2 10 0 discriminator 4
  84 002d 488B45E8 		movq	-24(%rbp), %rax
  85 0031 4883C008 		addq	$8, %rax
  86 0035 4889C7   		movq	%rax, %rdi
  87              	.LEHB2:
  88 0038 E8000000 		call	_ZNSsD1Ev@PLT
  88      00
  89              	.LEHE2:
  90              		.loc 2 10 0 discriminator 6
  91 003d 488B45E8 		movq	-24(%rbp), %rax
  92 0041 4889C7   		movq	%rax, %rdi
  93              	.LEHB3:
  94 0044 E8000000 		call	_ZNSsD1Ev@PLT
  94      00
  95              	.LEHE3:
  96 0049 EB44     		jmp	.L12
  97              	.L9:
  98 004b 4889C3   		movq	%rax, %rbx
  99              		.loc 2 10 0
 100 004e 488B45E8 		movq	-24(%rbp), %rax
 101 0052 4883C010 		addq	$16, %rax
 102 0056 4889C7   		movq	%rax, %rdi
 103 0059 E8000000 		call	_ZNSsD1Ev@PLT
 103      00
 104 005e EB03     		jmp	.L7
 105              	.L10:
 106 0060 4889C3   		movq	%rax, %rbx
 107              	.L7:
 108              		.loc 2 10 0 discriminator 3
 109 0063 488B45E8 		movq	-24(%rbp), %rax
 110 0067 4883C008 		addq	$8, %rax
 111 006b 4889C7   		movq	%rax, %rdi
 112 006e E8000000 		call	_ZNSsD1Ev@PLT
 112      00
 113 0073 EB03     		jmp	.L8
 114              	.L11:
 115 0075 4889C3   		movq	%rax, %rbx
 116              	.L8:
 117              		.loc 2 10 0 discriminator 5
 118 0078 488B45E8 		movq	-24(%rbp), %rax
 119 007c 4889C7   		movq	%rax, %rdi
 120 007f E8000000 		call	_ZNSsD1Ev@PLT
 120      00
 121 0084 4889D8   		movq	%rbx, %rax
 122 0087 4889C7   		movq	%rax, %rdi
 123              	.LEHB4:
 124 008a E8000000 		call	_Unwind_Resume@PLT
 124      00
 125              	.LEHE4:
 126              	.L12:
 127              	.LBE2:
 128              		.loc 2 10 0
 129 008f 4883C418 		addq	$24, %rsp
 130 0093 5B       		popq	%rbx
 131 0094 5D       		popq	%rbp
 132              		.cfi_def_cfa 7, 8
 133 0095 C3       		ret
 134              		.cfi_endproc
 135              	.LFE872:
 136              		.globl	__gxx_personality_v0
 137              		.section	.gcc_except_table._ZN8UnitTest18DeferredTestResultD2Ev,"aG",@progbits,_ZN8UnitTest18Defer
 138              	.LLSDA872:
 139 0000 FF       		.byte	0xff
 140 0001 FF       		.byte	0xff
 141 0002 01       		.byte	0x1
 142 0003 15       		.uleb128 .LLSDACSE872-.LLSDACSB872
 143              	.LLSDACSB872:
 144 0004 18       		.uleb128 .LEHB0-.LFB872
 145 0005 05       		.uleb128 .LEHE0-.LEHB0
 146 0006 4B       		.uleb128 .L9-.LFB872
 147 0007 00       		.uleb128 0
 148 0008 28       		.uleb128 .LEHB1-.LFB872
 149 0009 05       		.uleb128 .LEHE1-.LEHB1
 150 000a 60       		.uleb128 .L10-.LFB872
 151 000b 00       		.uleb128 0
 152 000c 38       		.uleb128 .LEHB2-.LFB872
 153 000d 05       		.uleb128 .LEHE2-.LEHB2
 154 000e 75       		.uleb128 .L11-.LFB872
 155 000f 00       		.uleb128 0
 156 0010 44       		.uleb128 .LEHB3-.LFB872
 157 0011 05       		.uleb128 .LEHE3-.LEHB3
 158 0012 00       		.uleb128 0
 159 0013 00       		.uleb128 0
 160 0014 8A01     		.uleb128 .LEHB4-.LFB872
 161 0016 05       		.uleb128 .LEHE4-.LEHB4
 162 0017 00       		.uleb128 0
 163 0018 00       		.uleb128 0
 164              	.LLSDACSE872:
 165              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
 167              		.weak	_ZN8UnitTest18DeferredTestResultD1Ev
 168              		.set	_ZN8UnitTest18DeferredTestResultD1Ev,_ZN8UnitTest18DeferredTestResultD2Ev
 169              		.text
 170              		.align 2
 171              		.globl	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
 173              	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE:
 174              	.LFB870:
 175              		.file 3 "DeferredTestReporter.cpp"
   1:DeferredTestReporter.cpp **** #include "DeferredTestReporter.h"
   2:DeferredTestReporter.cpp **** #include "TestDetails.h"
   3:DeferredTestReporter.cpp **** #include "Config.h"
   4:DeferredTestReporter.cpp **** 
   5:DeferredTestReporter.cpp **** using namespace UnitTest;
   6:DeferredTestReporter.cpp **** 
   7:DeferredTestReporter.cpp **** void DeferredTestReporter::ReportTestStart(TestDetails const& details)
   8:DeferredTestReporter.cpp **** {
 176              		.loc 3 8 0 is_stmt 1
 177              		.cfi_startproc
 178              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 179              		.cfi_lsda 0x1b,.LLSDA870
 180 0000 55       		pushq	%rbp
 181              		.cfi_def_cfa_offset 16
 182              		.cfi_offset 6, -16
 183 0001 4889E5   		movq	%rsp, %rbp
 184              		.cfi_def_cfa_register 6
 185 0004 53       		pushq	%rbx
 186 0005 4883EC58 		subq	$88, %rsp
 187              		.cfi_offset 3, -24
 188 0009 48897DA8 		movq	%rdi, -88(%rbp)
 189 000d 488975A0 		movq	%rsi, -96(%rbp)
 190              		.loc 3 8 0
 191 0011 64488B04 		movq	%fs:40, %rax
 191      25280000 
 191      00
 192 001a 488945E8 		movq	%rax, -24(%rbp)
 193 001e 31C0     		xorl	%eax, %eax
   9:DeferredTestReporter.cpp ****     m_results.push_back(DeferredTestResult(details.suiteName, details.testName));
 194              		.loc 3 9 0
 195 0020 488B45A0 		movq	-96(%rbp), %rax
 196 0024 488B5008 		movq	8(%rax), %rdx
 197 0028 488B45A0 		movq	-96(%rbp), %rax
 198 002c 488B08   		movq	(%rax), %rcx
 199 002f 488D45B0 		leaq	-80(%rbp), %rax
 200 0033 4889CE   		movq	%rcx, %rsi
 201 0036 4889C7   		movq	%rax, %rdi
 202              	.LEHB5:
 203 0039 E8000000 		call	_ZN8UnitTest18DeferredTestResultC1EPKcS2_@PLT
 203      00
 204              	.LEHE5:
 205 003e 488B45A8 		movq	-88(%rbp), %rax
 206 0042 488D5008 		leaq	8(%rax), %rdx
 207 0046 488D45B0 		leaq	-80(%rbp), %rax
 208 004a 4889C6   		movq	%rax, %rsi
 209 004d 4889D7   		movq	%rdx, %rdi
 210              	.LEHB6:
 211 0050 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_@PLT
 211      00
 212              	.LEHE6:
 213              		.loc 3 9 0 is_stmt 0 discriminator 2
 214 0055 488D45B0 		leaq	-80(%rbp), %rax
 215 0059 4889C7   		movq	%rax, %rdi
 216              	.LEHB7:
 217 005c E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 217      00
 218              	.LEHE7:
  10:DeferredTestReporter.cpp **** }
 219              		.loc 3 10 0 is_stmt 1 discriminator 2
 220 0061 488B45E8 		movq	-24(%rbp), %rax
 221 0065 64483304 		xorq	%fs:40, %rax
 221      25280000 
 221      00
 222 006e 7421     		je	.L15
 223 0070 EB1A     		jmp	.L17
 224              	.L16:
 225 0072 4889C3   		movq	%rax, %rbx
   9:DeferredTestReporter.cpp ****     m_results.push_back(DeferredTestResult(details.suiteName, details.testName));
 226              		.loc 3 9 0
 227 0075 488D45B0 		leaq	-80(%rbp), %rax
 228 0079 4889C7   		movq	%rax, %rdi
 229 007c E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 229      00
 230 0081 4889D8   		movq	%rbx, %rax
 231 0084 4889C7   		movq	%rax, %rdi
 232              	.LEHB8:
 233 0087 E8000000 		call	_Unwind_Resume@PLT
 233      00
 234              	.LEHE8:
 235              	.L17:
 236              		.loc 3 10 0
 237 008c E8000000 		call	__stack_chk_fail@PLT
 237      00
 238              	.L15:
 239 0091 4883C458 		addq	$88, %rsp
 240 0095 5B       		popq	%rbx
 241 0096 5D       		popq	%rbp
 242              		.cfi_def_cfa 7, 8
 243 0097 C3       		ret
 244              		.cfi_endproc
 245              	.LFE870:
 246              		.section	.gcc_except_table,"a",@progbits
 247              	.LLSDA870:
 248 0000 FF       		.byte	0xff
 249 0001 FF       		.byte	0xff
 250 0002 01       		.byte	0x1
 251 0003 11       		.uleb128 .LLSDACSE870-.LLSDACSB870
 252              	.LLSDACSB870:
 253 0004 39       		.uleb128 .LEHB5-.LFB870
 254 0005 05       		.uleb128 .LEHE5-.LEHB5
 255 0006 00       		.uleb128 0
 256 0007 00       		.uleb128 0
 257 0008 50       		.uleb128 .LEHB6-.LFB870
 258 0009 05       		.uleb128 .LEHE6-.LEHB6
 259 000a 72       		.uleb128 .L16-.LFB870
 260 000b 00       		.uleb128 0
 261 000c 5C       		.uleb128 .LEHB7-.LFB870
 262 000d 05       		.uleb128 .LEHE7-.LEHB7
 263 000e 00       		.uleb128 0
 264 000f 00       		.uleb128 0
 265 0010 8701     		.uleb128 .LEHB8-.LFB870
 266 0012 05       		.uleb128 .LEHE8-.LEHB8
 267 0013 00       		.uleb128 0
 268 0014 00       		.uleb128 0
 269              	.LLSDACSE870:
 270              		.text
 272              		.section	.text._ZNSt4pairIiSsED2Ev,"axG",@progbits,_ZNSt4pairIiSsED5Ev,comdat
 273              		.align 2
 274              		.weak	_ZNSt4pairIiSsED2Ev
 276              	_ZNSt4pairIiSsED2Ev:
 277              	.LFB876:
 278              		.file 4 "/usr/include/c++/4.9/bits/stl_pair.h"
   1:/usr/include/c++/4.9/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/include/c++/4.9/bits/stl_pair.h **** 
   3:/usr/include/c++/4.9/bits/stl_pair.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/stl_pair.h **** //
   5:/usr/include/c++/4.9/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/stl_pair.h **** // any later version.
  10:/usr/include/c++/4.9/bits/stl_pair.h **** 
  11:/usr/include/c++/4.9/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/stl_pair.h **** 
  16:/usr/include/c++/4.9/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/stl_pair.h **** 
  20:/usr/include/c++/4.9/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/stl_pair.h **** 
  25:/usr/include/c++/4.9/bits/stl_pair.h **** /*
  26:/usr/include/c++/4.9/bits/stl_pair.h ****  *
  27:/usr/include/c++/4.9/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.9/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.9/bits/stl_pair.h ****  *
  30:/usr/include/c++/4.9/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.9/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.9/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.9/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.9/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.9/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.9/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.9/bits/stl_pair.h ****  *
  38:/usr/include/c++/4.9/bits/stl_pair.h ****  *
  39:/usr/include/c++/4.9/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/4.9/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.9/bits/stl_pair.h ****  *
  42:/usr/include/c++/4.9/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.9/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.9/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.9/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.9/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.9/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.9/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.9/bits/stl_pair.h ****  */
  50:/usr/include/c++/4.9/bits/stl_pair.h **** 
  51:/usr/include/c++/4.9/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/include/c++/4.9/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.9/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/include/c++/4.9/bits/stl_pair.h ****  */
  55:/usr/include/c++/4.9/bits/stl_pair.h **** 
  56:/usr/include/c++/4.9/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/include/c++/4.9/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/include/c++/4.9/bits/stl_pair.h **** 
  59:/usr/include/c++/4.9/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/include/c++/4.9/bits/stl_pair.h **** 
  61:/usr/include/c++/4.9/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/include/c++/4.9/bits/stl_pair.h **** #include <type_traits> // for std::__decay_and_strip too
  63:/usr/include/c++/4.9/bits/stl_pair.h **** #endif
  64:/usr/include/c++/4.9/bits/stl_pair.h **** 
  65:/usr/include/c++/4.9/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  66:/usr/include/c++/4.9/bits/stl_pair.h **** {
  67:/usr/include/c++/4.9/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  68:/usr/include/c++/4.9/bits/stl_pair.h **** 
  69:/usr/include/c++/4.9/bits/stl_pair.h ****   /**
  70:/usr/include/c++/4.9/bits/stl_pair.h ****    *  @addtogroup utilities
  71:/usr/include/c++/4.9/bits/stl_pair.h ****    *  @{
  72:/usr/include/c++/4.9/bits/stl_pair.h ****    */
  73:/usr/include/c++/4.9/bits/stl_pair.h **** 
  74:/usr/include/c++/4.9/bits/stl_pair.h **** #if __cplusplus >= 201103L
  75:/usr/include/c++/4.9/bits/stl_pair.h ****   /// piecewise_construct_t
  76:/usr/include/c++/4.9/bits/stl_pair.h ****   struct piecewise_construct_t { };
  77:/usr/include/c++/4.9/bits/stl_pair.h **** 
  78:/usr/include/c++/4.9/bits/stl_pair.h ****   /// piecewise_construct
  79:/usr/include/c++/4.9/bits/stl_pair.h ****   constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();
  80:/usr/include/c++/4.9/bits/stl_pair.h **** 
  81:/usr/include/c++/4.9/bits/stl_pair.h ****   // Forward declarations.
  82:/usr/include/c++/4.9/bits/stl_pair.h ****   template<typename...>
  83:/usr/include/c++/4.9/bits/stl_pair.h ****     class tuple;
  84:/usr/include/c++/4.9/bits/stl_pair.h **** 
  85:/usr/include/c++/4.9/bits/stl_pair.h ****   template<std::size_t...>
  86:/usr/include/c++/4.9/bits/stl_pair.h ****     struct _Index_tuple;
  87:/usr/include/c++/4.9/bits/stl_pair.h **** #endif
  88:/usr/include/c++/4.9/bits/stl_pair.h **** 
  89:/usr/include/c++/4.9/bits/stl_pair.h ****  /**
  90:/usr/include/c++/4.9/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
  91:/usr/include/c++/4.9/bits/stl_pair.h ****    *
  92:/usr/include/c++/4.9/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
  93:/usr/include/c++/4.9/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
  94:/usr/include/c++/4.9/bits/stl_pair.h ****    */
  95:/usr/include/c++/4.9/bits/stl_pair.h ****   template<class _T1, class _T2>
  96:/usr/include/c++/4.9/bits/stl_pair.h ****     struct pair
 279              		.loc 4 96 0
 280              		.cfi_startproc
 281 0000 55       		pushq	%rbp
 282              		.cfi_def_cfa_offset 16
 283              		.cfi_offset 6, -16
 284 0001 4889E5   		movq	%rsp, %rbp
 285              		.cfi_def_cfa_register 6
 286 0004 4883EC10 		subq	$16, %rsp
 287 0008 48897DF8 		movq	%rdi, -8(%rbp)
 288              	.LBB3:
 289              		.loc 4 96 0
 290 000c 488B45F8 		movq	-8(%rbp), %rax
 291 0010 4883C008 		addq	$8, %rax
 292 0014 4889C7   		movq	%rax, %rdi
 293 0017 E8000000 		call	_ZNSsD1Ev@PLT
 293      00
 294              	.LBE3:
 295 001c C9       		leave
 296              		.cfi_def_cfa 7, 8
 297 001d C3       		ret
 298              		.cfi_endproc
 299              	.LFE876:
 301              		.weak	_ZNSt4pairIiSsED1Ev
 302              		.set	_ZNSt4pairIiSsED1Ev,_ZNSt4pairIiSsED2Ev
 303              		.text
 304              		.align 2
 305              		.globl	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
 307              	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc:
 308              	.LFB874:
  11:DeferredTestReporter.cpp **** 
  12:DeferredTestReporter.cpp **** void DeferredTestReporter::ReportFailure(TestDetails const& details, char const* failure)
  13:DeferredTestReporter.cpp **** {
 309              		.loc 3 13 0
 310              		.cfi_startproc
 311              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 312              		.cfi_lsda 0x1b,.LLSDA874
 313 0098 55       		pushq	%rbp
 314              		.cfi_def_cfa_offset 16
 315              		.cfi_offset 6, -16
 316 0099 4889E5   		movq	%rsp, %rbp
 317              		.cfi_def_cfa_register 6
 318 009c 53       		pushq	%rbx
 319 009d 4883EC68 		subq	$104, %rsp
 320              		.cfi_offset 3, -24
 321 00a1 48897DA8 		movq	%rdi, -88(%rbp)
 322 00a5 488975A0 		movq	%rsi, -96(%rbp)
 323 00a9 48895598 		movq	%rdx, -104(%rbp)
 324              		.loc 3 13 0
 325 00ad 64488B04 		movq	%fs:40, %rax
 325      25280000 
 325      00
 326 00b6 488945E8 		movq	%rax, -24(%rbp)
 327 00ba 31C0     		xorl	%eax, %eax
 328              	.LBB4:
  14:DeferredTestReporter.cpp ****     DeferredTestResult& r = m_results.back();
 329              		.loc 3 14 0
 330 00bc 488B45A8 		movq	-88(%rbp), %rax
 331 00c0 4883C008 		addq	$8, %rax
 332 00c4 4889C7   		movq	%rax, %rdi
 333              	.LEHB9:
 334 00c7 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv@PLT
 334      00
 335              	.LEHE9:
 336 00cc 488945C8 		movq	%rax, -56(%rbp)
  15:DeferredTestReporter.cpp ****     r.failed = true;
 337              		.loc 3 15 0
 338 00d0 488B45C8 		movq	-56(%rbp), %rax
 339 00d4 C6403401 		movb	$1, 52(%rax)
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 340              		.loc 3 16 0
 341 00d8 488D45BF 		leaq	-65(%rbp), %rax
 342 00dc 4889C7   		movq	%rax, %rdi
 343 00df E8000000 		call	_ZNSaIcEC1Ev@PLT
 343      00
 344 00e4 488D55BF 		leaq	-65(%rbp), %rdx
 345 00e8 488B4D98 		movq	-104(%rbp), %rcx
 346 00ec 488D45C0 		leaq	-64(%rbp), %rax
 347 00f0 4889CE   		movq	%rcx, %rsi
 348 00f3 4889C7   		movq	%rax, %rdi
 349              	.LEHB10:
 350 00f6 E8000000 		call	_ZNSsC1EPKcRKSaIcE@PLT
 350      00
 351              	.LEHE10:
 352              		.loc 3 16 0 is_stmt 0 discriminator 2
 353 00fb 488B45A0 		movq	-96(%rbp), %rax
 354 00ff 488D4818 		leaq	24(%rax), %rcx
 355 0103 488D55C0 		leaq	-64(%rbp), %rdx
 356 0107 488D45D0 		leaq	-48(%rbp), %rax
 357 010b 4889CE   		movq	%rcx, %rsi
 358 010e 4889C7   		movq	%rax, %rdi
 359              	.LEHB11:
 360 0111 E8000000 		call	_ZNSt4pairIiSsEC1ERKiRKSs@PLT
 360      00
 361              	.LEHE11:
 362              		.loc 3 16 0 discriminator 4
 363 0116 488B45C8 		movq	-56(%rbp), %rax
 364 011a 488D5018 		leaq	24(%rax), %rdx
 365 011e 488D45D0 		leaq	-48(%rbp), %rax
 366 0122 4889C6   		movq	%rax, %rsi
 367 0125 4889D7   		movq	%rdx, %rdi
 368              	.LEHB12:
 369 0128 E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EE9push_backERKS1_@PLT
 369      00
 370              	.LEHE12:
 371              		.loc 3 16 0 discriminator 6
 372 012d 488D45D0 		leaq	-48(%rbp), %rax
 373 0131 4889C7   		movq	%rax, %rdi
 374              	.LEHB13:
 375 0134 E8000000 		call	_ZNSt4pairIiSsED1Ev@PLT
 375      00
 376              	.LEHE13:
 377              		.loc 3 16 0 discriminator 8
 378 0139 488D45C0 		leaq	-64(%rbp), %rax
 379 013d 4889C7   		movq	%rax, %rdi
 380              	.LEHB14:
 381 0140 E8000000 		call	_ZNSsD1Ev@PLT
 381      00
 382              	.LEHE14:
 383              		.loc 3 16 0 discriminator 10
 384 0145 488D45BF 		leaq	-65(%rbp), %rax
 385 0149 4889C7   		movq	%rax, %rdi
 386 014c E8000000 		call	_ZNSaIcED1Ev@PLT
 386      00
  17:DeferredTestReporter.cpp ****     r.failureFile = details.filename;
 387              		.loc 3 17 0 is_stmt 1 discriminator 10
 388 0151 488B45A0 		movq	-96(%rbp), %rax
 389 0155 488B4010 		movq	16(%rax), %rax
 390 0159 488B55C8 		movq	-56(%rbp), %rdx
 391 015d 4883C210 		addq	$16, %rdx
 392 0161 4889C6   		movq	%rax, %rsi
 393 0164 4889D7   		movq	%rdx, %rdi
 394              	.LEHB15:
 395 0167 E8000000 		call	_ZNSsaSEPKc@PLT
 395      00
 396              	.LEHE15:
 397              	.LBE4:
  18:DeferredTestReporter.cpp **** }
 398              		.loc 3 18 0 discriminator 10
 399 016c 488B45E8 		movq	-24(%rbp), %rax
 400 0170 64483304 		xorq	%fs:40, %rax
 400      25280000 
 400      00
 401 0179 7443     		je	.L24
 402 017b EB3C     		jmp	.L28
 403              	.L27:
 404 017d 4889C3   		movq	%rax, %rbx
 405              	.LBB5:
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 406              		.loc 3 16 0
 407 0180 488D45D0 		leaq	-48(%rbp), %rax
 408 0184 4889C7   		movq	%rax, %rdi
 409 0187 E8000000 		call	_ZNSt4pairIiSsED1Ev@PLT
 409      00
 410 018c EB03     		jmp	.L22
 411              	.L26:
 412 018e 4889C3   		movq	%rax, %rbx
 413              	.L22:
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 414              		.loc 3 16 0 is_stmt 0 discriminator 7
 415 0191 488D45C0 		leaq	-64(%rbp), %rax
 416 0195 4889C7   		movq	%rax, %rdi
 417 0198 E8000000 		call	_ZNSsD1Ev@PLT
 417      00
 418 019d EB03     		jmp	.L23
 419              	.L25:
 420 019f 4889C3   		movq	%rax, %rbx
 421              	.L23:
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 422              		.loc 3 16 0 discriminator 9
 423 01a2 488D45BF 		leaq	-65(%rbp), %rax
 424 01a6 4889C7   		movq	%rax, %rdi
 425 01a9 E8000000 		call	_ZNSaIcED1Ev@PLT
 425      00
 426 01ae 4889D8   		movq	%rbx, %rax
 427 01b1 4889C7   		movq	%rax, %rdi
 428              	.LEHB16:
 429 01b4 E8000000 		call	_Unwind_Resume@PLT
 429      00
 430              	.LEHE16:
 431              	.L28:
 432              	.LBE5:
 433              		.loc 3 18 0 is_stmt 1
 434 01b9 E8000000 		call	__stack_chk_fail@PLT
 434      00
 435              	.L24:
 436 01be 4883C468 		addq	$104, %rsp
 437 01c2 5B       		popq	%rbx
 438 01c3 5D       		popq	%rbp
 439              		.cfi_def_cfa 7, 8
 440 01c4 C3       		ret
 441              		.cfi_endproc
 442              	.LFE874:
 443              		.section	.gcc_except_table
 444              	.LLSDA874:
 445 0015 FF       		.byte	0xff
 446 0016 FF       		.byte	0xff
 447 0017 01       		.byte	0x1
 448 0018 2A       		.uleb128 .LLSDACSE874-.LLSDACSB874
 449              	.LLSDACSB874:
 450 0019 2F       		.uleb128 .LEHB9-.LFB874
 451 001a 05       		.uleb128 .LEHE9-.LEHB9
 452 001b 00       		.uleb128 0
 453 001c 00       		.uleb128 0
 454 001d 5E       		.uleb128 .LEHB10-.LFB874
 455 001e 05       		.uleb128 .LEHE10-.LEHB10
 456 001f 8702     		.uleb128 .L25-.LFB874
 457 0021 00       		.uleb128 0
 458 0022 79       		.uleb128 .LEHB11-.LFB874
 459 0023 05       		.uleb128 .LEHE11-.LEHB11
 460 0024 F601     		.uleb128 .L26-.LFB874
 461 0026 00       		.uleb128 0
 462 0027 9001     		.uleb128 .LEHB12-.LFB874
 463 0029 05       		.uleb128 .LEHE12-.LEHB12
 464 002a E501     		.uleb128 .L27-.LFB874
 465 002c 00       		.uleb128 0
 466 002d 9C01     		.uleb128 .LEHB13-.LFB874
 467 002f 05       		.uleb128 .LEHE13-.LEHB13
 468 0030 F601     		.uleb128 .L26-.LFB874
 469 0032 00       		.uleb128 0
 470 0033 A801     		.uleb128 .LEHB14-.LFB874
 471 0035 05       		.uleb128 .LEHE14-.LEHB14
 472 0036 8702     		.uleb128 .L25-.LFB874
 473 0038 00       		.uleb128 0
 474 0039 CF01     		.uleb128 .LEHB15-.LFB874
 475 003b 05       		.uleb128 .LEHE15-.LEHB15
 476 003c 00       		.uleb128 0
 477 003d 00       		.uleb128 0
 478 003e 9C02     		.uleb128 .LEHB16-.LFB874
 479 0040 05       		.uleb128 .LEHE16-.LEHB16
 480 0041 00       		.uleb128 0
 481 0042 00       		.uleb128 0
 482              	.LLSDACSE874:
 483              		.text
 485 01c5 90       		.align 2
 486              		.globl	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
 488              	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf:
 489              	.LFB878:
  19:DeferredTestReporter.cpp **** 
  20:DeferredTestReporter.cpp **** void DeferredTestReporter::ReportTestFinish(TestDetails const&, float secondsElapsed)
  21:DeferredTestReporter.cpp **** {
 490              		.loc 3 21 0
 491              		.cfi_startproc
 492 01c6 55       		pushq	%rbp
 493              		.cfi_def_cfa_offset 16
 494              		.cfi_offset 6, -16
 495 01c7 4889E5   		movq	%rsp, %rbp
 496              		.cfi_def_cfa_register 6
 497 01ca 4883EC30 		subq	$48, %rsp
 498 01ce 48897DE8 		movq	%rdi, -24(%rbp)
 499 01d2 488975E0 		movq	%rsi, -32(%rbp)
 500 01d6 F30F1145 		movss	%xmm0, -36(%rbp)
 500      DC
 501              	.LBB6:
  22:DeferredTestReporter.cpp ****     DeferredTestResult& r = m_results.back();
 502              		.loc 3 22 0
 503 01db 488B45E8 		movq	-24(%rbp), %rax
 504 01df 4883C008 		addq	$8, %rax
 505 01e3 4889C7   		movq	%rax, %rdi
 506 01e6 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv@PLT
 506      00
 507 01eb 488945F8 		movq	%rax, -8(%rbp)
  23:DeferredTestReporter.cpp ****     r.timeElapsed = secondsElapsed;
 508              		.loc 3 23 0
 509 01ef 488B55F8 		movq	-8(%rbp), %rdx
 510 01f3 8B45DC   		movl	-36(%rbp), %eax
 511 01f6 894230   		movl	%eax, 48(%rdx)
 512              	.LBE6:
  24:DeferredTestReporter.cpp **** }
 513              		.loc 3 24 0
 514 01f9 C9       		leave
 515              		.cfi_def_cfa 7, 8
 516 01fa C3       		ret
 517              		.cfi_endproc
 518              	.LFE878:
 520 01fb 90       		.align 2
 521              		.globl	_ZN8UnitTest20DeferredTestReporter10GetResultsEv
 523              	_ZN8UnitTest20DeferredTestReporter10GetResultsEv:
 524              	.LFB879:
  25:DeferredTestReporter.cpp **** 
  26:DeferredTestReporter.cpp **** DeferredTestReporter::DeferredTestResultList& DeferredTestReporter::GetResults()
  27:DeferredTestReporter.cpp **** {
 525              		.loc 3 27 0
 526              		.cfi_startproc
 527 01fc 55       		pushq	%rbp
 528              		.cfi_def_cfa_offset 16
 529              		.cfi_offset 6, -16
 530 01fd 4889E5   		movq	%rsp, %rbp
 531              		.cfi_def_cfa_register 6
 532 0200 48897DF8 		movq	%rdi, -8(%rbp)
  28:DeferredTestReporter.cpp ****     return m_results;
 533              		.loc 3 28 0
 534 0204 488B45F8 		movq	-8(%rbp), %rax
 535 0208 4883C008 		addq	$8, %rax
  29:DeferredTestReporter.cpp **** }
 536              		.loc 3 29 0
 537 020c 5D       		popq	%rbp
 538              		.cfi_def_cfa 7, 8
 539 020d C3       		ret
 540              		.cfi_endproc
 541              	.LFE879:
 543              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vectorISt4pairIiSsESaIS
 544              		.align 2
 545              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev
 547              	_ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev:
 548              	.LFB888:
 549              		.file 5 "/usr/include/c++/4.9/bits/stl_vector.h"
   1:/usr/include/c++/4.9/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/4.9/bits/stl_vector.h **** 
   3:/usr/include/c++/4.9/bits/stl_vector.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/stl_vector.h **** //
   5:/usr/include/c++/4.9/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/4.9/bits/stl_vector.h **** 
  11:/usr/include/c++/4.9/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/stl_vector.h **** 
  16:/usr/include/c++/4.9/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/stl_vector.h **** 
  20:/usr/include/c++/4.9/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/stl_vector.h **** 
  25:/usr/include/c++/4.9/bits/stl_vector.h **** /*
  26:/usr/include/c++/4.9/bits/stl_vector.h ****  *
  27:/usr/include/c++/4.9/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.9/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.9/bits/stl_vector.h ****  *
  30:/usr/include/c++/4.9/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.9/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.9/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.9/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.9/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.9/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.9/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.9/bits/stl_vector.h ****  *
  38:/usr/include/c++/4.9/bits/stl_vector.h ****  *
  39:/usr/include/c++/4.9/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/4.9/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.9/bits/stl_vector.h ****  *
  42:/usr/include/c++/4.9/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.9/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.9/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.9/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.9/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.9/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/4.9/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.9/bits/stl_vector.h ****  */
  50:/usr/include/c++/4.9/bits/stl_vector.h **** 
  51:/usr/include/c++/4.9/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/4.9/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.9/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/4.9/bits/stl_vector.h ****  */
  55:/usr/include/c++/4.9/bits/stl_vector.h **** 
  56:/usr/include/c++/4.9/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/4.9/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/4.9/bits/stl_vector.h **** 
  59:/usr/include/c++/4.9/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/4.9/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/4.9/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/4.9/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
  65:/usr/include/c++/4.9/bits/stl_vector.h **** 
  66:/usr/include/c++/4.9/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:/usr/include/c++/4.9/bits/stl_vector.h **** {
  68:/usr/include/c++/4.9/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  69:/usr/include/c++/4.9/bits/stl_vector.h **** 
  70:/usr/include/c++/4.9/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  71:/usr/include/c++/4.9/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  72:/usr/include/c++/4.9/bits/stl_vector.h ****     struct _Vector_base
  73:/usr/include/c++/4.9/bits/stl_vector.h ****     {
  74:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  75:/usr/include/c++/4.9/bits/stl_vector.h ****         rebind<_Tp>::other _Tp_alloc_type;
  76:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  77:/usr/include/c++/4.9/bits/stl_vector.h ****        	pointer;
  78:/usr/include/c++/4.9/bits/stl_vector.h **** 
  79:/usr/include/c++/4.9/bits/stl_vector.h ****       struct _Vector_impl 
  80:/usr/include/c++/4.9/bits/stl_vector.h ****       : public _Tp_alloc_type
  81:/usr/include/c++/4.9/bits/stl_vector.h ****       {
  82:/usr/include/c++/4.9/bits/stl_vector.h **** 	pointer _M_start;
  83:/usr/include/c++/4.9/bits/stl_vector.h **** 	pointer _M_finish;
  84:/usr/include/c++/4.9/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  85:/usr/include/c++/4.9/bits/stl_vector.h **** 
  86:/usr/include/c++/4.9/bits/stl_vector.h **** 	_Vector_impl()
  87:/usr/include/c++/4.9/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  88:/usr/include/c++/4.9/bits/stl_vector.h **** 	{ }
  89:/usr/include/c++/4.9/bits/stl_vector.h **** 
  90:/usr/include/c++/4.9/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
  91:/usr/include/c++/4.9/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  92:/usr/include/c++/4.9/bits/stl_vector.h **** 	{ }
  93:/usr/include/c++/4.9/bits/stl_vector.h **** 
  94:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
  95:/usr/include/c++/4.9/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
  96:/usr/include/c++/4.9/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)),
  97:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_start(0), _M_finish(0), _M_end_of_storage(0)
  98:/usr/include/c++/4.9/bits/stl_vector.h **** 	{ }
  99:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 100:/usr/include/c++/4.9/bits/stl_vector.h **** 
 101:/usr/include/c++/4.9/bits/stl_vector.h **** 	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 102:/usr/include/c++/4.9/bits/stl_vector.h **** 	{
 103:/usr/include/c++/4.9/bits/stl_vector.h **** 	  std::swap(_M_start, __x._M_start);
 104:/usr/include/c++/4.9/bits/stl_vector.h **** 	  std::swap(_M_finish, __x._M_finish);
 105:/usr/include/c++/4.9/bits/stl_vector.h **** 	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 106:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
 107:/usr/include/c++/4.9/bits/stl_vector.h ****       };
 108:/usr/include/c++/4.9/bits/stl_vector.h ****       
 109:/usr/include/c++/4.9/bits/stl_vector.h ****     public:
 110:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 111:/usr/include/c++/4.9/bits/stl_vector.h **** 
 112:/usr/include/c++/4.9/bits/stl_vector.h ****       _Tp_alloc_type&
 113:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 114:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 115:/usr/include/c++/4.9/bits/stl_vector.h **** 
 116:/usr/include/c++/4.9/bits/stl_vector.h ****       const _Tp_alloc_type&
 117:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 118:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 119:/usr/include/c++/4.9/bits/stl_vector.h **** 
 120:/usr/include/c++/4.9/bits/stl_vector.h ****       allocator_type
 121:/usr/include/c++/4.9/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 122:/usr/include/c++/4.9/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 123:/usr/include/c++/4.9/bits/stl_vector.h **** 
 124:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_base()
 125:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl() { }
 126:/usr/include/c++/4.9/bits/stl_vector.h **** 
 127:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 128:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl(__a) { }
 129:/usr/include/c++/4.9/bits/stl_vector.h **** 
 130:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_base(size_t __n)
 131:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl()
 132:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_create_storage(__n); }
 133:/usr/include/c++/4.9/bits/stl_vector.h **** 
 134:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 135:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl(__a)
 136:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_create_storage(__n); }
 137:/usr/include/c++/4.9/bits/stl_vector.h **** 
 138:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 139:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 140:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 141:/usr/include/c++/4.9/bits/stl_vector.h **** 
 142:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x) noexcept
 143:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 144:/usr/include/c++/4.9/bits/stl_vector.h ****       { this->_M_impl._M_swap_data(__x._M_impl); }
 145:/usr/include/c++/4.9/bits/stl_vector.h **** 
 146:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 147:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl(__a)
 148:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 149:/usr/include/c++/4.9/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 150:/usr/include/c++/4.9/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 151:/usr/include/c++/4.9/bits/stl_vector.h **** 	else
 152:/usr/include/c++/4.9/bits/stl_vector.h **** 	  {
 153:/usr/include/c++/4.9/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 154:/usr/include/c++/4.9/bits/stl_vector.h **** 	    _M_create_storage(__n);
 155:/usr/include/c++/4.9/bits/stl_vector.h **** 	  }
 156:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 157:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 158:/usr/include/c++/4.9/bits/stl_vector.h **** 
 159:/usr/include/c++/4.9/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 160:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 161:/usr/include/c++/4.9/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 162:/usr/include/c++/4.9/bits/stl_vector.h **** 
 163:/usr/include/c++/4.9/bits/stl_vector.h ****     public:
 164:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_impl _M_impl;
 165:/usr/include/c++/4.9/bits/stl_vector.h **** 
 166:/usr/include/c++/4.9/bits/stl_vector.h ****       pointer
 167:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_allocate(size_t __n)
 168:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 169:/usr/include/c++/4.9/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 170:/usr/include/c++/4.9/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : 0;
 171:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 172:/usr/include/c++/4.9/bits/stl_vector.h **** 
 173:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 174:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 175:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 176:/usr/include/c++/4.9/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 177:/usr/include/c++/4.9/bits/stl_vector.h **** 	if (__p)
 178:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 179:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 180:/usr/include/c++/4.9/bits/stl_vector.h **** 
 181:/usr/include/c++/4.9/bits/stl_vector.h ****     private:
 182:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 183:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 184:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 185:/usr/include/c++/4.9/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 186:/usr/include/c++/4.9/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 187:/usr/include/c++/4.9/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 188:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 189:/usr/include/c++/4.9/bits/stl_vector.h ****     };
 190:/usr/include/c++/4.9/bits/stl_vector.h **** 
 191:/usr/include/c++/4.9/bits/stl_vector.h **** 
 192:/usr/include/c++/4.9/bits/stl_vector.h ****   /**
 193:/usr/include/c++/4.9/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 194:/usr/include/c++/4.9/bits/stl_vector.h ****    *  individual elements in any order.
 195:/usr/include/c++/4.9/bits/stl_vector.h ****    *
 196:/usr/include/c++/4.9/bits/stl_vector.h ****    *  @ingroup sequences
 197:/usr/include/c++/4.9/bits/stl_vector.h ****    *
 198:/usr/include/c++/4.9/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 199:/usr/include/c++/4.9/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 200:/usr/include/c++/4.9/bits/stl_vector.h ****    *
 201:/usr/include/c++/4.9/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 202:/usr/include/c++/4.9/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 203:/usr/include/c++/4.9/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 204:/usr/include/c++/4.9/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 205:/usr/include/c++/4.9/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 206:/usr/include/c++/4.9/bits/stl_vector.h ****    *
 207:/usr/include/c++/4.9/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 208:/usr/include/c++/4.9/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 209:/usr/include/c++/4.9/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 210:/usr/include/c++/4.9/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 211:/usr/include/c++/4.9/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 212:/usr/include/c++/4.9/bits/stl_vector.h ****   */
 213:/usr/include/c++/4.9/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 214:/usr/include/c++/4.9/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 215:/usr/include/c++/4.9/bits/stl_vector.h ****     {
 216:/usr/include/c++/4.9/bits/stl_vector.h ****       // Concept requirements.
 217:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 218:/usr/include/c++/4.9/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 219:/usr/include/c++/4.9/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 220:/usr/include/c++/4.9/bits/stl_vector.h ****       
 221:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 222:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 223:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>  _Alloc_traits;
 224:/usr/include/c++/4.9/bits/stl_vector.h **** 
 225:/usr/include/c++/4.9/bits/stl_vector.h ****     public:
 226:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef _Tp					 value_type;
 227:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename _Base::pointer                    pointer;
 228:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer      const_pointer;
 229:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference          reference;
 230:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference    const_reference;
 231:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 232:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 233:/usr/include/c++/4.9/bits/stl_vector.h ****       const_iterator;
 234:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 235:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 236:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef size_t					 size_type;
 237:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 238:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 239:/usr/include/c++/4.9/bits/stl_vector.h **** 
 240:/usr/include/c++/4.9/bits/stl_vector.h ****     protected:
 241:/usr/include/c++/4.9/bits/stl_vector.h ****       using _Base::_M_allocate;
 242:/usr/include/c++/4.9/bits/stl_vector.h ****       using _Base::_M_deallocate;
 243:/usr/include/c++/4.9/bits/stl_vector.h ****       using _Base::_M_impl;
 244:/usr/include/c++/4.9/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 245:/usr/include/c++/4.9/bits/stl_vector.h **** 
 246:/usr/include/c++/4.9/bits/stl_vector.h ****     public:
 247:/usr/include/c++/4.9/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 248:/usr/include/c++/4.9/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 249:/usr/include/c++/4.9/bits/stl_vector.h **** 
 250:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 251:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 252:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 253:/usr/include/c++/4.9/bits/stl_vector.h ****       vector()
 254:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 255:/usr/include/c++/4.9/bits/stl_vector.h ****       noexcept(is_nothrow_default_constructible<_Alloc>::value)
 256:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 257:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base() { }
 258:/usr/include/c++/4.9/bits/stl_vector.h **** 
 259:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 260:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 261:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 262:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 263:/usr/include/c++/4.9/bits/stl_vector.h ****       explicit
 264:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 265:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__a) { }
 266:/usr/include/c++/4.9/bits/stl_vector.h **** 
 267:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 268:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 269:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 270:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 271:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 272:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 273:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 274:/usr/include/c++/4.9/bits/stl_vector.h ****        *  constructed elements.
 275:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 276:/usr/include/c++/4.9/bits/stl_vector.h ****       explicit
 277:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 278:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__n, __a)
 279:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 280:/usr/include/c++/4.9/bits/stl_vector.h **** 
 281:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 282:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 283:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 284:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 285:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 286:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 287:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 288:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 289:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 290:/usr/include/c++/4.9/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 291:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__n, __a)
 292:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 293:/usr/include/c++/4.9/bits/stl_vector.h **** #else
 294:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 295:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 296:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 297:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 298:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 299:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 300:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 301:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 302:/usr/include/c++/4.9/bits/stl_vector.h ****       explicit
 303:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 304:/usr/include/c++/4.9/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 305:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__n, __a)
 306:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 307:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 308:/usr/include/c++/4.9/bits/stl_vector.h **** 
 309:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 310:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 311:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 312:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 313:/usr/include/c++/4.9/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 314:/usr/include/c++/4.9/bits/stl_vector.h ****        *  object used by @a __x.  All the elements of @a __x are copied,
 315:/usr/include/c++/4.9/bits/stl_vector.h ****        *  but any extra memory in
 316:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.
 317:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 318:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(const vector& __x)
 319:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__x.size(),
 320:/usr/include/c++/4.9/bits/stl_vector.h ****         _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 321:/usr/include/c++/4.9/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 322:/usr/include/c++/4.9/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 323:/usr/include/c++/4.9/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 324:/usr/include/c++/4.9/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 325:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 326:/usr/include/c++/4.9/bits/stl_vector.h **** 
 327:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 328:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 329:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 330:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 331:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 332:/usr/include/c++/4.9/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a __x.
 333:/usr/include/c++/4.9/bits/stl_vector.h ****        *  The contents of @a __x are a valid, but unspecified %vector.
 334:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 335:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(vector&& __x) noexcept
 336:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(std::move(__x)) { }
 337:/usr/include/c++/4.9/bits/stl_vector.h **** 
 338:/usr/include/c++/4.9/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 339:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 340:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 341:/usr/include/c++/4.9/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 342:/usr/include/c++/4.9/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 343:/usr/include/c++/4.9/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 344:/usr/include/c++/4.9/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 345:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 346:/usr/include/c++/4.9/bits/stl_vector.h **** 
 347:/usr/include/c++/4.9/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 348:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 349:/usr/include/c++/4.9/bits/stl_vector.h ****       noexcept(_Alloc_traits::_S_always_equal())
 350:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(std::move(__rv), __m)
 351:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 352:/usr/include/c++/4.9/bits/stl_vector.h **** 	if (__rv.get_allocator() != __m)
 353:/usr/include/c++/4.9/bits/stl_vector.h **** 	  {
 354:/usr/include/c++/4.9/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 355:/usr/include/c++/4.9/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 356:/usr/include/c++/4.9/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 357:/usr/include/c++/4.9/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 358:/usr/include/c++/4.9/bits/stl_vector.h **** 	    __rv.clear();
 359:/usr/include/c++/4.9/bits/stl_vector.h **** 	  }
 360:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 361:/usr/include/c++/4.9/bits/stl_vector.h **** 
 362:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 363:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 364:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 365:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 366:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 367:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 368:/usr/include/c++/4.9/bits/stl_vector.h ****        *  initializer_list @a __l.
 369:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 370:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 371:/usr/include/c++/4.9/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 372:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 373:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 374:/usr/include/c++/4.9/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 375:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__a)
 376:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 377:/usr/include/c++/4.9/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 378:/usr/include/c++/4.9/bits/stl_vector.h **** 			    random_access_iterator_tag());
 379:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 380:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 381:/usr/include/c++/4.9/bits/stl_vector.h **** 
 382:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 383:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 384:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 385:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 386:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 387:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 388:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 389:/usr/include/c++/4.9/bits/stl_vector.h ****        *  [first,last).
 390:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 391:/usr/include/c++/4.9/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 392:/usr/include/c++/4.9/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 393:/usr/include/c++/4.9/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 394:/usr/include/c++/4.9/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 395:/usr/include/c++/4.9/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 396:/usr/include/c++/4.9/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 397:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 398:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 399:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator,
 400:/usr/include/c++/4.9/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 401:/usr/include/c++/4.9/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 402:/usr/include/c++/4.9/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 403:/usr/include/c++/4.9/bits/stl_vector.h **** 	: _Base(__a)
 404:/usr/include/c++/4.9/bits/stl_vector.h ****         { _M_initialize_dispatch(__first, __last, __false_type()); }
 405:/usr/include/c++/4.9/bits/stl_vector.h **** #else
 406:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator>
 407:/usr/include/c++/4.9/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 408:/usr/include/c++/4.9/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 409:/usr/include/c++/4.9/bits/stl_vector.h **** 	: _Base(__a)
 410:/usr/include/c++/4.9/bits/stl_vector.h ****         {
 411:/usr/include/c++/4.9/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 412:/usr/include/c++/4.9/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 413:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 414:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
 415:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 416:/usr/include/c++/4.9/bits/stl_vector.h **** 
 417:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 418:/usr/include/c++/4.9/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 419:/usr/include/c++/4.9/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 420:/usr/include/c++/4.9/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 421:/usr/include/c++/4.9/bits/stl_vector.h ****        *  responsibility.
 422:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 423:/usr/include/c++/4.9/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 550              		.loc 5 423 0
 551              		.cfi_startproc
 552              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 553              		.cfi_lsda 0x1b,.LLSDA888
 554 0000 55       		pushq	%rbp
 555              		.cfi_def_cfa_offset 16
 556              		.cfi_offset 6, -16
 557 0001 4889E5   		movq	%rsp, %rbp
 558              		.cfi_def_cfa_register 6
 559 0004 53       		pushq	%rbx
 560 0005 4883EC18 		subq	$24, %rsp
 561              		.cfi_offset 3, -24
 562 0009 48897DE8 		movq	%rdi, -24(%rbp)
 563              	.LBB7:
 424:/usr/include/c++/4.9/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 425:/usr/include/c++/4.9/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 564              		.loc 5 425 0
 565 000d 488B45E8 		movq	-24(%rbp), %rax
 566 0011 4889C7   		movq	%rax, %rdi
 567              	.LEHB17:
 568 0014 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 568      00
 569 0019 4889C2   		movq	%rax, %rdx
 570 001c 488B45E8 		movq	-24(%rbp), %rax
 571 0020 488B4808 		movq	8(%rax), %rcx
 572 0024 488B45E8 		movq	-24(%rbp), %rax
 573 0028 488B00   		movq	(%rax), %rax
 424:/usr/include/c++/4.9/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 574              		.loc 5 424 0
 575 002b 4889CE   		movq	%rcx, %rsi
 576 002e 4889C7   		movq	%rax, %rdi
 577 0031 E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E@PLT
 577      00
 578              	.LEHE17:
 579              		.loc 5 425 0
 580 0036 488B45E8 		movq	-24(%rbp), %rax
 581 003a 4889C7   		movq	%rax, %rdi
 582              	.LEHB18:
 583 003d E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev@PLT
 583      00
 584              	.LEHE18:
 585 0042 EB1A     		jmp	.L36
 586              	.L35:
 587 0044 4889C3   		movq	%rax, %rbx
 588 0047 488B45E8 		movq	-24(%rbp), %rax
 589 004b 4889C7   		movq	%rax, %rdi
 590 004e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev@PLT
 590      00
 591 0053 4889D8   		movq	%rbx, %rax
 592 0056 4889C7   		movq	%rax, %rdi
 593              	.LEHB19:
 594 0059 E8000000 		call	_Unwind_Resume@PLT
 594      00
 595              	.LEHE19:
 596              	.L36:
 597              	.LBE7:
 598 005e 4883C418 		addq	$24, %rsp
 599 0062 5B       		popq	%rbx
 600 0063 5D       		popq	%rbp
 601              		.cfi_def_cfa 7, 8
 602 0064 C3       		ret
 603              		.cfi_endproc
 604              	.LFE888:
 605              		.section	.gcc_except_table
 606              	.LLSDA888:
 607 0043 FF       		.byte	0xff
 608 0044 FF       		.byte	0xff
 609 0045 01       		.byte	0x1
 610 0046 0C       		.uleb128 .LLSDACSE888-.LLSDACSB888
 611              	.LLSDACSB888:
 612 0047 14       		.uleb128 .LEHB17-.LFB888
 613 0048 22       		.uleb128 .LEHE17-.LEHB17
 614 0049 44       		.uleb128 .L35-.LFB888
 615 004a 00       		.uleb128 0
 616 004b 3D       		.uleb128 .LEHB18-.LFB888
 617 004c 05       		.uleb128 .LEHE18-.LEHB18
 618 004d 00       		.uleb128 0
 619 004e 00       		.uleb128 0
 620 004f 59       		.uleb128 .LEHB19-.LFB888
 621 0050 05       		.uleb128 .LEHE19-.LEHB19
 622 0051 00       		.uleb128 0
 623 0052 00       		.uleb128 0
 624              	.LLSDACSE888:
 625              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vectorISt4pairIiSsESaIS
 627              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev
 628              		.set	_ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev,_ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev
 629              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_,"axG",@progbit
 630              		.align 2
 631              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_
 633              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_:
 634              	.LFB890:
 426:/usr/include/c++/4.9/bits/stl_vector.h **** 
 427:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 428:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 429:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 430:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 431:/usr/include/c++/4.9/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any extra memory in
 432:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.  Unlike the
 433:/usr/include/c++/4.9/bits/stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 434:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 435:/usr/include/c++/4.9/bits/stl_vector.h ****       vector&
 436:/usr/include/c++/4.9/bits/stl_vector.h ****       operator=(const vector& __x);
 437:/usr/include/c++/4.9/bits/stl_vector.h **** 
 438:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 439:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 440:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 441:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 442:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 443:/usr/include/c++/4.9/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 444:/usr/include/c++/4.9/bits/stl_vector.h ****        *  if the allocators permit it).
 445:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @a __x is a valid, but unspecified %vector.
 446:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 447:/usr/include/c++/4.9/bits/stl_vector.h ****       vector&
 448:/usr/include/c++/4.9/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 449:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 450:/usr/include/c++/4.9/bits/stl_vector.h ****         constexpr bool __move_storage =
 451:/usr/include/c++/4.9/bits/stl_vector.h ****           _Alloc_traits::_S_propagate_on_move_assign()
 452:/usr/include/c++/4.9/bits/stl_vector.h ****           || _Alloc_traits::_S_always_equal();
 453:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_move_assign(std::move(__x),
 454:/usr/include/c++/4.9/bits/stl_vector.h ****                        integral_constant<bool, __move_storage>());
 455:/usr/include/c++/4.9/bits/stl_vector.h **** 	return *this;
 456:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 457:/usr/include/c++/4.9/bits/stl_vector.h **** 
 458:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 459:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 460:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 461:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 462:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 463:/usr/include/c++/4.9/bits/stl_vector.h ****        *  initializer list @a __l.
 464:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 465:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 466:/usr/include/c++/4.9/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 467:/usr/include/c++/4.9/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 468:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 469:/usr/include/c++/4.9/bits/stl_vector.h ****       vector&
 470:/usr/include/c++/4.9/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 471:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 472:/usr/include/c++/4.9/bits/stl_vector.h **** 	this->assign(__l.begin(), __l.end());
 473:/usr/include/c++/4.9/bits/stl_vector.h **** 	return *this;
 474:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 475:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 476:/usr/include/c++/4.9/bits/stl_vector.h **** 
 477:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 478:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 479:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 480:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 481:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 482:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 483:/usr/include/c++/4.9/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 484:/usr/include/c++/4.9/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 485:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 486:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 487:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 488:/usr/include/c++/4.9/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 489:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 490:/usr/include/c++/4.9/bits/stl_vector.h **** 
 491:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 492:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 493:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 494:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 495:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 496:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 497:/usr/include/c++/4.9/bits/stl_vector.h ****        *  range [__first,__last).
 498:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 499:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 500:/usr/include/c++/4.9/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 501:/usr/include/c++/4.9/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 502:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 503:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 504:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator,
 505:/usr/include/c++/4.9/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 506:/usr/include/c++/4.9/bits/stl_vector.h ****         void
 507:/usr/include/c++/4.9/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 508:/usr/include/c++/4.9/bits/stl_vector.h ****         { _M_assign_dispatch(__first, __last, __false_type()); }
 509:/usr/include/c++/4.9/bits/stl_vector.h **** #else
 510:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator>
 511:/usr/include/c++/4.9/bits/stl_vector.h ****         void
 512:/usr/include/c++/4.9/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 513:/usr/include/c++/4.9/bits/stl_vector.h ****         {
 514:/usr/include/c++/4.9/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 515:/usr/include/c++/4.9/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 516:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 517:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
 518:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 519:/usr/include/c++/4.9/bits/stl_vector.h **** 
 520:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 521:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 522:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 523:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 524:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 525:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 526:/usr/include/c++/4.9/bits/stl_vector.h ****        *  initializer list @a __l.
 527:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 528:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 529:/usr/include/c++/4.9/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 530:/usr/include/c++/4.9/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 531:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 532:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 533:/usr/include/c++/4.9/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 534:/usr/include/c++/4.9/bits/stl_vector.h ****       { this->assign(__l.begin(), __l.end()); }
 535:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 536:/usr/include/c++/4.9/bits/stl_vector.h **** 
 537:/usr/include/c++/4.9/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 538:/usr/include/c++/4.9/bits/stl_vector.h ****       using _Base::get_allocator;
 539:/usr/include/c++/4.9/bits/stl_vector.h **** 
 540:/usr/include/c++/4.9/bits/stl_vector.h ****       // iterators
 541:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 542:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 543:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 544:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element order.
 545:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 546:/usr/include/c++/4.9/bits/stl_vector.h ****       iterator
 547:/usr/include/c++/4.9/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 548:/usr/include/c++/4.9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 549:/usr/include/c++/4.9/bits/stl_vector.h **** 
 550:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 551:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 552:/usr/include/c++/4.9/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 553:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element order.
 554:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 555:/usr/include/c++/4.9/bits/stl_vector.h ****       const_iterator
 556:/usr/include/c++/4.9/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 557:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 558:/usr/include/c++/4.9/bits/stl_vector.h **** 
 559:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 560:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 561:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 562:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element order.
 563:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 564:/usr/include/c++/4.9/bits/stl_vector.h ****       iterator
 565:/usr/include/c++/4.9/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 566:/usr/include/c++/4.9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 567:/usr/include/c++/4.9/bits/stl_vector.h **** 
 568:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 569:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 570:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 571:/usr/include/c++/4.9/bits/stl_vector.h ****        *  ordinary element order.
 572:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 573:/usr/include/c++/4.9/bits/stl_vector.h ****       const_iterator
 574:/usr/include/c++/4.9/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 575:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 576:/usr/include/c++/4.9/bits/stl_vector.h **** 
 577:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 578:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 579:/usr/include/c++/4.9/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 580:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element order.
 581:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 582:/usr/include/c++/4.9/bits/stl_vector.h ****       reverse_iterator
 583:/usr/include/c++/4.9/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 584:/usr/include/c++/4.9/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 585:/usr/include/c++/4.9/bits/stl_vector.h **** 
 586:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 587:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 588:/usr/include/c++/4.9/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 589:/usr/include/c++/4.9/bits/stl_vector.h ****        *  reverse element order.
 590:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 591:/usr/include/c++/4.9/bits/stl_vector.h ****       const_reverse_iterator
 592:/usr/include/c++/4.9/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 593:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 594:/usr/include/c++/4.9/bits/stl_vector.h **** 
 595:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 596:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 597:/usr/include/c++/4.9/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 598:/usr/include/c++/4.9/bits/stl_vector.h ****        *  in reverse element order.
 599:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 600:/usr/include/c++/4.9/bits/stl_vector.h ****       reverse_iterator
 601:/usr/include/c++/4.9/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 602:/usr/include/c++/4.9/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 603:/usr/include/c++/4.9/bits/stl_vector.h **** 
 604:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 605:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 606:/usr/include/c++/4.9/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 607:/usr/include/c++/4.9/bits/stl_vector.h ****        *  is done in reverse element order.
 608:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 609:/usr/include/c++/4.9/bits/stl_vector.h ****       const_reverse_iterator
 610:/usr/include/c++/4.9/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 611:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 612:/usr/include/c++/4.9/bits/stl_vector.h **** 
 613:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 614:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 615:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 616:/usr/include/c++/4.9/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 617:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element order.
 618:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 619:/usr/include/c++/4.9/bits/stl_vector.h ****       const_iterator
 620:/usr/include/c++/4.9/bits/stl_vector.h ****       cbegin() const noexcept
 621:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 622:/usr/include/c++/4.9/bits/stl_vector.h **** 
 623:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 624:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 625:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 626:/usr/include/c++/4.9/bits/stl_vector.h ****        *  ordinary element order.
 627:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 628:/usr/include/c++/4.9/bits/stl_vector.h ****       const_iterator
 629:/usr/include/c++/4.9/bits/stl_vector.h ****       cend() const noexcept
 630:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 631:/usr/include/c++/4.9/bits/stl_vector.h **** 
 632:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 633:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 634:/usr/include/c++/4.9/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 635:/usr/include/c++/4.9/bits/stl_vector.h ****        *  reverse element order.
 636:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 637:/usr/include/c++/4.9/bits/stl_vector.h ****       const_reverse_iterator
 638:/usr/include/c++/4.9/bits/stl_vector.h ****       crbegin() const noexcept
 639:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 640:/usr/include/c++/4.9/bits/stl_vector.h **** 
 641:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 642:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 643:/usr/include/c++/4.9/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 644:/usr/include/c++/4.9/bits/stl_vector.h ****        *  is done in reverse element order.
 645:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 646:/usr/include/c++/4.9/bits/stl_vector.h ****       const_reverse_iterator
 647:/usr/include/c++/4.9/bits/stl_vector.h ****       crend() const noexcept
 648:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 649:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 650:/usr/include/c++/4.9/bits/stl_vector.h **** 
 651:/usr/include/c++/4.9/bits/stl_vector.h ****       // [23.2.4.2] capacity
 652:/usr/include/c++/4.9/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 653:/usr/include/c++/4.9/bits/stl_vector.h ****       size_type
 654:/usr/include/c++/4.9/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 655:/usr/include/c++/4.9/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 656:/usr/include/c++/4.9/bits/stl_vector.h **** 
 657:/usr/include/c++/4.9/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 658:/usr/include/c++/4.9/bits/stl_vector.h ****       size_type
 659:/usr/include/c++/4.9/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 660:/usr/include/c++/4.9/bits/stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 661:/usr/include/c++/4.9/bits/stl_vector.h **** 
 662:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 663:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 664:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 665:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 666:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 667:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 668:/usr/include/c++/4.9/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 669:/usr/include/c++/4.9/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 670:/usr/include/c++/4.9/bits/stl_vector.h ****        *  default constructed elements are appended.
 671:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 672:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 673:/usr/include/c++/4.9/bits/stl_vector.h ****       resize(size_type __new_size)
 674:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 675:/usr/include/c++/4.9/bits/stl_vector.h **** 	if (__new_size > size())
 676:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 677:/usr/include/c++/4.9/bits/stl_vector.h **** 	else if (__new_size < size())
 678:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 679:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 680:/usr/include/c++/4.9/bits/stl_vector.h **** 
 681:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 682:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 683:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 684:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 685:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 686:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 687:/usr/include/c++/4.9/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 688:/usr/include/c++/4.9/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 689:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 690:/usr/include/c++/4.9/bits/stl_vector.h ****        *  given data.
 691:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 692:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 693:/usr/include/c++/4.9/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 694:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 695:/usr/include/c++/4.9/bits/stl_vector.h **** 	if (__new_size > size())
 696:/usr/include/c++/4.9/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 697:/usr/include/c++/4.9/bits/stl_vector.h **** 	else if (__new_size < size())
 698:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 699:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 700:/usr/include/c++/4.9/bits/stl_vector.h **** #else
 701:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 702:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 703:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 704:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 705:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 706:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 707:/usr/include/c++/4.9/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 708:/usr/include/c++/4.9/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 709:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 710:/usr/include/c++/4.9/bits/stl_vector.h ****        *  given data.
 711:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 712:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 713:/usr/include/c++/4.9/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 714:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 715:/usr/include/c++/4.9/bits/stl_vector.h **** 	if (__new_size > size())
 716:/usr/include/c++/4.9/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 717:/usr/include/c++/4.9/bits/stl_vector.h **** 	else if (__new_size < size())
 718:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 719:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 720:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 721:/usr/include/c++/4.9/bits/stl_vector.h **** 
 722:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 723:/usr/include/c++/4.9/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 724:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 725:/usr/include/c++/4.9/bits/stl_vector.h ****       shrink_to_fit()
 726:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 727:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 728:/usr/include/c++/4.9/bits/stl_vector.h **** 
 729:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 730:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 731:/usr/include/c++/4.9/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 732:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 733:/usr/include/c++/4.9/bits/stl_vector.h ****       size_type
 734:/usr/include/c++/4.9/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 735:/usr/include/c++/4.9/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 736:/usr/include/c++/4.9/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
 737:/usr/include/c++/4.9/bits/stl_vector.h **** 
 738:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 739:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
 740:/usr/include/c++/4.9/bits/stl_vector.h ****        *  equal end().)
 741:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 742:/usr/include/c++/4.9/bits/stl_vector.h ****       bool
 743:/usr/include/c++/4.9/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
 744:/usr/include/c++/4.9/bits/stl_vector.h ****       { return begin() == end(); }
 745:/usr/include/c++/4.9/bits/stl_vector.h **** 
 746:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 747:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 748:/usr/include/c++/4.9/bits/stl_vector.h ****        *          elements.
 749:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
 750:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
 751:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 752:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
 753:/usr/include/c++/4.9/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
 754:/usr/include/c++/4.9/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
 755:/usr/include/c++/4.9/bits/stl_vector.h ****        *  thrown.
 756:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 757:/usr/include/c++/4.9/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
 758:/usr/include/c++/4.9/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
 759:/usr/include/c++/4.9/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
 760:/usr/include/c++/4.9/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
 761:/usr/include/c++/4.9/bits/stl_vector.h ****        *  and copying of %vector data.
 762:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 763:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 764:/usr/include/c++/4.9/bits/stl_vector.h ****       reserve(size_type __n);
 765:/usr/include/c++/4.9/bits/stl_vector.h **** 
 766:/usr/include/c++/4.9/bits/stl_vector.h ****       // element access
 767:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 768:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 769:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 770:/usr/include/c++/4.9/bits/stl_vector.h ****        *  accessed.
 771:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 772:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 773:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 774:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 775:/usr/include/c++/4.9/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 776:/usr/include/c++/4.9/bits/stl_vector.h ****        *  see at().)
 777:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 778:/usr/include/c++/4.9/bits/stl_vector.h ****       reference
 779:/usr/include/c++/4.9/bits/stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
 780:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 781:/usr/include/c++/4.9/bits/stl_vector.h **** 
 782:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 783:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 784:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 785:/usr/include/c++/4.9/bits/stl_vector.h ****        *  accessed.
 786:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 787:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 788:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 789:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 790:/usr/include/c++/4.9/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 791:/usr/include/c++/4.9/bits/stl_vector.h ****        *  see at().)
 792:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 793:/usr/include/c++/4.9/bits/stl_vector.h ****       const_reference
 794:/usr/include/c++/4.9/bits/stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 795:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 796:/usr/include/c++/4.9/bits/stl_vector.h **** 
 797:/usr/include/c++/4.9/bits/stl_vector.h ****     protected:
 798:/usr/include/c++/4.9/bits/stl_vector.h ****       /// Safety check used only from at().
 799:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 800:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_range_check(size_type __n) const
 801:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 802:/usr/include/c++/4.9/bits/stl_vector.h **** 	if (__n >= this->size())
 803:/usr/include/c++/4.9/bits/stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 804:/usr/include/c++/4.9/bits/stl_vector.h **** 				       "(which is %zu) >= this->size() "
 805:/usr/include/c++/4.9/bits/stl_vector.h **** 				       "(which is %zu)"),
 806:/usr/include/c++/4.9/bits/stl_vector.h **** 				   __n, this->size());
 807:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 808:/usr/include/c++/4.9/bits/stl_vector.h **** 
 809:/usr/include/c++/4.9/bits/stl_vector.h ****     public:
 810:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 811:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 812:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 813:/usr/include/c++/4.9/bits/stl_vector.h ****        *  accessed.
 814:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 815:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 816:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 817:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 818:/usr/include/c++/4.9/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 819:/usr/include/c++/4.9/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 820:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 821:/usr/include/c++/4.9/bits/stl_vector.h ****       reference
 822:/usr/include/c++/4.9/bits/stl_vector.h ****       at(size_type __n)
 823:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 824:/usr/include/c++/4.9/bits/stl_vector.h **** 	_M_range_check(__n);
 825:/usr/include/c++/4.9/bits/stl_vector.h **** 	return (*this)[__n]; 
 826:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 827:/usr/include/c++/4.9/bits/stl_vector.h **** 
 828:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 829:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 830:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 831:/usr/include/c++/4.9/bits/stl_vector.h ****        *  accessed.
 832:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 833:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 834:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 835:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 836:/usr/include/c++/4.9/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 837:/usr/include/c++/4.9/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 838:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 839:/usr/include/c++/4.9/bits/stl_vector.h ****       const_reference
 840:/usr/include/c++/4.9/bits/stl_vector.h ****       at(size_type __n) const
 841:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 842:/usr/include/c++/4.9/bits/stl_vector.h **** 	_M_range_check(__n);
 843:/usr/include/c++/4.9/bits/stl_vector.h **** 	return (*this)[__n];
 844:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 845:/usr/include/c++/4.9/bits/stl_vector.h **** 
 846:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 847:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
 848:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element of the %vector.
 849:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 850:/usr/include/c++/4.9/bits/stl_vector.h ****       reference
 851:/usr/include/c++/4.9/bits/stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
 852:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *begin(); }
 853:/usr/include/c++/4.9/bits/stl_vector.h **** 
 854:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 855:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
 856:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element of the %vector.
 857:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 858:/usr/include/c++/4.9/bits/stl_vector.h ****       const_reference
 859:/usr/include/c++/4.9/bits/stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
 860:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *begin(); }
 861:/usr/include/c++/4.9/bits/stl_vector.h **** 
 862:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 863:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
 864:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element of the %vector.
 865:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 866:/usr/include/c++/4.9/bits/stl_vector.h ****       reference
 867:/usr/include/c++/4.9/bits/stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
 868:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *(end() - 1); }
 869:/usr/include/c++/4.9/bits/stl_vector.h ****       
 870:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 871:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
 872:/usr/include/c++/4.9/bits/stl_vector.h ****        *  last element of the %vector.
 873:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 874:/usr/include/c++/4.9/bits/stl_vector.h ****       const_reference
 875:/usr/include/c++/4.9/bits/stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
 876:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *(end() - 1); }
 877:/usr/include/c++/4.9/bits/stl_vector.h **** 
 878:/usr/include/c++/4.9/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 879:/usr/include/c++/4.9/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
 880:/usr/include/c++/4.9/bits/stl_vector.h ****       // data access
 881:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 882:/usr/include/c++/4.9/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
 883:/usr/include/c++/4.9/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
 884:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 885:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 886:/usr/include/c++/4.9/bits/stl_vector.h ****       _Tp*
 887:/usr/include/c++/4.9/bits/stl_vector.h **** #else
 888:/usr/include/c++/4.9/bits/stl_vector.h ****       pointer
 889:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 890:/usr/include/c++/4.9/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
 891:/usr/include/c++/4.9/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
 892:/usr/include/c++/4.9/bits/stl_vector.h **** 
 893:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 894:/usr/include/c++/4.9/bits/stl_vector.h ****       const _Tp*
 895:/usr/include/c++/4.9/bits/stl_vector.h **** #else
 896:/usr/include/c++/4.9/bits/stl_vector.h ****       const_pointer
 897:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 898:/usr/include/c++/4.9/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
 899:/usr/include/c++/4.9/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
 900:/usr/include/c++/4.9/bits/stl_vector.h **** 
 901:/usr/include/c++/4.9/bits/stl_vector.h ****       // [23.2.4.3] modifiers
 902:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 903:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
 904:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  Data to be added.
 905:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 906:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
 907:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
 908:/usr/include/c++/4.9/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
 909:/usr/include/c++/4.9/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
 910:/usr/include/c++/4.9/bits/stl_vector.h ****        *  available.
 911:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 912:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 913:/usr/include/c++/4.9/bits/stl_vector.h ****       push_back(const value_type& __x)
 635              		.loc 5 913 0
 636              		.cfi_startproc
 637 0000 55       		pushq	%rbp
 638              		.cfi_def_cfa_offset 16
 639              		.cfi_offset 6, -16
 640 0001 4889E5   		movq	%rsp, %rbp
 641              		.cfi_def_cfa_register 6
 642 0004 4883EC10 		subq	$16, %rsp
 643 0008 48897DF8 		movq	%rdi, -8(%rbp)
 644 000c 488975F0 		movq	%rsi, -16(%rbp)
 914:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 915:/usr/include/c++/4.9/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 645              		.loc 5 915 0
 646 0010 488B45F8 		movq	-8(%rbp), %rax
 647 0014 488B5008 		movq	8(%rax), %rdx
 648 0018 488B45F8 		movq	-8(%rbp), %rax
 649 001c 488B4010 		movq	16(%rax), %rax
 650 0020 4839C2   		cmpq	%rax, %rdx
 651 0023 7431     		je	.L38
 916:/usr/include/c++/4.9/bits/stl_vector.h **** 	  {
 917:/usr/include/c++/4.9/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 918:/usr/include/c++/4.9/bits/stl_vector.h **** 	                             __x);
 652              		.loc 5 918 0
 653 0025 488B45F8 		movq	-8(%rbp), %rax
 654 0029 488B4808 		movq	8(%rax), %rcx
 655 002d 488B45F8 		movq	-8(%rbp), %rax
 917:/usr/include/c++/4.9/bits/stl_vector.h **** 	                             __x);
 656              		.loc 5 917 0
 657 0031 488B55F0 		movq	-16(%rbp), %rdx
 658 0035 4889CE   		movq	%rcx, %rsi
 659 0038 4889C7   		movq	%rax, %rdi
 660 003b E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RK
 660      00
 919:/usr/include/c++/4.9/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
 661              		.loc 5 919 0
 662 0040 488B45F8 		movq	-8(%rbp), %rax
 663 0044 488B4008 		movq	8(%rax), %rax
 664 0048 488D5038 		leaq	56(%rax), %rdx
 665 004c 488B45F8 		movq	-8(%rbp), %rax
 666 0050 48895008 		movq	%rdx, 8(%rax)
 667 0054 EB22     		jmp	.L37
 668              	.L38:
 920:/usr/include/c++/4.9/bits/stl_vector.h **** 	  }
 921:/usr/include/c++/4.9/bits/stl_vector.h **** 	else
 922:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 923:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_emplace_back_aux(__x);
 924:/usr/include/c++/4.9/bits/stl_vector.h **** #else
 925:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_insert_aux(end(), __x);
 669              		.loc 5 925 0
 670 0056 488B45F8 		movq	-8(%rbp), %rax
 671 005a 4889C7   		movq	%rax, %rdi
 672 005d E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv@PLT
 672      00
 673 0062 4889C1   		movq	%rax, %rcx
 674 0065 488B55F0 		movq	-16(%rbp), %rdx
 675 0069 488B45F8 		movq	-8(%rbp), %rax
 676 006d 4889CE   		movq	%rcx, %rsi
 677 0070 4889C7   		movq	%rax, %rdi
 678 0073 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_ite
 678      00
 679              	.L37:
 926:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 927:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 680              		.loc 5 927 0
 681 0078 C9       		leave
 682              		.cfi_def_cfa 7, 8
 683 0079 C3       		ret
 684              		.cfi_endproc
 685              	.LFE890:
 687              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv,"axG",@progbits,_ZNSt6v
 688              		.align 2
 689              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv
 691              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv:
 692              	.LFB891:
 867:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *(end() - 1); }
 693              		.loc 5 867 0
 694              		.cfi_startproc
 695 0000 55       		pushq	%rbp
 696              		.cfi_def_cfa_offset 16
 697              		.cfi_offset 6, -16
 698 0001 4889E5   		movq	%rsp, %rbp
 699              		.cfi_def_cfa_register 6
 700 0004 4883EC30 		subq	$48, %rsp
 701 0008 48897DD8 		movq	%rdi, -40(%rbp)
 867:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *(end() - 1); }
 702              		.loc 5 867 0
 703 000c 64488B04 		movq	%fs:40, %rax
 703      25280000 
 703      00
 704 0015 488945F8 		movq	%rax, -8(%rbp)
 705 0019 31C0     		xorl	%eax, %eax
 868:/usr/include/c++/4.9/bits/stl_vector.h ****       
 706              		.loc 5 868 0
 707 001b 488B45D8 		movq	-40(%rbp), %rax
 708 001f 4889C7   		movq	%rax, %rdi
 709 0022 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv@PLT
 709      00
 710 0027 488945E0 		movq	%rax, -32(%rbp)
 711 002b 488D45E0 		leaq	-32(%rbp), %rax
 712 002f BE010000 		movl	$1, %esi
 712      00
 713 0034 4889C7   		movq	%rax, %rdi
 714 0037 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl@
 714      00
 715 003c 488945F0 		movq	%rax, -16(%rbp)
 716 0040 488D45F0 		leaq	-16(%rbp), %rax
 717 0044 4889C7   		movq	%rax, %rdi
 718 0047 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv@
 718      00
 719 004c 488B55F8 		movq	-8(%rbp), %rdx
 720 0050 64483314 		xorq	%fs:40, %rdx
 720      25280000 
 720      00
 721 0059 7405     		je	.L42
 722 005b E8000000 		call	__stack_chk_fail@PLT
 722      00
 723              	.L42:
 724 0060 C9       		leave
 725              		.cfi_def_cfa 7, 8
 726 0061 C3       		ret
 727              		.cfi_endproc
 728              	.LFE891:
 730              		.section	.text._ZNSt4pairIiSsEC2ERKiRKSs,"axG",@progbits,_ZNSt4pairIiSsEC5ERKiRKSs,comdat
 731              		.align 2
 732              		.weak	_ZNSt4pairIiSsEC2ERKiRKSs
 734              	_ZNSt4pairIiSsEC2ERKiRKSs:
 735              	.LFB899:
  97:/usr/include/c++/4.9/bits/stl_pair.h ****     {
  98:/usr/include/c++/4.9/bits/stl_pair.h ****       typedef _T1 first_type;    /// @c first_type is the first bound type
  99:/usr/include/c++/4.9/bits/stl_pair.h ****       typedef _T2 second_type;   /// @c second_type is the second bound type
 100:/usr/include/c++/4.9/bits/stl_pair.h **** 
 101:/usr/include/c++/4.9/bits/stl_pair.h ****       _T1 first;                 /// @c first is a copy of the first object
 102:/usr/include/c++/4.9/bits/stl_pair.h ****       _T2 second;                /// @c second is a copy of the second object
 103:/usr/include/c++/4.9/bits/stl_pair.h **** 
 104:/usr/include/c++/4.9/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 105:/usr/include/c++/4.9/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 106:/usr/include/c++/4.9/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 107:/usr/include/c++/4.9/bits/stl_pair.h ****        *  respective default constructors.  */
 108:/usr/include/c++/4.9/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 109:/usr/include/c++/4.9/bits/stl_pair.h ****       : first(), second() { }
 110:/usr/include/c++/4.9/bits/stl_pair.h **** 
 111:/usr/include/c++/4.9/bits/stl_pair.h ****       /** Two objects may be passed to a @c pair constructor to be copied.  */
 112:/usr/include/c++/4.9/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair(const _T1& __a, const _T2& __b)
 736              		.loc 4 112 0
 737              		.cfi_startproc
 738 0000 55       		pushq	%rbp
 739              		.cfi_def_cfa_offset 16
 740              		.cfi_offset 6, -16
 741 0001 4889E5   		movq	%rsp, %rbp
 742              		.cfi_def_cfa_register 6
 743 0004 4883EC20 		subq	$32, %rsp
 744 0008 48897DF8 		movq	%rdi, -8(%rbp)
 745 000c 488975F0 		movq	%rsi, -16(%rbp)
 746 0010 488955E8 		movq	%rdx, -24(%rbp)
 747              	.LBB8:
 113:/usr/include/c++/4.9/bits/stl_pair.h ****       : first(__a), second(__b) { }
 748              		.loc 4 113 0
 749 0014 488B45F0 		movq	-16(%rbp), %rax
 750 0018 8B10     		movl	(%rax), %edx
 751 001a 488B45F8 		movq	-8(%rbp), %rax
 752 001e 8910     		movl	%edx, (%rax)
 753 0020 488B45F8 		movq	-8(%rbp), %rax
 754 0024 488D5008 		leaq	8(%rax), %rdx
 755 0028 488B45E8 		movq	-24(%rbp), %rax
 756 002c 4889C6   		movq	%rax, %rsi
 757 002f 4889D7   		movq	%rdx, %rdi
 758 0032 E8000000 		call	_ZNSsC1ERKSs@PLT
 758      00
 759              	.LBE8:
 760 0037 C9       		leave
 761              		.cfi_def_cfa 7, 8
 762 0038 C3       		ret
 763              		.cfi_endproc
 764              	.LFE899:
 766              		.weak	_ZNSt4pairIiSsEC1ERKiRKSs
 767              		.set	_ZNSt4pairIiSsEC1ERKiRKSs,_ZNSt4pairIiSsEC2ERKiRKSs
 768              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EE9push_backERKS1_,"axG",@progbits,_ZNSt6vectorISt4p
 769              		.align 2
 770              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EE9push_backERKS1_
 772              	_ZNSt6vectorISt4pairIiSsESaIS1_EE9push_backERKS1_:
 773              	.LFB901:
 913:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 774              		.loc 5 913 0
 775              		.cfi_startproc
 776 0000 55       		pushq	%rbp
 777              		.cfi_def_cfa_offset 16
 778              		.cfi_offset 6, -16
 779 0001 4889E5   		movq	%rsp, %rbp
 780              		.cfi_def_cfa_register 6
 781 0004 4883EC10 		subq	$16, %rsp
 782 0008 48897DF8 		movq	%rdi, -8(%rbp)
 783 000c 488975F0 		movq	%rsi, -16(%rbp)
 915:/usr/include/c++/4.9/bits/stl_vector.h **** 	  {
 784              		.loc 5 915 0
 785 0010 488B45F8 		movq	-8(%rbp), %rax
 786 0014 488B5008 		movq	8(%rax), %rdx
 787 0018 488B45F8 		movq	-8(%rbp), %rax
 788 001c 488B4010 		movq	16(%rax), %rax
 789 0020 4839C2   		cmpq	%rax, %rdx
 790 0023 7431     		je	.L45
 918:/usr/include/c++/4.9/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
 791              		.loc 5 918 0
 792 0025 488B45F8 		movq	-8(%rbp), %rax
 793 0029 488B4808 		movq	8(%rax), %rcx
 794 002d 488B45F8 		movq	-8(%rbp), %rax
 917:/usr/include/c++/4.9/bits/stl_vector.h **** 	                             __x);
 795              		.loc 5 917 0
 796 0031 488B55F0 		movq	-16(%rbp), %rdx
 797 0035 4889CE   		movq	%rcx, %rsi
 798 0038 4889C7   		movq	%rax, %rdi
 799 003b E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_@PLT
 799      00
 919:/usr/include/c++/4.9/bits/stl_vector.h **** 	  }
 800              		.loc 5 919 0
 801 0040 488B45F8 		movq	-8(%rbp), %rax
 802 0044 488B4008 		movq	8(%rax), %rax
 803 0048 488D5010 		leaq	16(%rax), %rdx
 804 004c 488B45F8 		movq	-8(%rbp), %rax
 805 0050 48895008 		movq	%rdx, 8(%rax)
 806 0054 EB22     		jmp	.L44
 807              	.L45:
 925:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 808              		.loc 5 925 0
 809 0056 488B45F8 		movq	-8(%rbp), %rax
 810 005a 4889C7   		movq	%rax, %rdi
 811 005d E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EE3endEv@PLT
 811      00
 812 0062 4889C1   		movq	%rax, %rcx
 813 0065 488B55F0 		movq	-16(%rbp), %rdx
 814 0069 488B45F8 		movq	-8(%rbp), %rax
 815 006d 4889CE   		movq	%rcx, %rsi
 816 0070 4889C7   		movq	%rax, %rdi
 817 0073 E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1
 817      00
 818              	.L44:
 819              		.loc 5 927 0
 820 0078 C9       		leave
 821              		.cfi_def_cfa 7, 8
 822 0079 C3       		ret
 823              		.cfi_endproc
 824              	.LFE901:
 826              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_
 827              		.align 2
 828              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev
 830              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev:
 831              	.LFB910:
  79:/usr/include/c++/4.9/bits/stl_vector.h ****       : public _Tp_alloc_type
 832              		.loc 5 79 0
 833              		.cfi_startproc
 834 0000 55       		pushq	%rbp
 835              		.cfi_def_cfa_offset 16
 836              		.cfi_offset 6, -16
 837 0001 4889E5   		movq	%rsp, %rbp
 838              		.cfi_def_cfa_register 6
 839 0004 4883EC10 		subq	$16, %rsp
 840 0008 48897DF8 		movq	%rdi, -8(%rbp)
 841              	.LBB9:
  79:/usr/include/c++/4.9/bits/stl_vector.h ****       : public _Tp_alloc_type
 842              		.loc 5 79 0
 843 000c 488B45F8 		movq	-8(%rbp), %rax
 844 0010 4889C7   		movq	%rax, %rdi
 845 0013 E8000000 		call	_ZNSaISt4pairIiSsEED2Ev@PLT
 845      00
 846              	.LBE9:
 847 0018 C9       		leave
 848              		.cfi_def_cfa 7, 8
 849 0019 C3       		ret
 850              		.cfi_endproc
 851              	.LFE910:
 853              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev
 854              		.set	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev,_ZNSt12_Vector_baseISt4pairIiSsESa
 855              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseISt
 856              		.align 2
 857              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev
 859              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev:
 860              	.LFB912:
 159:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 861              		.loc 5 159 0
 862              		.cfi_startproc
 863              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 864              		.cfi_lsda 0x1b,.LLSDA912
 865 0000 55       		pushq	%rbp
 866              		.cfi_def_cfa_offset 16
 867              		.cfi_offset 6, -16
 868 0001 4889E5   		movq	%rsp, %rbp
 869              		.cfi_def_cfa_register 6
 870 0004 53       		pushq	%rbx
 871 0005 4883EC18 		subq	$24, %rsp
 872              		.cfi_offset 3, -24
 873 0009 48897DE8 		movq	%rdi, -24(%rbp)
 874              	.LBB10:
 161:/usr/include/c++/4.9/bits/stl_vector.h **** 
 875              		.loc 5 161 0
 876 000d 488B45E8 		movq	-24(%rbp), %rax
 877 0011 488B4010 		movq	16(%rax), %rax
 878 0015 4889C2   		movq	%rax, %rdx
 879 0018 488B45E8 		movq	-24(%rbp), %rax
 880 001c 488B00   		movq	(%rax), %rax
 881 001f 4829C2   		subq	%rax, %rdx
 882 0022 4889D0   		movq	%rdx, %rax
 883 0025 48C1F804 		sarq	$4, %rax
 884 0029 4889C2   		movq	%rax, %rdx
 885 002c 488B45E8 		movq	-24(%rbp), %rax
 886 0030 488B08   		movq	(%rax), %rcx
 160:/usr/include/c++/4.9/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 887              		.loc 5 160 0
 888 0033 488B45E8 		movq	-24(%rbp), %rax
 889 0037 4889CE   		movq	%rcx, %rsi
 890 003a 4889C7   		movq	%rax, %rdi
 891              	.LEHB20:
 892 003d E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m@PLT
 892      00
 893              	.LEHE20:
 161:/usr/include/c++/4.9/bits/stl_vector.h **** 
 894              		.loc 5 161 0
 895 0042 488B45E8 		movq	-24(%rbp), %rax
 896 0046 4889C7   		movq	%rax, %rdi
 897 0049 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev@PLT
 897      00
 898 004e EB1A     		jmp	.L53
 899              	.L52:
 900 0050 4889C3   		movq	%rax, %rbx
 901 0053 488B45E8 		movq	-24(%rbp), %rax
 902 0057 4889C7   		movq	%rax, %rdi
 903 005a E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev@PLT
 903      00
 904 005f 4889D8   		movq	%rbx, %rax
 905 0062 4889C7   		movq	%rax, %rdi
 906              	.LEHB21:
 907 0065 E8000000 		call	_Unwind_Resume@PLT
 907      00
 908              	.LEHE21:
 909              	.L53:
 910              	.LBE10:
 911 006a 4883C418 		addq	$24, %rsp
 912 006e 5B       		popq	%rbx
 913 006f 5D       		popq	%rbp
 914              		.cfi_def_cfa 7, 8
 915 0070 C3       		ret
 916              		.cfi_endproc
 917              	.LFE912:
 918              		.section	.gcc_except_table
 919              	.LLSDA912:
 920 0053 FF       		.byte	0xff
 921 0054 FF       		.byte	0xff
 922 0055 01       		.byte	0x1
 923 0056 08       		.uleb128 .LLSDACSE912-.LLSDACSB912
 924              	.LLSDACSB912:
 925 0057 3D       		.uleb128 .LEHB20-.LFB912
 926 0058 05       		.uleb128 .LEHE20-.LEHB20
 927 0059 50       		.uleb128 .L52-.LFB912
 928 005a 00       		.uleb128 0
 929 005b 65       		.uleb128 .LEHB21-.LFB912
 930 005c 05       		.uleb128 .LEHE21-.LEHB21
 931 005d 00       		.uleb128 0
 932 005e 00       		.uleb128 0
 933              	.LLSDACSE912:
 934              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseISt
 936              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED1Ev
 937              		.set	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED1Ev,_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev
 938              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZN
 939              		.align 2
 940              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv
 942              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv:
 943              	.LFB914:
 113:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 944              		.loc 5 113 0
 945              		.cfi_startproc
 946 0000 55       		pushq	%rbp
 947              		.cfi_def_cfa_offset 16
 948              		.cfi_offset 6, -16
 949 0001 4889E5   		movq	%rsp, %rbp
 950              		.cfi_def_cfa_register 6
 951 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/4.9/bits/stl_vector.h **** 
 952              		.loc 5 114 0
 953 0008 488B45F8 		movq	-8(%rbp), %rax
 954 000c 5D       		popq	%rbp
 955              		.cfi_def_cfa 7, 8
 956 000d C3       		ret
 957              		.cfi_endproc
 958              	.LFE914:
 960              		.section	.text._ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPSt4pai
 961              		.weak	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E
 963              	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E:
 964              	.LFB915:
 965              		.file 6 "/usr/include/c++/4.9/bits/stl_construct.h"
   1:/usr/include/c++/4.9/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/4.9/bits/stl_construct.h **** 
   3:/usr/include/c++/4.9/bits/stl_construct.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/stl_construct.h **** //
   5:/usr/include/c++/4.9/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/4.9/bits/stl_construct.h **** 
  11:/usr/include/c++/4.9/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/stl_construct.h **** 
  16:/usr/include/c++/4.9/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/stl_construct.h **** 
  20:/usr/include/c++/4.9/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/stl_construct.h **** 
  25:/usr/include/c++/4.9/bits/stl_construct.h **** /*
  26:/usr/include/c++/4.9/bits/stl_construct.h ****  *
  27:/usr/include/c++/4.9/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.9/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.9/bits/stl_construct.h ****  *
  30:/usr/include/c++/4.9/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.9/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.9/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.9/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.9/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.9/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.9/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.9/bits/stl_construct.h ****  *
  38:/usr/include/c++/4.9/bits/stl_construct.h ****  *
  39:/usr/include/c++/4.9/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/4.9/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.9/bits/stl_construct.h ****  *
  42:/usr/include/c++/4.9/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.9/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.9/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.9/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.9/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.9/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.9/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.9/bits/stl_construct.h ****  */
  50:/usr/include/c++/4.9/bits/stl_construct.h **** 
  51:/usr/include/c++/4.9/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/4.9/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.9/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/4.9/bits/stl_construct.h ****  */
  55:/usr/include/c++/4.9/bits/stl_construct.h **** 
  56:/usr/include/c++/4.9/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/4.9/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/4.9/bits/stl_construct.h **** 
  59:/usr/include/c++/4.9/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/4.9/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/4.9/bits/stl_construct.h **** #include <ext/alloc_traits.h>
  62:/usr/include/c++/4.9/bits/stl_construct.h **** 
  63:/usr/include/c++/4.9/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/c++/4.9/bits/stl_construct.h **** {
  65:/usr/include/c++/4.9/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/c++/4.9/bits/stl_construct.h **** 
  67:/usr/include/c++/4.9/bits/stl_construct.h ****   /**
  68:/usr/include/c++/4.9/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:/usr/include/c++/4.9/bits/stl_construct.h ****    * object's constructor with an initializer.
  70:/usr/include/c++/4.9/bits/stl_construct.h ****    */
  71:/usr/include/c++/4.9/bits/stl_construct.h **** #if __cplusplus >= 201103L
  72:/usr/include/c++/4.9/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  73:/usr/include/c++/4.9/bits/stl_construct.h ****     inline void
  74:/usr/include/c++/4.9/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:/usr/include/c++/4.9/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  76:/usr/include/c++/4.9/bits/stl_construct.h **** #else
  77:/usr/include/c++/4.9/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  78:/usr/include/c++/4.9/bits/stl_construct.h ****     inline void
  79:/usr/include/c++/4.9/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  80:/usr/include/c++/4.9/bits/stl_construct.h ****     {
  81:/usr/include/c++/4.9/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:/usr/include/c++/4.9/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:/usr/include/c++/4.9/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:/usr/include/c++/4.9/bits/stl_construct.h ****     }
  85:/usr/include/c++/4.9/bits/stl_construct.h **** #endif
  86:/usr/include/c++/4.9/bits/stl_construct.h **** 
  87:/usr/include/c++/4.9/bits/stl_construct.h ****   /**
  88:/usr/include/c++/4.9/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  89:/usr/include/c++/4.9/bits/stl_construct.h ****    */
  90:/usr/include/c++/4.9/bits/stl_construct.h ****   template<typename _Tp>
  91:/usr/include/c++/4.9/bits/stl_construct.h ****     inline void
  92:/usr/include/c++/4.9/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  93:/usr/include/c++/4.9/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  94:/usr/include/c++/4.9/bits/stl_construct.h **** 
  95:/usr/include/c++/4.9/bits/stl_construct.h ****   template<bool>
  96:/usr/include/c++/4.9/bits/stl_construct.h ****     struct _Destroy_aux
  97:/usr/include/c++/4.9/bits/stl_construct.h ****     {
  98:/usr/include/c++/4.9/bits/stl_construct.h ****       template<typename _ForwardIterator>
  99:/usr/include/c++/4.9/bits/stl_construct.h ****         static void
 100:/usr/include/c++/4.9/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 101:/usr/include/c++/4.9/bits/stl_construct.h **** 	{
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 103:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 104:/usr/include/c++/4.9/bits/stl_construct.h **** 	}
 105:/usr/include/c++/4.9/bits/stl_construct.h ****     };
 106:/usr/include/c++/4.9/bits/stl_construct.h **** 
 107:/usr/include/c++/4.9/bits/stl_construct.h ****   template<>
 108:/usr/include/c++/4.9/bits/stl_construct.h ****     struct _Destroy_aux<true>
 109:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 110:/usr/include/c++/4.9/bits/stl_construct.h ****       template<typename _ForwardIterator>
 111:/usr/include/c++/4.9/bits/stl_construct.h ****         static void
 112:/usr/include/c++/4.9/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 113:/usr/include/c++/4.9/bits/stl_construct.h ****     };
 114:/usr/include/c++/4.9/bits/stl_construct.h **** 
 115:/usr/include/c++/4.9/bits/stl_construct.h ****   /**
 116:/usr/include/c++/4.9/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 117:/usr/include/c++/4.9/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 118:/usr/include/c++/4.9/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 119:/usr/include/c++/4.9/bits/stl_construct.h ****    */
 120:/usr/include/c++/4.9/bits/stl_construct.h ****   template<typename _ForwardIterator>
 121:/usr/include/c++/4.9/bits/stl_construct.h ****     inline void
 122:/usr/include/c++/4.9/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 123:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 124:/usr/include/c++/4.9/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 125:/usr/include/c++/4.9/bits/stl_construct.h ****                        _Value_type;
 126:/usr/include/c++/4.9/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 127:/usr/include/c++/4.9/bits/stl_construct.h **** 	__destroy(__first, __last);
 128:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 129:/usr/include/c++/4.9/bits/stl_construct.h **** 
 130:/usr/include/c++/4.9/bits/stl_construct.h ****   /**
 131:/usr/include/c++/4.9/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 132:/usr/include/c++/4.9/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 133:/usr/include/c++/4.9/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 134:/usr/include/c++/4.9/bits/stl_construct.h ****    */
 135:/usr/include/c++/4.9/bits/stl_construct.h **** 
 136:/usr/include/c++/4.9/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 137:/usr/include/c++/4.9/bits/stl_construct.h ****     void
 138:/usr/include/c++/4.9/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 139:/usr/include/c++/4.9/bits/stl_construct.h **** 	     _Allocator& __alloc)
 140:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 141:/usr/include/c++/4.9/bits/stl_construct.h ****       typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 142:/usr/include/c++/4.9/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 143:/usr/include/c++/4.9/bits/stl_construct.h **** 	__traits::destroy(__alloc, std::__addressof(*__first));
 144:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 145:/usr/include/c++/4.9/bits/stl_construct.h **** 
 146:/usr/include/c++/4.9/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 147:/usr/include/c++/4.9/bits/stl_construct.h ****     inline void
 148:/usr/include/c++/4.9/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 966              		.loc 6 148 0
 967              		.cfi_startproc
 968 0000 55       		pushq	%rbp
 969              		.cfi_def_cfa_offset 16
 970              		.cfi_offset 6, -16
 971 0001 4889E5   		movq	%rsp, %rbp
 972              		.cfi_def_cfa_register 6
 973 0004 4883EC20 		subq	$32, %rsp
 974 0008 48897DF8 		movq	%rdi, -8(%rbp)
 975 000c 488975F0 		movq	%rsi, -16(%rbp)
 976 0010 488955E8 		movq	%rdx, -24(%rbp)
 149:/usr/include/c++/4.9/bits/stl_construct.h **** 	     allocator<_Tp>&)
 150:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 151:/usr/include/c++/4.9/bits/stl_construct.h ****       _Destroy(__first, __last);
 977              		.loc 6 151 0
 978 0014 488B55F0 		movq	-16(%rbp), %rdx
 979 0018 488B45F8 		movq	-8(%rbp), %rax
 980 001c 4889D6   		movq	%rdx, %rsi
 981 001f 4889C7   		movq	%rax, %rdi
 982 0022 E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_@PLT
 982      00
 152:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 983              		.loc 6 152 0
 984 0027 C9       		leave
 985              		.cfi_def_cfa 7, 8
 986 0028 C3       		ret
 987              		.cfi_endproc
 988              	.LFE915:
 990              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEv
 991              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_R
 993              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RKT_:
 994              	.LFB916:
 995              		.file 7 "/usr/include/c++/4.9/ext/alloc_traits.h"
   1:/usr/include/c++/4.9/ext/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/4.9/ext/alloc_traits.h **** 
   3:/usr/include/c++/4.9/ext/alloc_traits.h **** // Copyright (C) 2011-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/ext/alloc_traits.h **** //
   5:/usr/include/c++/4.9/ext/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/ext/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/ext/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/ext/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/ext/alloc_traits.h **** // any later version.
  10:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  11:/usr/include/c++/4.9/ext/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/ext/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/ext/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/ext/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  16:/usr/include/c++/4.9/ext/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/ext/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/ext/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  20:/usr/include/c++/4.9/ext/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/ext/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/ext/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/ext/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  25:/usr/include/c++/4.9/ext/alloc_traits.h **** /** @file ext/alloc_traits.h
  26:/usr/include/c++/4.9/ext/alloc_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/4.9/ext/alloc_traits.h ****  */
  28:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  29:/usr/include/c++/4.9/ext/alloc_traits.h **** #ifndef _EXT_ALLOC_TRAITS_H
  30:/usr/include/c++/4.9/ext/alloc_traits.h **** #define _EXT_ALLOC_TRAITS_H 1
  31:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  32:/usr/include/c++/4.9/ext/alloc_traits.h **** #pragma GCC system_header
  33:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  34:/usr/include/c++/4.9/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  35:/usr/include/c++/4.9/ext/alloc_traits.h **** # include <bits/move.h>
  36:/usr/include/c++/4.9/ext/alloc_traits.h **** # include <bits/alloc_traits.h>
  37:/usr/include/c++/4.9/ext/alloc_traits.h **** #else
  38:/usr/include/c++/4.9/ext/alloc_traits.h **** # include <bits/allocator.h>  // for __alloc_swap
  39:/usr/include/c++/4.9/ext/alloc_traits.h **** #endif
  40:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  41:/usr/include/c++/4.9/ext/alloc_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/4.9/ext/alloc_traits.h **** {
  43:/usr/include/c++/4.9/ext/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  45:/usr/include/c++/4.9/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  46:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Alloc>
  47:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal : std::false_type { };
  48:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  49:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Tp>
  50:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<std::allocator<_Tp>>
  51:/usr/include/c++/4.9/ext/alloc_traits.h ****     : std::true_type { };
  52:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  53:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename, typename> struct array_allocator;
  54:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  55:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Tp, typename _Array>
  56:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<array_allocator<_Tp, _Array>>
  57:/usr/include/c++/4.9/ext/alloc_traits.h ****     : std::true_type { };
  58:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  59:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename> struct bitmap_allocator;
  60:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  61:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Tp>
  62:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<bitmap_allocator<_Tp>>
  63:/usr/include/c++/4.9/ext/alloc_traits.h ****     : std::true_type { };
  64:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  65:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename> struct malloc_allocator;
  66:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  67:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Tp>
  68:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<malloc_allocator<_Tp>>
  69:/usr/include/c++/4.9/ext/alloc_traits.h ****     : std::true_type { };
  70:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  71:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename> struct mt_allocator;
  72:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  73:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Tp>
  74:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<mt_allocator<_Tp>>
  75:/usr/include/c++/4.9/ext/alloc_traits.h ****     : std::true_type { };
  76:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  77:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename> struct new_allocator;
  78:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  79:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Tp>
  80:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<new_allocator<_Tp>>
  81:/usr/include/c++/4.9/ext/alloc_traits.h ****     : std::true_type { };
  82:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  83:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename> struct pool_allocator;
  84:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  85:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Tp>
  86:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<pool_allocator<_Tp>>
  87:/usr/include/c++/4.9/ext/alloc_traits.h ****     : std::true_type { };
  88:/usr/include/c++/4.9/ext/alloc_traits.h **** #endif
  89:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  90:/usr/include/c++/4.9/ext/alloc_traits.h **** /**
  91:/usr/include/c++/4.9/ext/alloc_traits.h ****  * @brief  Uniform interface to C++98 and C++0x allocators.
  92:/usr/include/c++/4.9/ext/alloc_traits.h ****  * @ingroup allocators
  93:/usr/include/c++/4.9/ext/alloc_traits.h **** */
  94:/usr/include/c++/4.9/ext/alloc_traits.h **** template<typename _Alloc>
  95:/usr/include/c++/4.9/ext/alloc_traits.h ****   struct __alloc_traits
  96:/usr/include/c++/4.9/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  97:/usr/include/c++/4.9/ext/alloc_traits.h ****   : std::allocator_traits<_Alloc>
  98:/usr/include/c++/4.9/ext/alloc_traits.h **** #endif
  99:/usr/include/c++/4.9/ext/alloc_traits.h ****   {
 100:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef _Alloc allocator_type;
 101:/usr/include/c++/4.9/ext/alloc_traits.h **** #if __cplusplus >= 201103L
 102:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef std::allocator_traits<_Alloc>           _Base_type;
 103:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Base_type::value_type         value_type;
 104:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Base_type::pointer            pointer;
 105:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Base_type::const_pointer      const_pointer;
 106:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Base_type::size_type          size_type;
 107:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Base_type::difference_type    difference_type;
 108:/usr/include/c++/4.9/ext/alloc_traits.h ****     // C++11 allocators do not define reference or const_reference
 109:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef value_type&                             reference;
 110:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef const value_type&                       const_reference;
 111:/usr/include/c++/4.9/ext/alloc_traits.h ****     using _Base_type::allocate;
 112:/usr/include/c++/4.9/ext/alloc_traits.h ****     using _Base_type::deallocate;
 113:/usr/include/c++/4.9/ext/alloc_traits.h ****     using _Base_type::construct;
 114:/usr/include/c++/4.9/ext/alloc_traits.h ****     using _Base_type::destroy;
 115:/usr/include/c++/4.9/ext/alloc_traits.h ****     using _Base_type::max_size;
 116:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 117:/usr/include/c++/4.9/ext/alloc_traits.h ****   private:
 118:/usr/include/c++/4.9/ext/alloc_traits.h ****     template<typename _Ptr>
 119:/usr/include/c++/4.9/ext/alloc_traits.h ****       using __is_custom_pointer
 120:/usr/include/c++/4.9/ext/alloc_traits.h **** 	= std::__and_<std::is_same<pointer, _Ptr>,
 121:/usr/include/c++/4.9/ext/alloc_traits.h **** 		      std::__not_<std::is_pointer<_Ptr>>>;
 122:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 123:/usr/include/c++/4.9/ext/alloc_traits.h ****   public:
 124:/usr/include/c++/4.9/ext/alloc_traits.h ****     // overload construct for non-standard pointer types
 125:/usr/include/c++/4.9/ext/alloc_traits.h ****     template<typename _Ptr, typename... _Args>
 126:/usr/include/c++/4.9/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
 127:/usr/include/c++/4.9/ext/alloc_traits.h ****       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
 128:/usr/include/c++/4.9/ext/alloc_traits.h ****       {
 129:/usr/include/c++/4.9/ext/alloc_traits.h **** 	_Base_type::construct(__a, std::addressof(*__p),
 130:/usr/include/c++/4.9/ext/alloc_traits.h **** 			      std::forward<_Args>(__args)...);
 131:/usr/include/c++/4.9/ext/alloc_traits.h ****       }
 132:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 133:/usr/include/c++/4.9/ext/alloc_traits.h ****     // overload destroy for non-standard pointer types
 134:/usr/include/c++/4.9/ext/alloc_traits.h ****     template<typename _Ptr>
 135:/usr/include/c++/4.9/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
 136:/usr/include/c++/4.9/ext/alloc_traits.h ****       destroy(_Alloc& __a, _Ptr __p)
 137:/usr/include/c++/4.9/ext/alloc_traits.h ****       { _Base_type::destroy(__a, std::addressof(*__p)); }
 138:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 139:/usr/include/c++/4.9/ext/alloc_traits.h ****     static _Alloc _S_select_on_copy(const _Alloc& __a)
 140:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return _Base_type::select_on_container_copy_construction(__a); }
 141:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 142:/usr/include/c++/4.9/ext/alloc_traits.h ****     static void _S_on_swap(_Alloc& __a, _Alloc& __b)
 143:/usr/include/c++/4.9/ext/alloc_traits.h ****     { std::__alloc_on_swap(__a, __b); }
 144:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 145:/usr/include/c++/4.9/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_copy_assign()
 146:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_copy_assignment::value; }
 147:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 148:/usr/include/c++/4.9/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_move_assign()
 149:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_move_assignment::value; }
 150:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 151:/usr/include/c++/4.9/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_swap()
 152:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_swap::value; }
 153:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 154:/usr/include/c++/4.9/ext/alloc_traits.h ****     static constexpr bool _S_always_equal()
 155:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return __allocator_always_compares_equal<_Alloc>::value; }
 156:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 157:/usr/include/c++/4.9/ext/alloc_traits.h ****     static constexpr bool _S_nothrow_move()
 158:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return _S_propagate_on_move_assign() || _S_always_equal(); }
 159:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 160:/usr/include/c++/4.9/ext/alloc_traits.h ****     static constexpr bool _S_nothrow_swap()
 161:/usr/include/c++/4.9/ext/alloc_traits.h ****     {
 162:/usr/include/c++/4.9/ext/alloc_traits.h ****       using std::swap;
 163:/usr/include/c++/4.9/ext/alloc_traits.h ****       return !_S_propagate_on_swap()
 164:/usr/include/c++/4.9/ext/alloc_traits.h ****        	|| noexcept(swap(std::declval<_Alloc&>(), std::declval<_Alloc&>()));
 165:/usr/include/c++/4.9/ext/alloc_traits.h ****     }
 166:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 167:/usr/include/c++/4.9/ext/alloc_traits.h ****     template<typename _Tp>
 168:/usr/include/c++/4.9/ext/alloc_traits.h ****       struct rebind
 169:/usr/include/c++/4.9/ext/alloc_traits.h ****       { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
 170:/usr/include/c++/4.9/ext/alloc_traits.h **** #else
 171:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 172:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Alloc::pointer                pointer;
 173:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Alloc::const_pointer          const_pointer;
 174:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Alloc::value_type             value_type;
 175:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Alloc::reference              reference;
 176:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Alloc::const_reference        const_reference;
 177:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Alloc::size_type              size_type;
 178:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Alloc::difference_type        difference_type;
 179:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 180:/usr/include/c++/4.9/ext/alloc_traits.h ****     static pointer
 181:/usr/include/c++/4.9/ext/alloc_traits.h ****     allocate(_Alloc& __a, size_type __n)
 182:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 183:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 184:/usr/include/c++/4.9/ext/alloc_traits.h ****     static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 185:/usr/include/c++/4.9/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 186:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 187:/usr/include/c++/4.9/ext/alloc_traits.h ****     template<typename _Tp>
 188:/usr/include/c++/4.9/ext/alloc_traits.h ****       static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
 996              		.loc 7 188 0
 997              		.cfi_startproc
 998 0000 55       		pushq	%rbp
 999              		.cfi_def_cfa_offset 16
 1000              		.cfi_offset 6, -16
 1001 0001 4889E5   		movq	%rsp, %rbp
 1002              		.cfi_def_cfa_register 6
 1003 0004 4883EC20 		subq	$32, %rsp
 1004 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1005 000c 488975F0 		movq	%rsi, -16(%rbp)
 1006 0010 488955E8 		movq	%rdx, -24(%rbp)
 189:/usr/include/c++/4.9/ext/alloc_traits.h ****       { __a.construct(__p, __arg); }
 1007              		.loc 7 189 0
 1008 0014 488B55E8 		movq	-24(%rbp), %rdx
 1009 0018 488B4DF0 		movq	-16(%rbp), %rcx
 1010 001c 488B45F8 		movq	-8(%rbp), %rax
 1011 0020 4889CE   		movq	%rcx, %rsi
 1012 0023 4889C7   		movq	%rax, %rdi
 1013 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_@PLT
 1013      00
 1014 002b C9       		leave
 1015              		.cfi_def_cfa 7, 8
 1016 002c C3       		ret
 1017              		.cfi_endproc
 1018              	.LFE916:
 1020              		.section	.text._ZN8UnitTest18DeferredTestResultC2ERKS0_,"axG",@progbits,_ZN8UnitTest18DeferredTest
 1021              		.align 2
 1022              		.weak	_ZN8UnitTest18DeferredTestResultC2ERKS0_
 1024              	_ZN8UnitTest18DeferredTestResultC2ERKS0_:
 1025              	.LFB919:
 1026              		.loc 2 10 0
 1027              		.cfi_startproc
 1028              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1029              		.cfi_lsda 0x1b,.LLSDA919
 1030 0000 55       		pushq	%rbp
 1031              		.cfi_def_cfa_offset 16
 1032              		.cfi_offset 6, -16
 1033 0001 4889E5   		movq	%rsp, %rbp
 1034              		.cfi_def_cfa_register 6
 1035 0004 53       		pushq	%rbx
 1036 0005 4883EC18 		subq	$24, %rsp
 1037              		.cfi_offset 3, -24
 1038 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1039 000d 488975E0 		movq	%rsi, -32(%rbp)
 1040              	.LBB11:
 1041              		.loc 2 10 0
 1042 0011 488B55E0 		movq	-32(%rbp), %rdx
 1043 0015 488B45E8 		movq	-24(%rbp), %rax
 1044 0019 4889D6   		movq	%rdx, %rsi
 1045 001c 4889C7   		movq	%rax, %rdi
 1046              	.LEHB22:
 1047 001f E8000000 		call	_ZNSsC1ERKSs@PLT
 1047      00
 1048              	.LEHE22:
 1049 0024 488B45E0 		movq	-32(%rbp), %rax
 1050 0028 488D5008 		leaq	8(%rax), %rdx
 1051 002c 488B45E8 		movq	-24(%rbp), %rax
 1052 0030 4883C008 		addq	$8, %rax
 1053 0034 4889D6   		movq	%rdx, %rsi
 1054 0037 4889C7   		movq	%rax, %rdi
 1055              	.LEHB23:
 1056 003a E8000000 		call	_ZNSsC1ERKSs@PLT
 1056      00
 1057              	.LEHE23:
 1058              		.loc 2 10 0 is_stmt 0 discriminator 2
 1059 003f 488B45E0 		movq	-32(%rbp), %rax
 1060 0043 488D5010 		leaq	16(%rax), %rdx
 1061 0047 488B45E8 		movq	-24(%rbp), %rax
 1062 004b 4883C010 		addq	$16, %rax
 1063 004f 4889D6   		movq	%rdx, %rsi
 1064 0052 4889C7   		movq	%rax, %rdi
 1065              	.LEHB24:
 1066 0055 E8000000 		call	_ZNSsC1ERKSs@PLT
 1066      00
 1067              	.LEHE24:
 1068              		.loc 2 10 0 discriminator 4
 1069 005a 488B45E0 		movq	-32(%rbp), %rax
 1070 005e 488D5018 		leaq	24(%rax), %rdx
 1071 0062 488B45E8 		movq	-24(%rbp), %rax
 1072 0066 4883C018 		addq	$24, %rax
 1073 006a 4889D6   		movq	%rdx, %rsi
 1074 006d 4889C7   		movq	%rax, %rdi
 1075              	.LEHB25:
 1076 0070 E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EEC1ERKS3_@PLT
 1076      00
 1077              	.LEHE25:
 1078              		.loc 2 10 0 discriminator 6
 1079 0075 488B45E0 		movq	-32(%rbp), %rax
 1080 0079 8B4030   		movl	48(%rax), %eax
 1081 007c 488B55E8 		movq	-24(%rbp), %rdx
 1082 0080 894230   		movl	%eax, 48(%rdx)
 1083 0083 488B45E0 		movq	-32(%rbp), %rax
 1084 0087 0FB65034 		movzbl	52(%rax), %edx
 1085 008b 488B45E8 		movq	-24(%rbp), %rax
 1086 008f 885034   		movb	%dl, 52(%rax)
 1087 0092 EB44     		jmp	.L65
 1088              	.L64:
 1089 0094 4889C3   		movq	%rax, %rbx
 1090              		.loc 2 10 0
 1091 0097 488B45E8 		movq	-24(%rbp), %rax
 1092 009b 4883C010 		addq	$16, %rax
 1093 009f 4889C7   		movq	%rax, %rdi
 1094 00a2 E8000000 		call	_ZNSsD1Ev@PLT
 1094      00
 1095 00a7 EB03     		jmp	.L60
 1096              	.L63:
 1097 00a9 4889C3   		movq	%rax, %rbx
 1098              	.L60:
 1099              		.loc 2 10 0 discriminator 3
 1100 00ac 488B45E8 		movq	-24(%rbp), %rax
 1101 00b0 4883C008 		addq	$8, %rax
 1102 00b4 4889C7   		movq	%rax, %rdi
 1103 00b7 E8000000 		call	_ZNSsD1Ev@PLT
 1103      00
 1104 00bc EB03     		jmp	.L61
 1105              	.L62:
 1106 00be 4889C3   		movq	%rax, %rbx
 1107              	.L61:
 1108              		.loc 2 10 0 discriminator 1
 1109 00c1 488B45E8 		movq	-24(%rbp), %rax
 1110 00c5 4889C7   		movq	%rax, %rdi
 1111 00c8 E8000000 		call	_ZNSsD1Ev@PLT
 1111      00
 1112 00cd 4889D8   		movq	%rbx, %rax
 1113 00d0 4889C7   		movq	%rax, %rdi
 1114              	.LEHB26:
 1115 00d3 E8000000 		call	_Unwind_Resume@PLT
 1115      00
 1116              	.LEHE26:
 1117              	.L65:
 1118              	.LBE11:
 1119              		.loc 2 10 0
 1120 00d8 4883C418 		addq	$24, %rsp
 1121 00dc 5B       		popq	%rbx
 1122 00dd 5D       		popq	%rbp
 1123              		.cfi_def_cfa 7, 8
 1124 00de C3       		ret
 1125              		.cfi_endproc
 1126              	.LFE919:
 1127              		.section	.gcc_except_table
 1128              	.LLSDA919:
 1129 005f FF       		.byte	0xff
 1130 0060 FF       		.byte	0xff
 1131 0061 01       		.byte	0x1
 1132 0062 18       		.uleb128 .LLSDACSE919-.LLSDACSB919
 1133              	.LLSDACSB919:
 1134 0063 1F       		.uleb128 .LEHB22-.LFB919
 1135 0064 05       		.uleb128 .LEHE22-.LEHB22
 1136 0065 00       		.uleb128 0
 1137 0066 00       		.uleb128 0
 1138 0067 3A       		.uleb128 .LEHB23-.LFB919
 1139 0068 05       		.uleb128 .LEHE23-.LEHB23
 1140 0069 BE01     		.uleb128 .L62-.LFB919
 1141 006b 00       		.uleb128 0
 1142 006c 55       		.uleb128 .LEHB24-.LFB919
 1143 006d 05       		.uleb128 .LEHE24-.LEHB24
 1144 006e A901     		.uleb128 .L63-.LFB919
 1145 0070 00       		.uleb128 0
 1146 0071 70       		.uleb128 .LEHB25-.LFB919
 1147 0072 05       		.uleb128 .LEHE25-.LEHB25
 1148 0073 9401     		.uleb128 .L64-.LFB919
 1149 0075 00       		.uleb128 0
 1150 0076 D301     		.uleb128 .LEHB26-.LFB919
 1151 0078 05       		.uleb128 .LEHE26-.LEHB26
 1152 0079 00       		.uleb128 0
 1153 007a 00       		.uleb128 0
 1154              	.LLSDACSE919:
 1155              		.section	.text._ZN8UnitTest18DeferredTestResultC2ERKS0_,"axG",@progbits,_ZN8UnitTest18DeferredTest
 1157              		.weak	_ZN8UnitTest18DeferredTestResultC1ERKS0_
 1158              		.set	_ZN8UnitTest18DeferredTestResultC1ERKS0_,_ZN8UnitTest18DeferredTestResultC2ERKS0_
 1159              		.section	.text._ZN8UnitTest18DeferredTestResultaSERKS0_,"axG",@progbits,_ZN8UnitTest18DeferredTest
 1160              		.align 2
 1161              		.weak	_ZN8UnitTest18DeferredTestResultaSERKS0_
 1163              	_ZN8UnitTest18DeferredTestResultaSERKS0_:
 1164              	.LFB921:
 1165              		.loc 2 10 0 is_stmt 1
 1166              		.cfi_startproc
 1167 0000 55       		pushq	%rbp
 1168              		.cfi_def_cfa_offset 16
 1169              		.cfi_offset 6, -16
 1170 0001 4889E5   		movq	%rsp, %rbp
 1171              		.cfi_def_cfa_register 6
 1172 0004 4883EC10 		subq	$16, %rsp
 1173 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1174 000c 488975F0 		movq	%rsi, -16(%rbp)
 1175              		.loc 2 10 0
 1176 0010 488B55F0 		movq	-16(%rbp), %rdx
 1177 0014 488B45F8 		movq	-8(%rbp), %rax
 1178 0018 4889D6   		movq	%rdx, %rsi
 1179 001b 4889C7   		movq	%rax, %rdi
 1180 001e E8000000 		call	_ZNSsaSERKSs@PLT
 1180      00
 1181 0023 488B45F0 		movq	-16(%rbp), %rax
 1182 0027 488D5008 		leaq	8(%rax), %rdx
 1183 002b 488B45F8 		movq	-8(%rbp), %rax
 1184 002f 4883C008 		addq	$8, %rax
 1185 0033 4889D6   		movq	%rdx, %rsi
 1186 0036 4889C7   		movq	%rax, %rdi
 1187 0039 E8000000 		call	_ZNSsaSERKSs@PLT
 1187      00
 1188 003e 488B45F0 		movq	-16(%rbp), %rax
 1189 0042 488D5010 		leaq	16(%rax), %rdx
 1190 0046 488B45F8 		movq	-8(%rbp), %rax
 1191 004a 4883C010 		addq	$16, %rax
 1192 004e 4889D6   		movq	%rdx, %rsi
 1193 0051 4889C7   		movq	%rax, %rdi
 1194 0054 E8000000 		call	_ZNSsaSERKSs@PLT
 1194      00
 1195 0059 488B45F0 		movq	-16(%rbp), %rax
 1196 005d 488D5018 		leaq	24(%rax), %rdx
 1197 0061 488B45F8 		movq	-8(%rbp), %rax
 1198 0065 4883C018 		addq	$24, %rax
 1199 0069 4889D6   		movq	%rdx, %rsi
 1200 006c 4889C7   		movq	%rax, %rdi
 1201 006f E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EEaSERKS3_@PLT
 1201      00
 1202 0074 488B45F0 		movq	-16(%rbp), %rax
 1203 0078 8B4030   		movl	48(%rax), %eax
 1204 007b 488B55F8 		movq	-8(%rbp), %rdx
 1205 007f 894230   		movl	%eax, 48(%rdx)
 1206 0082 488B45F0 		movq	-16(%rbp), %rax
 1207 0086 0FB65034 		movzbl	52(%rax), %edx
 1208 008a 488B45F8 		movq	-8(%rbp), %rax
 1209 008e 885034   		movb	%dl, 52(%rax)
 1210 0091 488B45F8 		movq	-8(%rbp), %rax
 1211 0095 C9       		leave
 1212              		.cfi_def_cfa 7, 8
 1213 0096 C3       		ret
 1214              		.cfi_endproc
 1215              	.LFE921:
 1217              		.section	.rodata
 1218              	.LC0:
 1219 0000 76656374 		.string	"vector::_M_insert_aux"
 1219      6F723A3A 
 1219      5F4D5F69 
 1219      6E736572 
 1219      745F6175 
 1220              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__
 1221              		.align 2
 1222              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_it
 1224              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorI
 1225              	.LFB917:
 1226              		.file 8 "/usr/include/c++/4.9/bits/vector.tcc"
   1:/usr/include/c++/4.9/bits/vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:/usr/include/c++/4.9/bits/vector.tcc **** 
   3:/usr/include/c++/4.9/bits/vector.tcc **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/vector.tcc **** //
   5:/usr/include/c++/4.9/bits/vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/vector.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/vector.tcc **** // any later version.
  10:/usr/include/c++/4.9/bits/vector.tcc **** 
  11:/usr/include/c++/4.9/bits/vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/vector.tcc **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/vector.tcc **** 
  16:/usr/include/c++/4.9/bits/vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/vector.tcc **** 
  20:/usr/include/c++/4.9/bits/vector.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/vector.tcc **** 
  25:/usr/include/c++/4.9/bits/vector.tcc **** /*
  26:/usr/include/c++/4.9/bits/vector.tcc ****  *
  27:/usr/include/c++/4.9/bits/vector.tcc ****  * Copyright (c) 1994
  28:/usr/include/c++/4.9/bits/vector.tcc ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.9/bits/vector.tcc ****  *
  30:/usr/include/c++/4.9/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.9/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.9/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.9/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.9/bits/vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.9/bits/vector.tcc ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.9/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.9/bits/vector.tcc ****  *
  38:/usr/include/c++/4.9/bits/vector.tcc ****  *
  39:/usr/include/c++/4.9/bits/vector.tcc ****  * Copyright (c) 1996
  40:/usr/include/c++/4.9/bits/vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.9/bits/vector.tcc ****  *
  42:/usr/include/c++/4.9/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.9/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.9/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.9/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.9/bits/vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.9/bits/vector.tcc ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/4.9/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.9/bits/vector.tcc ****  */
  50:/usr/include/c++/4.9/bits/vector.tcc **** 
  51:/usr/include/c++/4.9/bits/vector.tcc **** /** @file bits/vector.tcc
  52:/usr/include/c++/4.9/bits/vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.9/bits/vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/4.9/bits/vector.tcc ****  */
  55:/usr/include/c++/4.9/bits/vector.tcc **** 
  56:/usr/include/c++/4.9/bits/vector.tcc **** #ifndef _VECTOR_TCC
  57:/usr/include/c++/4.9/bits/vector.tcc **** #define _VECTOR_TCC 1
  58:/usr/include/c++/4.9/bits/vector.tcc **** 
  59:/usr/include/c++/4.9/bits/vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/c++/4.9/bits/vector.tcc **** {
  61:/usr/include/c++/4.9/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  62:/usr/include/c++/4.9/bits/vector.tcc **** 
  63:/usr/include/c++/4.9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  64:/usr/include/c++/4.9/bits/vector.tcc ****     void
  65:/usr/include/c++/4.9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
  66:/usr/include/c++/4.9/bits/vector.tcc ****     reserve(size_type __n)
  67:/usr/include/c++/4.9/bits/vector.tcc ****     {
  68:/usr/include/c++/4.9/bits/vector.tcc ****       if (__n > this->max_size())
  69:/usr/include/c++/4.9/bits/vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  70:/usr/include/c++/4.9/bits/vector.tcc ****       if (this->capacity() < __n)
  71:/usr/include/c++/4.9/bits/vector.tcc **** 	{
  72:/usr/include/c++/4.9/bits/vector.tcc **** 	  const size_type __old_size = size();
  73:/usr/include/c++/4.9/bits/vector.tcc **** 	  pointer __tmp = _M_allocate_and_copy(__n,
  74:/usr/include/c++/4.9/bits/vector.tcc **** 	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
  75:/usr/include/c++/4.9/bits/vector.tcc **** 	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  76:/usr/include/c++/4.9/bits/vector.tcc **** 	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  77:/usr/include/c++/4.9/bits/vector.tcc **** 			_M_get_Tp_allocator());
  78:/usr/include/c++/4.9/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  79:/usr/include/c++/4.9/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
  80:/usr/include/c++/4.9/bits/vector.tcc **** 			- this->_M_impl._M_start);
  81:/usr/include/c++/4.9/bits/vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  82:/usr/include/c++/4.9/bits/vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  83:/usr/include/c++/4.9/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  84:/usr/include/c++/4.9/bits/vector.tcc **** 	}
  85:/usr/include/c++/4.9/bits/vector.tcc ****     }
  86:/usr/include/c++/4.9/bits/vector.tcc **** 
  87:/usr/include/c++/4.9/bits/vector.tcc **** #if __cplusplus >= 201103L
  88:/usr/include/c++/4.9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  89:/usr/include/c++/4.9/bits/vector.tcc ****     template<typename... _Args>
  90:/usr/include/c++/4.9/bits/vector.tcc ****       void
  91:/usr/include/c++/4.9/bits/vector.tcc ****       vector<_Tp, _Alloc>::
  92:/usr/include/c++/4.9/bits/vector.tcc ****       emplace_back(_Args&&... __args)
  93:/usr/include/c++/4.9/bits/vector.tcc ****       {
  94:/usr/include/c++/4.9/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  95:/usr/include/c++/4.9/bits/vector.tcc **** 	  {
  96:/usr/include/c++/4.9/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  97:/usr/include/c++/4.9/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
  98:/usr/include/c++/4.9/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
  99:/usr/include/c++/4.9/bits/vector.tcc **** 	  }
 100:/usr/include/c++/4.9/bits/vector.tcc **** 	else
 101:/usr/include/c++/4.9/bits/vector.tcc **** 	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
 102:/usr/include/c++/4.9/bits/vector.tcc ****       }
 103:/usr/include/c++/4.9/bits/vector.tcc **** #endif
 104:/usr/include/c++/4.9/bits/vector.tcc **** 
 105:/usr/include/c++/4.9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 106:/usr/include/c++/4.9/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 107:/usr/include/c++/4.9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 108:/usr/include/c++/4.9/bits/vector.tcc **** #if __cplusplus >= 201103L
 109:/usr/include/c++/4.9/bits/vector.tcc ****     insert(const_iterator __position, const value_type& __x)
 110:/usr/include/c++/4.9/bits/vector.tcc **** #else
 111:/usr/include/c++/4.9/bits/vector.tcc ****     insert(iterator __position, const value_type& __x)
 112:/usr/include/c++/4.9/bits/vector.tcc **** #endif
 113:/usr/include/c++/4.9/bits/vector.tcc ****     {
 114:/usr/include/c++/4.9/bits/vector.tcc ****       const size_type __n = __position - begin();
 115:/usr/include/c++/4.9/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
 116:/usr/include/c++/4.9/bits/vector.tcc **** 	  && __position == end())
 117:/usr/include/c++/4.9/bits/vector.tcc **** 	{
 118:/usr/include/c++/4.9/bits/vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
 119:/usr/include/c++/4.9/bits/vector.tcc **** 	  ++this->_M_impl._M_finish;
 120:/usr/include/c++/4.9/bits/vector.tcc **** 	}
 121:/usr/include/c++/4.9/bits/vector.tcc ****       else
 122:/usr/include/c++/4.9/bits/vector.tcc **** 	{
 123:/usr/include/c++/4.9/bits/vector.tcc **** #if __cplusplus >= 201103L
 124:/usr/include/c++/4.9/bits/vector.tcc **** 	  const auto __pos = begin() + (__position - cbegin());
 125:/usr/include/c++/4.9/bits/vector.tcc **** 	  if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 126:/usr/include/c++/4.9/bits/vector.tcc **** 	    {
 127:/usr/include/c++/4.9/bits/vector.tcc **** 	      _Tp __x_copy = __x;
 128:/usr/include/c++/4.9/bits/vector.tcc **** 	      _M_insert_aux(__pos, std::move(__x_copy));
 129:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 130:/usr/include/c++/4.9/bits/vector.tcc **** 	  else
 131:/usr/include/c++/4.9/bits/vector.tcc **** 	    _M_insert_aux(__pos, __x);
 132:/usr/include/c++/4.9/bits/vector.tcc **** #else
 133:/usr/include/c++/4.9/bits/vector.tcc **** 	    _M_insert_aux(__position, __x);
 134:/usr/include/c++/4.9/bits/vector.tcc **** #endif
 135:/usr/include/c++/4.9/bits/vector.tcc **** 	}
 136:/usr/include/c++/4.9/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 137:/usr/include/c++/4.9/bits/vector.tcc ****     }
 138:/usr/include/c++/4.9/bits/vector.tcc **** 
 139:/usr/include/c++/4.9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 140:/usr/include/c++/4.9/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 141:/usr/include/c++/4.9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 142:/usr/include/c++/4.9/bits/vector.tcc ****     _M_erase(iterator __position)
 143:/usr/include/c++/4.9/bits/vector.tcc ****     {
 144:/usr/include/c++/4.9/bits/vector.tcc ****       if (__position + 1 != end())
 145:/usr/include/c++/4.9/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 146:/usr/include/c++/4.9/bits/vector.tcc ****       --this->_M_impl._M_finish;
 147:/usr/include/c++/4.9/bits/vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 148:/usr/include/c++/4.9/bits/vector.tcc ****       return __position;
 149:/usr/include/c++/4.9/bits/vector.tcc ****     }
 150:/usr/include/c++/4.9/bits/vector.tcc **** 
 151:/usr/include/c++/4.9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 152:/usr/include/c++/4.9/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 153:/usr/include/c++/4.9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 154:/usr/include/c++/4.9/bits/vector.tcc ****     _M_erase(iterator __first, iterator __last)
 155:/usr/include/c++/4.9/bits/vector.tcc ****     {
 156:/usr/include/c++/4.9/bits/vector.tcc ****       if (__first != __last)
 157:/usr/include/c++/4.9/bits/vector.tcc **** 	{
 158:/usr/include/c++/4.9/bits/vector.tcc **** 	  if (__last != end())
 159:/usr/include/c++/4.9/bits/vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 160:/usr/include/c++/4.9/bits/vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
 161:/usr/include/c++/4.9/bits/vector.tcc **** 	}
 162:/usr/include/c++/4.9/bits/vector.tcc ****       return __first;
 163:/usr/include/c++/4.9/bits/vector.tcc ****     }
 164:/usr/include/c++/4.9/bits/vector.tcc **** 
 165:/usr/include/c++/4.9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 166:/usr/include/c++/4.9/bits/vector.tcc ****     vector<_Tp, _Alloc>&
 167:/usr/include/c++/4.9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 168:/usr/include/c++/4.9/bits/vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 169:/usr/include/c++/4.9/bits/vector.tcc ****     {
 170:/usr/include/c++/4.9/bits/vector.tcc ****       if (&__x != this)
 171:/usr/include/c++/4.9/bits/vector.tcc **** 	{
 172:/usr/include/c++/4.9/bits/vector.tcc **** #if __cplusplus >= 201103L
 173:/usr/include/c++/4.9/bits/vector.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 174:/usr/include/c++/4.9/bits/vector.tcc **** 	    {
 175:/usr/include/c++/4.9/bits/vector.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 176:/usr/include/c++/4.9/bits/vector.tcc **** 	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 177:/usr/include/c++/4.9/bits/vector.tcc **** 	        {
 178:/usr/include/c++/4.9/bits/vector.tcc **** 		  // replacement allocator cannot free existing storage
 179:/usr/include/c++/4.9/bits/vector.tcc **** 		  this->clear();
 180:/usr/include/c++/4.9/bits/vector.tcc **** 		  _M_deallocate(this->_M_impl._M_start,
 181:/usr/include/c++/4.9/bits/vector.tcc **** 				this->_M_impl._M_end_of_storage
 182:/usr/include/c++/4.9/bits/vector.tcc **** 				- this->_M_impl._M_start);
 183:/usr/include/c++/4.9/bits/vector.tcc **** 		  this->_M_impl._M_start = nullptr;
 184:/usr/include/c++/4.9/bits/vector.tcc **** 		  this->_M_impl._M_finish = nullptr;
 185:/usr/include/c++/4.9/bits/vector.tcc **** 		  this->_M_impl._M_end_of_storage = nullptr;
 186:/usr/include/c++/4.9/bits/vector.tcc **** 		}
 187:/usr/include/c++/4.9/bits/vector.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 188:/usr/include/c++/4.9/bits/vector.tcc **** 				   __x._M_get_Tp_allocator());
 189:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 190:/usr/include/c++/4.9/bits/vector.tcc **** #endif
 191:/usr/include/c++/4.9/bits/vector.tcc **** 	  const size_type __xlen = __x.size();
 192:/usr/include/c++/4.9/bits/vector.tcc **** 	  if (__xlen > capacity())
 193:/usr/include/c++/4.9/bits/vector.tcc **** 	    {
 194:/usr/include/c++/4.9/bits/vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 195:/usr/include/c++/4.9/bits/vector.tcc **** 						   __x.end());
 196:/usr/include/c++/4.9/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 197:/usr/include/c++/4.9/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 198:/usr/include/c++/4.9/bits/vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 199:/usr/include/c++/4.9/bits/vector.tcc **** 			    this->_M_impl._M_end_of_storage
 200:/usr/include/c++/4.9/bits/vector.tcc **** 			    - this->_M_impl._M_start);
 201:/usr/include/c++/4.9/bits/vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 202:/usr/include/c++/4.9/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 203:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 204:/usr/include/c++/4.9/bits/vector.tcc **** 	  else if (size() >= __xlen)
 205:/usr/include/c++/4.9/bits/vector.tcc **** 	    {
 206:/usr/include/c++/4.9/bits/vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 207:/usr/include/c++/4.9/bits/vector.tcc **** 			    end(), _M_get_Tp_allocator());
 208:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 209:/usr/include/c++/4.9/bits/vector.tcc **** 	  else
 210:/usr/include/c++/4.9/bits/vector.tcc **** 	    {
 211:/usr/include/c++/4.9/bits/vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 212:/usr/include/c++/4.9/bits/vector.tcc **** 			this->_M_impl._M_start);
 213:/usr/include/c++/4.9/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 214:/usr/include/c++/4.9/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 215:/usr/include/c++/4.9/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 216:/usr/include/c++/4.9/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 217:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 218:/usr/include/c++/4.9/bits/vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 219:/usr/include/c++/4.9/bits/vector.tcc **** 	}
 220:/usr/include/c++/4.9/bits/vector.tcc ****       return *this;
 221:/usr/include/c++/4.9/bits/vector.tcc ****     }
 222:/usr/include/c++/4.9/bits/vector.tcc **** 
 223:/usr/include/c++/4.9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 224:/usr/include/c++/4.9/bits/vector.tcc ****     void
 225:/usr/include/c++/4.9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 226:/usr/include/c++/4.9/bits/vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 227:/usr/include/c++/4.9/bits/vector.tcc ****     {
 228:/usr/include/c++/4.9/bits/vector.tcc ****       if (__n > capacity())
 229:/usr/include/c++/4.9/bits/vector.tcc **** 	{
 230:/usr/include/c++/4.9/bits/vector.tcc **** 	  vector __tmp(__n, __val, _M_get_Tp_allocator());
 231:/usr/include/c++/4.9/bits/vector.tcc **** 	  __tmp._M_impl._M_swap_data(this->_M_impl);
 232:/usr/include/c++/4.9/bits/vector.tcc **** 	}
 233:/usr/include/c++/4.9/bits/vector.tcc ****       else if (__n > size())
 234:/usr/include/c++/4.9/bits/vector.tcc **** 	{
 235:/usr/include/c++/4.9/bits/vector.tcc **** 	  std::fill(begin(), end(), __val);
 236:/usr/include/c++/4.9/bits/vector.tcc **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 237:/usr/include/c++/4.9/bits/vector.tcc **** 					__n - size(), __val,
 238:/usr/include/c++/4.9/bits/vector.tcc **** 					_M_get_Tp_allocator());
 239:/usr/include/c++/4.9/bits/vector.tcc **** 	  this->_M_impl._M_finish += __n - size();
 240:/usr/include/c++/4.9/bits/vector.tcc **** 	}
 241:/usr/include/c++/4.9/bits/vector.tcc ****       else
 242:/usr/include/c++/4.9/bits/vector.tcc ****         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 243:/usr/include/c++/4.9/bits/vector.tcc ****     }
 244:/usr/include/c++/4.9/bits/vector.tcc **** 
 245:/usr/include/c++/4.9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 246:/usr/include/c++/4.9/bits/vector.tcc ****     template<typename _InputIterator>
 247:/usr/include/c++/4.9/bits/vector.tcc ****       void
 248:/usr/include/c++/4.9/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 249:/usr/include/c++/4.9/bits/vector.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 250:/usr/include/c++/4.9/bits/vector.tcc **** 		    std::input_iterator_tag)
 251:/usr/include/c++/4.9/bits/vector.tcc ****       {
 252:/usr/include/c++/4.9/bits/vector.tcc **** 	pointer __cur(this->_M_impl._M_start);
 253:/usr/include/c++/4.9/bits/vector.tcc **** 	for (; __first != __last && __cur != this->_M_impl._M_finish;
 254:/usr/include/c++/4.9/bits/vector.tcc **** 	     ++__cur, ++__first)
 255:/usr/include/c++/4.9/bits/vector.tcc **** 	  *__cur = *__first;
 256:/usr/include/c++/4.9/bits/vector.tcc **** 	if (__first == __last)
 257:/usr/include/c++/4.9/bits/vector.tcc **** 	  _M_erase_at_end(__cur);
 258:/usr/include/c++/4.9/bits/vector.tcc **** 	else
 259:/usr/include/c++/4.9/bits/vector.tcc **** 	  insert(end(), __first, __last);
 260:/usr/include/c++/4.9/bits/vector.tcc ****       }
 261:/usr/include/c++/4.9/bits/vector.tcc **** 
 262:/usr/include/c++/4.9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 263:/usr/include/c++/4.9/bits/vector.tcc ****     template<typename _ForwardIterator>
 264:/usr/include/c++/4.9/bits/vector.tcc ****       void
 265:/usr/include/c++/4.9/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 266:/usr/include/c++/4.9/bits/vector.tcc ****       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 267:/usr/include/c++/4.9/bits/vector.tcc **** 		    std::forward_iterator_tag)
 268:/usr/include/c++/4.9/bits/vector.tcc ****       {
 269:/usr/include/c++/4.9/bits/vector.tcc **** 	const size_type __len = std::distance(__first, __last);
 270:/usr/include/c++/4.9/bits/vector.tcc **** 
 271:/usr/include/c++/4.9/bits/vector.tcc **** 	if (__len > capacity())
 272:/usr/include/c++/4.9/bits/vector.tcc **** 	  {
 273:/usr/include/c++/4.9/bits/vector.tcc **** 	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 274:/usr/include/c++/4.9/bits/vector.tcc **** 	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 275:/usr/include/c++/4.9/bits/vector.tcc **** 			  _M_get_Tp_allocator());
 276:/usr/include/c++/4.9/bits/vector.tcc **** 	    _M_deallocate(this->_M_impl._M_start,
 277:/usr/include/c++/4.9/bits/vector.tcc **** 			  this->_M_impl._M_end_of_storage
 278:/usr/include/c++/4.9/bits/vector.tcc **** 			  - this->_M_impl._M_start);
 279:/usr/include/c++/4.9/bits/vector.tcc **** 	    this->_M_impl._M_start = __tmp;
 280:/usr/include/c++/4.9/bits/vector.tcc **** 	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 281:/usr/include/c++/4.9/bits/vector.tcc **** 	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 282:/usr/include/c++/4.9/bits/vector.tcc **** 	  }
 283:/usr/include/c++/4.9/bits/vector.tcc **** 	else if (size() >= __len)
 284:/usr/include/c++/4.9/bits/vector.tcc **** 	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 285:/usr/include/c++/4.9/bits/vector.tcc **** 	else
 286:/usr/include/c++/4.9/bits/vector.tcc **** 	  {
 287:/usr/include/c++/4.9/bits/vector.tcc **** 	    _ForwardIterator __mid = __first;
 288:/usr/include/c++/4.9/bits/vector.tcc **** 	    std::advance(__mid, size());
 289:/usr/include/c++/4.9/bits/vector.tcc **** 	    std::copy(__first, __mid, this->_M_impl._M_start);
 290:/usr/include/c++/4.9/bits/vector.tcc **** 	    this->_M_impl._M_finish =
 291:/usr/include/c++/4.9/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__mid, __last,
 292:/usr/include/c++/4.9/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 293:/usr/include/c++/4.9/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 294:/usr/include/c++/4.9/bits/vector.tcc **** 	  }
 295:/usr/include/c++/4.9/bits/vector.tcc ****       }
 296:/usr/include/c++/4.9/bits/vector.tcc **** 
 297:/usr/include/c++/4.9/bits/vector.tcc **** #if __cplusplus >= 201103L
 298:/usr/include/c++/4.9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 299:/usr/include/c++/4.9/bits/vector.tcc ****     template<typename... _Args>
 300:/usr/include/c++/4.9/bits/vector.tcc ****       typename vector<_Tp, _Alloc>::iterator
 301:/usr/include/c++/4.9/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 302:/usr/include/c++/4.9/bits/vector.tcc ****       emplace(const_iterator __position, _Args&&... __args)
 303:/usr/include/c++/4.9/bits/vector.tcc ****       {
 304:/usr/include/c++/4.9/bits/vector.tcc **** 	const size_type __n = __position - begin();
 305:/usr/include/c++/4.9/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
 306:/usr/include/c++/4.9/bits/vector.tcc **** 	    && __position == end())
 307:/usr/include/c++/4.9/bits/vector.tcc **** 	  {
 308:/usr/include/c++/4.9/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 309:/usr/include/c++/4.9/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
 310:/usr/include/c++/4.9/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 311:/usr/include/c++/4.9/bits/vector.tcc **** 	  }
 312:/usr/include/c++/4.9/bits/vector.tcc **** 	else
 313:/usr/include/c++/4.9/bits/vector.tcc **** 	  _M_insert_aux(begin() + (__position - cbegin()),
 314:/usr/include/c++/4.9/bits/vector.tcc **** 			std::forward<_Args>(__args)...);
 315:/usr/include/c++/4.9/bits/vector.tcc **** 	return iterator(this->_M_impl._M_start + __n);
 316:/usr/include/c++/4.9/bits/vector.tcc ****       }
 317:/usr/include/c++/4.9/bits/vector.tcc **** 
 318:/usr/include/c++/4.9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 319:/usr/include/c++/4.9/bits/vector.tcc ****     template<typename... _Args>
 320:/usr/include/c++/4.9/bits/vector.tcc ****       void
 321:/usr/include/c++/4.9/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 322:/usr/include/c++/4.9/bits/vector.tcc ****       _M_insert_aux(iterator __position, _Args&&... __args)
 323:/usr/include/c++/4.9/bits/vector.tcc **** #else
 324:/usr/include/c++/4.9/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 325:/usr/include/c++/4.9/bits/vector.tcc ****     void
 326:/usr/include/c++/4.9/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 1227              		.loc 8 326 0
 1228              		.cfi_startproc
 1229              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1230              		.cfi_lsda 0x1b,.LLSDA917
 1231 0000 55       		pushq	%rbp
 1232              		.cfi_def_cfa_offset 16
 1233              		.cfi_offset 6, -16
 1234 0001 4889E5   		movq	%rsp, %rbp
 1235              		.cfi_def_cfa_register 6
 1236 0004 4154     		pushq	%r12
 1237 0006 53       		pushq	%rbx
 1238 0007 4883C480 		addq	$-128, %rsp
 1239              		.cfi_offset 12, -24
 1240              		.cfi_offset 3, -32
 1241 000b 48897D88 		movq	%rdi, -120(%rbp)
 1242 000f 48897580 		movq	%rsi, -128(%rbp)
 1243 0013 48899578 		movq	%rdx, -136(%rbp)
 1243      FFFFFF
 1244              		.loc 8 326 0
 1245 001a 64488B04 		movq	%fs:40, %rax
 1245      25280000 
 1245      00
 1246 0023 488945E8 		movq	%rax, -24(%rbp)
 1247 0027 31C0     		xorl	%eax, %eax
 1248              	.LBB12:
 1249              	.LBB13:
 327:/usr/include/c++/4.9/bits/vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 328:/usr/include/c++/4.9/bits/vector.tcc **** #endif
 329:/usr/include/c++/4.9/bits/vector.tcc ****     {
 330:/usr/include/c++/4.9/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 1250              		.loc 8 330 0
 1251 0029 488B4588 		movq	-120(%rbp), %rax
 1252 002d 488B5008 		movq	8(%rax), %rdx
 1253 0031 488B4588 		movq	-120(%rbp), %rax
 1254 0035 488B4010 		movq	16(%rax), %rax
 1255 0039 4839C2   		cmpq	%rax, %rdx
 1256 003c 0F84B100 		je	.L69
 1256      0000
 1257              	.LBB14:
 331:/usr/include/c++/4.9/bits/vector.tcc **** 	{
 332:/usr/include/c++/4.9/bits/vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 333:/usr/include/c++/4.9/bits/vector.tcc **** 			           _GLIBCXX_MOVE(*(this->_M_impl._M_finish
 334:/usr/include/c++/4.9/bits/vector.tcc **** 				                   - 1)));
 1258              		.loc 8 334 0
 1259 0042 488B4588 		movq	-120(%rbp), %rax
 1260 0046 488B4008 		movq	8(%rax), %rax
 1261 004a 488D50C8 		leaq	-56(%rax), %rdx
 1262 004e 488B4588 		movq	-120(%rbp), %rax
 1263 0052 488B4808 		movq	8(%rax), %rcx
 1264 0056 488B4588 		movq	-120(%rbp), %rax
 332:/usr/include/c++/4.9/bits/vector.tcc **** 			           _GLIBCXX_MOVE(*(this->_M_impl._M_finish
 1265              		.loc 8 332 0
 1266 005a 4889CE   		movq	%rcx, %rsi
 1267 005d 4889C7   		movq	%rax, %rdi
 1268              	.LEHB27:
 1269 0060 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RK
 1269      00
 335:/usr/include/c++/4.9/bits/vector.tcc **** 	  ++this->_M_impl._M_finish;
 1270              		.loc 8 335 0
 1271 0065 488B4588 		movq	-120(%rbp), %rax
 1272 0069 488B4008 		movq	8(%rax), %rax
 1273 006d 488D5038 		leaq	56(%rax), %rdx
 1274 0071 488B4588 		movq	-120(%rbp), %rax
 1275 0075 48895008 		movq	%rdx, 8(%rax)
 336:/usr/include/c++/4.9/bits/vector.tcc **** #if __cplusplus < 201103L
 337:/usr/include/c++/4.9/bits/vector.tcc **** 	  _Tp __x_copy = __x;
 1276              		.loc 8 337 0
 1277 0079 488B9578 		movq	-136(%rbp), %rdx
 1277      FFFFFF
 1278 0080 488D45B0 		leaq	-80(%rbp), %rax
 1279 0084 4889D6   		movq	%rdx, %rsi
 1280 0087 4889C7   		movq	%rax, %rdi
 1281 008a E8000000 		call	_ZN8UnitTest18DeferredTestResultC1ERKS0_@PLT
 1281      00
 1282              	.LEHE27:
 338:/usr/include/c++/4.9/bits/vector.tcc **** #endif
 339:/usr/include/c++/4.9/bits/vector.tcc **** 	  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 1283              		.loc 8 339 0
 1284 008f 488B4588 		movq	-120(%rbp), %rax
 1285 0093 488B4008 		movq	8(%rax), %rax
 1286 0097 4C8D60C8 		leaq	-56(%rax), %r12
 1287 009b 488B4588 		movq	-120(%rbp), %rax
 1288 009f 488B4008 		movq	8(%rax), %rax
 1289 00a3 488D5890 		leaq	-112(%rax), %rbx
 1290 00a7 488D4580 		leaq	-128(%rbp), %rax
 1291 00ab 4889C7   		movq	%rax, %rdi
 1292              	.LEHB28:
 1293 00ae E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 1293      00
 1294 00b3 488B00   		movq	(%rax), %rax
 1295 00b6 4C89E2   		movq	%r12, %rdx
 1296 00b9 4889DE   		movq	%rbx, %rsi
 1297 00bc 4889C7   		movq	%rax, %rdi
 1298 00bf E8000000 		call	_ZSt13copy_backwardIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_@PLT
 1298      00
 340:/usr/include/c++/4.9/bits/vector.tcc **** 				  this->_M_impl._M_finish - 2,
 341:/usr/include/c++/4.9/bits/vector.tcc **** 				  this->_M_impl._M_finish - 1);
 342:/usr/include/c++/4.9/bits/vector.tcc **** #if __cplusplus < 201103L
 343:/usr/include/c++/4.9/bits/vector.tcc **** 	  *__position = __x_copy;
 1299              		.loc 8 343 0
 1300 00c4 488D4580 		leaq	-128(%rbp), %rax
 1301 00c8 4889C7   		movq	%rax, %rdi
 1302 00cb E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv@
 1302      00
 1303 00d0 4889C2   		movq	%rax, %rdx
 1304 00d3 488D45B0 		leaq	-80(%rbp), %rax
 1305 00d7 4889C6   		movq	%rax, %rsi
 1306 00da 4889D7   		movq	%rdx, %rdi
 1307 00dd E8000000 		call	_ZN8UnitTest18DeferredTestResultaSERKS0_@PLT
 1307      00
 1308              	.LEHE28:
 1309              		.loc 8 343 0 is_stmt 0 discriminator 4
 1310 00e2 488D45B0 		leaq	-80(%rbp), %rax
 1311 00e6 4889C7   		movq	%rax, %rdi
 1312              	.LEHB29:
 1313 00e9 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 1313      00
 1314              	.LBE14:
 1315 00ee E9660200 		jmp	.L68
 1315      00
 1316              	.L69:
 1317              	.LBB15:
 344:/usr/include/c++/4.9/bits/vector.tcc **** #else
 345:/usr/include/c++/4.9/bits/vector.tcc **** 	  *__position = _Tp(std::forward<_Args>(__args)...);
 346:/usr/include/c++/4.9/bits/vector.tcc **** #endif
 347:/usr/include/c++/4.9/bits/vector.tcc **** 	}
 348:/usr/include/c++/4.9/bits/vector.tcc ****       else
 349:/usr/include/c++/4.9/bits/vector.tcc **** 	{
 350:/usr/include/c++/4.9/bits/vector.tcc **** 	  const size_type __len =
 351:/usr/include/c++/4.9/bits/vector.tcc **** 	    _M_check_len(size_type(1), "vector::_M_insert_aux");
 1318              		.loc 8 351 0 is_stmt 1
 1319 00f3 488B4588 		movq	-120(%rbp), %rax
 1320 00f7 488D1500 		leaq	.LC0(%rip), %rdx
 1320      000000
 1321 00fe BE010000 		movl	$1, %esi
 1321      00
 1322 0103 4889C7   		movq	%rax, %rdi
 1323 0106 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc@PLT
 1323      00
 1324 010b 48894598 		movq	%rax, -104(%rbp)
 352:/usr/include/c++/4.9/bits/vector.tcc **** 	  const size_type __elems_before = __position - begin();
 1325              		.loc 8 352 0
 1326 010f 488B4588 		movq	-120(%rbp), %rax
 1327 0113 4889C7   		movq	%rax, %rdi
 1328 0116 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv@PLT
 1328      00
 1329 011b 488945B0 		movq	%rax, -80(%rbp)
 1330 011f 488D55B0 		leaq	-80(%rbp), %rdx
 1331 0123 488D4580 		leaq	-128(%rbp), %rax
 1332 0127 4889D6   		movq	%rdx, %rsi
 1333 012a 4889C7   		movq	%rax, %rdi
 1334 012d E8000000 		call	_ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iterator
 1334      00
 1335 0132 488945A0 		movq	%rax, -96(%rbp)
 353:/usr/include/c++/4.9/bits/vector.tcc **** 	  pointer __new_start(this->_M_allocate(__len));
 1336              		.loc 8 353 0
 1337 0136 488B4588 		movq	-120(%rbp), %rax
 1338 013a 488B5598 		movq	-104(%rbp), %rdx
 1339 013e 4889D6   		movq	%rdx, %rsi
 1340 0141 4889C7   		movq	%rax, %rdi
 1341 0144 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm@PLT
 1341      00
 1342              	.LEHE29:
 1343 0149 488945A8 		movq	%rax, -88(%rbp)
 354:/usr/include/c++/4.9/bits/vector.tcc **** 	  pointer __new_finish(__new_start);
 1344              		.loc 8 354 0
 1345 014d 488B45A8 		movq	-88(%rbp), %rax
 1346 0151 48894590 		movq	%rax, -112(%rbp)
 355:/usr/include/c++/4.9/bits/vector.tcc **** 	  __try
 356:/usr/include/c++/4.9/bits/vector.tcc **** 	    {
 357:/usr/include/c++/4.9/bits/vector.tcc **** 	      // The order of the three operations is dictated by the C++0x
 358:/usr/include/c++/4.9/bits/vector.tcc **** 	      // case, where the moves could alter a new element belonging
 359:/usr/include/c++/4.9/bits/vector.tcc **** 	      // to the existing vector.  This is an issue only for callers
 360:/usr/include/c++/4.9/bits/vector.tcc **** 	      // taking the element by const lvalue ref (see 23.1/13).
 361:/usr/include/c++/4.9/bits/vector.tcc **** 	      _Alloc_traits::construct(this->_M_impl,
 362:/usr/include/c++/4.9/bits/vector.tcc **** 		                       __new_start + __elems_before,
 363:/usr/include/c++/4.9/bits/vector.tcc **** #if __cplusplus >= 201103L
 364:/usr/include/c++/4.9/bits/vector.tcc **** 				       std::forward<_Args>(__args)...);
 365:/usr/include/c++/4.9/bits/vector.tcc **** #else
 366:/usr/include/c++/4.9/bits/vector.tcc **** 	                               __x);
 1347              		.loc 8 366 0
 1348 0155 488B45A0 		movq	-96(%rbp), %rax
 1349 0159 48C1E003 		salq	$3, %rax
 1350 015d 488D14C5 		leaq	0(,%rax,8), %rdx
 1350      00000000 
 1351 0165 4829C2   		subq	%rax, %rdx
 1352 0168 488B45A8 		movq	-88(%rbp), %rax
 1353 016c 488D0C02 		leaq	(%rdx,%rax), %rcx
 1354 0170 488B4588 		movq	-120(%rbp), %rax
 361:/usr/include/c++/4.9/bits/vector.tcc **** 		                       __new_start + __elems_before,
 1355              		.loc 8 361 0
 1356 0174 488B9578 		movq	-136(%rbp), %rdx
 1356      FFFFFF
 1357 017b 4889CE   		movq	%rcx, %rsi
 1358 017e 4889C7   		movq	%rax, %rdi
 1359              	.LEHB30:
 1360 0181 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RK
 1360      00
 367:/usr/include/c++/4.9/bits/vector.tcc **** #endif
 368:/usr/include/c++/4.9/bits/vector.tcc **** 	      __new_finish = 0;
 1361              		.loc 8 368 0
 1362 0186 48C74590 		movq	$0, -112(%rbp)
 1362      00000000 
 369:/usr/include/c++/4.9/bits/vector.tcc **** 
 370:/usr/include/c++/4.9/bits/vector.tcc **** 	      __new_finish
 371:/usr/include/c++/4.9/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 372:/usr/include/c++/4.9/bits/vector.tcc **** 		(this->_M_impl._M_start, __position.base(),
 373:/usr/include/c++/4.9/bits/vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 1363              		.loc 8 373 0
 1364 018e 488B4588 		movq	-120(%rbp), %rax
 1365 0192 4889C7   		movq	%rax, %rdi
 1366 0195 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1366      00
 1367 019a 4889C3   		movq	%rax, %rbx
 1368 019d 488D4580 		leaq	-128(%rbp), %rax
 1369 01a1 4889C7   		movq	%rax, %rdi
 1370 01a4 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 1370      00
 1371              		.loc 8 373 0 is_stmt 0 discriminator 1
 1372 01a9 488B30   		movq	(%rax), %rsi
 1373 01ac 488B4588 		movq	-120(%rbp), %rax
 1374 01b0 488B00   		movq	(%rax), %rax
 370:/usr/include/c++/4.9/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1375              		.loc 8 370 0 is_stmt 1 discriminator 1
 1376 01b3 488B55A8 		movq	-88(%rbp), %rdx
 1377 01b7 4889D9   		movq	%rbx, %rcx
 1378 01ba 4889C7   		movq	%rax, %rdi
 1379 01bd E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S
 1379      00
 370:/usr/include/c++/4.9/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1380              		.loc 8 370 0 is_stmt 0 discriminator 2
 1381 01c2 48894590 		movq	%rax, -112(%rbp)
 374:/usr/include/c++/4.9/bits/vector.tcc **** 
 375:/usr/include/c++/4.9/bits/vector.tcc **** 	      ++__new_finish;
 1382              		.loc 8 375 0 is_stmt 1 discriminator 2
 1383 01c6 48834590 		addq	$56, -112(%rbp)
 1383      38
 376:/usr/include/c++/4.9/bits/vector.tcc **** 
 377:/usr/include/c++/4.9/bits/vector.tcc **** 	      __new_finish
 378:/usr/include/c++/4.9/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 379:/usr/include/c++/4.9/bits/vector.tcc **** 		(__position.base(), this->_M_impl._M_finish,
 380:/usr/include/c++/4.9/bits/vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 1384              		.loc 8 380 0 discriminator 2
 1385 01cb 488B4588 		movq	-120(%rbp), %rax
 1386 01cf 4889C7   		movq	%rax, %rdi
 1387 01d2 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1387      00
 1388              		.loc 8 380 0 is_stmt 0 discriminator 1
 1389 01d7 4989C4   		movq	%rax, %r12
 1390 01da 488B4588 		movq	-120(%rbp), %rax
 1391 01de 488B5808 		movq	8(%rax), %rbx
 1392 01e2 488D4580 		leaq	-128(%rbp), %rax
 1393 01e6 4889C7   		movq	%rax, %rdi
 1394 01e9 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 1394      00
 1395 01ee 488B00   		movq	(%rax), %rax
 377:/usr/include/c++/4.9/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1396              		.loc 8 377 0 is_stmt 1 discriminator 1
 1397 01f1 488B5590 		movq	-112(%rbp), %rdx
 1398 01f5 4C89E1   		movq	%r12, %rcx
 1399 01f8 4889DE   		movq	%rbx, %rsi
 1400 01fb 4889C7   		movq	%rax, %rdi
 1401 01fe E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S
 1401      00
 1402              	.LEHE30:
 377:/usr/include/c++/4.9/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1403              		.loc 8 377 0 is_stmt 0 discriminator 2
 1404 0203 48894590 		movq	%rax, -112(%rbp)
 381:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 382:/usr/include/c++/4.9/bits/vector.tcc ****           __catch(...)
 383:/usr/include/c++/4.9/bits/vector.tcc **** 	    {
 384:/usr/include/c++/4.9/bits/vector.tcc **** 	      if (!__new_finish)
 385:/usr/include/c++/4.9/bits/vector.tcc **** 		_Alloc_traits::destroy(this->_M_impl,
 386:/usr/include/c++/4.9/bits/vector.tcc **** 		                       __new_start + __elems_before);
 387:/usr/include/c++/4.9/bits/vector.tcc **** 	      else
 388:/usr/include/c++/4.9/bits/vector.tcc **** 		std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 389:/usr/include/c++/4.9/bits/vector.tcc **** 	      _M_deallocate(__new_start, __len);
 390:/usr/include/c++/4.9/bits/vector.tcc **** 	      __throw_exception_again;
 391:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 392:/usr/include/c++/4.9/bits/vector.tcc **** 	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 393:/usr/include/c++/4.9/bits/vector.tcc **** 			_M_get_Tp_allocator());
 1405              		.loc 8 393 0 is_stmt 1 discriminator 2
 1406 0207 488B4588 		movq	-120(%rbp), %rax
 1407 020b 4889C7   		movq	%rax, %rdi
 1408              	.LEHB31:
 1409 020e E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1409      00
 1410 0213 4889C2   		movq	%rax, %rdx
 1411 0216 488B4588 		movq	-120(%rbp), %rax
 1412 021a 488B4808 		movq	8(%rax), %rcx
 1413 021e 488B4588 		movq	-120(%rbp), %rax
 1414 0222 488B00   		movq	(%rax), %rax
 392:/usr/include/c++/4.9/bits/vector.tcc **** 			_M_get_Tp_allocator());
 1415              		.loc 8 392 0 discriminator 2
 1416 0225 4889CE   		movq	%rcx, %rsi
 1417 0228 4889C7   		movq	%rax, %rdi
 1418 022b E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E@PLT
 1418      00
 394:/usr/include/c++/4.9/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 395:/usr/include/c++/4.9/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
 396:/usr/include/c++/4.9/bits/vector.tcc **** 			- this->_M_impl._M_start);
 1419              		.loc 8 396 0 discriminator 2
 1420 0230 488B4588 		movq	-120(%rbp), %rax
 1421 0234 488B4010 		movq	16(%rax), %rax
 1422 0238 4889C2   		movq	%rax, %rdx
 1423 023b 488B4588 		movq	-120(%rbp), %rax
 1424 023f 488B00   		movq	(%rax), %rax
 1425 0242 4829C2   		subq	%rax, %rdx
 1426 0245 4889D0   		movq	%rdx, %rax
 1427 0248 48C1F803 		sarq	$3, %rax
 1428 024c 4889C2   		movq	%rax, %rdx
 1429 024f 48B8B76D 		movabsq	$7905747460161236407, %rax
 1429      DBB66DDB 
 1429      B66D
 1430 0259 480FAFC2 		imulq	%rdx, %rax
 1431 025d 4889C2   		movq	%rax, %rdx
 1432 0260 488B4588 		movq	-120(%rbp), %rax
 1433 0264 488B08   		movq	(%rax), %rcx
 1434 0267 488B4588 		movq	-120(%rbp), %rax
 394:/usr/include/c++/4.9/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 1435              		.loc 8 394 0 discriminator 2
 1436 026b 4889CE   		movq	%rcx, %rsi
 1437 026e 4889C7   		movq	%rax, %rdi
 1438 0271 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m@PLT
 1438      00
 1439              	.LEHE31:
 397:/usr/include/c++/4.9/bits/vector.tcc **** 	  this->_M_impl._M_start = __new_start;
 1440              		.loc 8 397 0 discriminator 2
 1441 0276 488B4588 		movq	-120(%rbp), %rax
 1442 027a 488B55A8 		movq	-88(%rbp), %rdx
 1443 027e 488910   		movq	%rdx, (%rax)
 398:/usr/include/c++/4.9/bits/vector.tcc **** 	  this->_M_impl._M_finish = __new_finish;
 1444              		.loc 8 398 0 discriminator 2
 1445 0281 488B4588 		movq	-120(%rbp), %rax
 1446 0285 488B5590 		movq	-112(%rbp), %rdx
 1447 0289 48895008 		movq	%rdx, 8(%rax)
 399:/usr/include/c++/4.9/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = __new_start + __len;
 1448              		.loc 8 399 0 discriminator 2
 1449 028d 488B4598 		movq	-104(%rbp), %rax
 1450 0291 48C1E003 		salq	$3, %rax
 1451 0295 488D14C5 		leaq	0(,%rax,8), %rdx
 1451      00000000 
 1452 029d 4829C2   		subq	%rax, %rdx
 1453 02a0 488B45A8 		movq	-88(%rbp), %rax
 1454 02a4 4801C2   		addq	%rax, %rdx
 1455 02a7 488B4588 		movq	-120(%rbp), %rax
 1456 02ab 48895010 		movq	%rdx, 16(%rax)
 1457              	.LBE15:
 1458              	.LBE13:
 1459              	.LBE12:
 400:/usr/include/c++/4.9/bits/vector.tcc **** 	}
 401:/usr/include/c++/4.9/bits/vector.tcc ****     }
 1460              		.loc 8 401 0 discriminator 2
 1461 02af E9A50000 		jmp	.L68
 1461      00
 1462              	.L77:
 1463 02b4 4889C3   		movq	%rax, %rbx
 1464              	.LBB19:
 1465              	.LBB18:
 1466              	.LBB16:
 343:/usr/include/c++/4.9/bits/vector.tcc **** #else
 1467              		.loc 8 343 0
 1468 02b7 488D45B0 		leaq	-80(%rbp), %rax
 1469 02bb 4889C7   		movq	%rax, %rdi
 1470 02be E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 1470      00
 1471 02c3 4889D8   		movq	%rbx, %rax
 1472 02c6 4889C7   		movq	%rax, %rdi
 1473              	.LEHB32:
 1474 02c9 E8000000 		call	_Unwind_Resume@PLT
 1474      00
 1475              	.LEHE32:
 1476              	.L79:
 1477 02ce 4889C3   		movq	%rax, %rbx
 1478              	.LBE16:
 1479              	.LBB17:
 382:/usr/include/c++/4.9/bits/vector.tcc **** 	    {
 1480              		.loc 8 382 0
 1481 02d1 E8000000 		call	__cxa_end_catch@PLT
 1481      00
 1482 02d6 4889D8   		movq	%rbx, %rax
 1483 02d9 4889C7   		movq	%rax, %rdi
 1484              	.LEHB33:
 1485 02dc E8000000 		call	_Unwind_Resume@PLT
 1485      00
 1486              	.LEHE33:
 1487              	.L78:
 1488 02e1 4889C7   		movq	%rax, %rdi
 1489 02e4 E8000000 		call	__cxa_begin_catch@PLT
 1489      00
 384:/usr/include/c++/4.9/bits/vector.tcc **** 		_Alloc_traits::destroy(this->_M_impl,
 1490              		.loc 8 384 0
 1491 02e9 48837D90 		cmpq	$0, -112(%rbp)
 1491      00
 1492 02ee 752B     		jne	.L74
 386:/usr/include/c++/4.9/bits/vector.tcc **** 	      else
 1493              		.loc 8 386 0
 1494 02f0 488B45A0 		movq	-96(%rbp), %rax
 1495 02f4 48C1E003 		salq	$3, %rax
 1496 02f8 488D14C5 		leaq	0(,%rax,8), %rdx
 1496      00000000 
 1497 0300 4829C2   		subq	%rax, %rdx
 1498 0303 488B45A8 		movq	-88(%rbp), %rax
 1499 0307 4801C2   		addq	%rax, %rdx
 1500 030a 488B4588 		movq	-120(%rbp), %rax
 385:/usr/include/c++/4.9/bits/vector.tcc **** 		                       __new_start + __elems_before);
 1501              		.loc 8 385 0
 1502 030e 4889D6   		movq	%rdx, %rsi
 1503 0311 4889C7   		movq	%rax, %rdi
 1504              	.LEHB34:
 1505 0314 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_@PLT
 1505      00
 1506 0319 EB22     		jmp	.L75
 1507              	.L74:
 388:/usr/include/c++/4.9/bits/vector.tcc **** 	      _M_deallocate(__new_start, __len);
 1508              		.loc 8 388 0
 1509 031b 488B4588 		movq	-120(%rbp), %rax
 1510 031f 4889C7   		movq	%rax, %rdi
 1511 0322 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1511      00
 1512 0327 4889C2   		movq	%rax, %rdx
 1513 032a 488B4D90 		movq	-112(%rbp), %rcx
 1514 032e 488B45A8 		movq	-88(%rbp), %rax
 1515 0332 4889CE   		movq	%rcx, %rsi
 1516 0335 4889C7   		movq	%rax, %rdi
 1517 0338 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E@PLT
 1517      00
 1518              	.L75:
 389:/usr/include/c++/4.9/bits/vector.tcc **** 	      __throw_exception_again;
 1519              		.loc 8 389 0
 1520 033d 488B4588 		movq	-120(%rbp), %rax
 1521 0341 488B5598 		movq	-104(%rbp), %rdx
 1522 0345 488B4DA8 		movq	-88(%rbp), %rcx
 1523 0349 4889CE   		movq	%rcx, %rsi
 1524 034c 4889C7   		movq	%rax, %rdi
 1525 034f E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m@PLT
 1525      00
 390:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 1526              		.loc 8 390 0
 1527 0354 E8000000 		call	__cxa_rethrow@PLT
 1527      00
 1528              	.LEHE34:
 1529              	.L68:
 1530              	.LBE17:
 1531              	.LBE18:
 1532              	.LBE19:
 1533              		.loc 8 401 0
 1534 0359 488B45E8 		movq	-24(%rbp), %rax
 1535 035d 64483304 		xorq	%fs:40, %rax
 1535      25280000 
 1535      00
 1536 0366 7405     		je	.L76
 1537 0368 E8000000 		call	__stack_chk_fail@PLT
 1537      00
 1538              	.L76:
 1539 036d 4883EC80 		subq	$-128, %rsp
 1540 0371 5B       		popq	%rbx
 1541 0372 415C     		popq	%r12
 1542 0374 5D       		popq	%rbp
 1543              		.cfi_def_cfa 7, 8
 1544 0375 C3       		ret
 1545              		.cfi_endproc
 1546              	.LFE917:
 1547              		.section	.gcc_except_table
 1548 007b 00       		.align 4
 1549              	.LLSDA917:
 1550 007c FF       		.byte	0xff
 1551 007d 9B       		.byte	0x9b
 1552 007e 35       		.uleb128 .LLSDATT917-.LLSDATTD917
 1553              	.LLSDATTD917:
 1554 007f 01       		.byte	0x1
 1555 0080 2B       		.uleb128 .LLSDACSE917-.LLSDACSB917
 1556              	.LLSDACSB917:
 1557 0081 60       		.uleb128 .LEHB27-.LFB917
 1558 0082 2F       		.uleb128 .LEHE27-.LEHB27
 1559 0083 00       		.uleb128 0
 1560 0084 00       		.uleb128 0
 1561 0085 AE01     		.uleb128 .LEHB28-.LFB917
 1562 0087 34       		.uleb128 .LEHE28-.LEHB28
 1563 0088 B405     		.uleb128 .L77-.LFB917
 1564 008a 00       		.uleb128 0
 1565 008b E901     		.uleb128 .LEHB29-.LFB917
 1566 008d 60       		.uleb128 .LEHE29-.LEHB29
 1567 008e 00       		.uleb128 0
 1568 008f 00       		.uleb128 0
 1569 0090 8103     		.uleb128 .LEHB30-.LFB917
 1570 0092 8201     		.uleb128 .LEHE30-.LEHB30
 1571 0094 E105     		.uleb128 .L78-.LFB917
 1572 0096 01       		.uleb128 0x1
 1573 0097 8E04     		.uleb128 .LEHB31-.LFB917
 1574 0099 68       		.uleb128 .LEHE31-.LEHB31
 1575 009a 00       		.uleb128 0
 1576 009b 00       		.uleb128 0
 1577 009c C905     		.uleb128 .LEHB32-.LFB917
 1578 009e 05       		.uleb128 .LEHE32-.LEHB32
 1579 009f 00       		.uleb128 0
 1580 00a0 00       		.uleb128 0
 1581 00a1 DC05     		.uleb128 .LEHB33-.LFB917
 1582 00a3 05       		.uleb128 .LEHE33-.LEHB33
 1583 00a4 00       		.uleb128 0
 1584 00a5 00       		.uleb128 0
 1585 00a6 9406     		.uleb128 .LEHB34-.LFB917
 1586 00a8 45       		.uleb128 .LEHE34-.LEHB34
 1587 00a9 CE05     		.uleb128 .L79-.LFB917
 1588 00ab 00       		.uleb128 0
 1589              	.LLSDACSE917:
 1590 00ac 01       		.byte	0x1
 1591 00ad 00       		.byte	0
 1592 00ae 0000     		.align 4
 1593 00b0 00000000 		.long	0
 1594              	
 1595              	.LLSDATT917:
 1596              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__
 1598              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv,"axG",@progbits,_ZNSt6ve
 1599              		.align 2
 1600              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
 1602              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:
 1603              	.LFB922:
 565:/usr/include/c++/4.9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1604              		.loc 5 565 0
 1605              		.cfi_startproc
 1606 0000 55       		pushq	%rbp
 1607              		.cfi_def_cfa_offset 16
 1608              		.cfi_offset 6, -16
 1609 0001 4889E5   		movq	%rsp, %rbp
 1610              		.cfi_def_cfa_register 6
 1611 0004 4883EC20 		subq	$32, %rsp
 1612 0008 48897DE8 		movq	%rdi, -24(%rbp)
 565:/usr/include/c++/4.9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1613              		.loc 5 565 0
 1614 000c 64488B04 		movq	%fs:40, %rax
 1614      25280000 
 1614      00
 1615 0015 488945F8 		movq	%rax, -8(%rbp)
 1616 0019 31C0     		xorl	%eax, %eax
 566:/usr/include/c++/4.9/bits/stl_vector.h **** 
 1617              		.loc 5 566 0
 1618 001b 488B45E8 		movq	-24(%rbp), %rax
 1619 001f 488D5008 		leaq	8(%rax), %rdx
 1620 0023 488D45F0 		leaq	-16(%rbp), %rax
 1621 0027 4889D6   		movq	%rdx, %rsi
 1622 002a 4889C7   		movq	%rax, %rdi
 1623 002d E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 1623      00
 1624 0032 488B45F0 		movq	-16(%rbp), %rax
 1625 0036 488B4DF8 		movq	-8(%rbp), %rcx
 1626 003a 6448330C 		xorq	%fs:40, %rcx
 1626      25280000 
 1626      00
 1627 0043 7405     		je	.L82
 1628 0045 E8000000 		call	__stack_chk_fail@PLT
 1628      00
 1629              	.L82:
 1630 004a C9       		leave
 1631              		.cfi_def_cfa 7, 8
 1632 004b C3       		ret
 1633              		.cfi_endproc
 1634              	.LFE922:
 1636              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 1637              		.align 2
 1638              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl
 1640              	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl:
 1641              	.LFB923:
 1642              		.file 9 "/usr/include/c++/4.9/bits/stl_iterator.h"
   1:/usr/include/c++/4.9/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/4.9/bits/stl_iterator.h **** 
   3:/usr/include/c++/4.9/bits/stl_iterator.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/stl_iterator.h **** //
   5:/usr/include/c++/4.9/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/stl_iterator.h **** // any later version.
  10:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  11:/usr/include/c++/4.9/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  16:/usr/include/c++/4.9/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  20:/usr/include/c++/4.9/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  25:/usr/include/c++/4.9/bits/stl_iterator.h **** /*
  26:/usr/include/c++/4.9/bits/stl_iterator.h ****  *
  27:/usr/include/c++/4.9/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.9/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.9/bits/stl_iterator.h ****  *
  30:/usr/include/c++/4.9/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.9/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.9/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.9/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.9/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.9/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.9/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.9/bits/stl_iterator.h ****  *
  38:/usr/include/c++/4.9/bits/stl_iterator.h ****  *
  39:/usr/include/c++/4.9/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/4.9/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.9/bits/stl_iterator.h ****  *
  42:/usr/include/c++/4.9/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.9/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.9/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.9/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.9/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.9/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.9/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.9/bits/stl_iterator.h ****  */
  50:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  51:/usr/include/c++/4.9/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/c++/4.9/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.9/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/4.9/bits/stl_iterator.h ****  *
  55:/usr/include/c++/4.9/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/c++/4.9/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/c++/4.9/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/c++/4.9/bits/stl_iterator.h ****  */
  59:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  60:/usr/include/c++/4.9/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/c++/4.9/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  63:/usr/include/c++/4.9/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/c++/4.9/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/usr/include/c++/4.9/bits/stl_iterator.h **** #include <bits/move.h>
  66:/usr/include/c++/4.9/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  67:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  68:/usr/include/c++/4.9/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  69:/usr/include/c++/4.9/bits/stl_iterator.h **** {
  70:/usr/include/c++/4.9/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  71:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  72:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
  73:/usr/include/c++/4.9/bits/stl_iterator.h ****    * @addtogroup iterators
  74:/usr/include/c++/4.9/bits/stl_iterator.h ****    * @{
  75:/usr/include/c++/4.9/bits/stl_iterator.h ****    */
  76:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  77:/usr/include/c++/4.9/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  78:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
  79:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  80:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  81:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  82:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  83:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  84:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @code
  85:/usr/include/c++/4.9/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  86:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @endcode
  87:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
  88:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  89:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  90:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  91:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
  92:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
  93:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
  94:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
  95:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
  96:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
  97:/usr/include/c++/4.9/bits/stl_iterator.h ****     class reverse_iterator
  98:/usr/include/c++/4.9/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
  99:/usr/include/c++/4.9/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 100:/usr/include/c++/4.9/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 101:/usr/include/c++/4.9/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 102:/usr/include/c++/4.9/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 103:/usr/include/c++/4.9/bits/stl_iterator.h ****     {
 104:/usr/include/c++/4.9/bits/stl_iterator.h ****     protected:
 105:/usr/include/c++/4.9/bits/stl_iterator.h ****       _Iterator current;
 106:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 107:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 108:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 109:/usr/include/c++/4.9/bits/stl_iterator.h ****     public:
 110:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 111:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 112:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 113:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 114:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 115:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 116:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 117:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 118:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 119:/usr/include/c++/4.9/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 120:/usr/include/c++/4.9/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 121:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 122:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 123:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 124:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 125:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 126:/usr/include/c++/4.9/bits/stl_iterator.h ****       explicit
 127:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 128:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 129:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 130:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The copy constructor is normal.
 131:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 132:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 133:/usr/include/c++/4.9/bits/stl_iterator.h ****       : current(__x.current) { }
 134:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 135:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 136:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 137:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 138:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 139:/usr/include/c++/4.9/bits/stl_iterator.h ****       template<typename _Iter>
 140:/usr/include/c++/4.9/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 141:/usr/include/c++/4.9/bits/stl_iterator.h **** 	: current(__x.base()) { }
 142:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 143:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 144:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 145:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 146:/usr/include/c++/4.9/bits/stl_iterator.h ****       iterator_type
 147:/usr/include/c++/4.9/bits/stl_iterator.h ****       base() const
 148:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return current; }
 149:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 150:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 151:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 152:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 153:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 154:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 155:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 156:/usr/include/c++/4.9/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 157:/usr/include/c++/4.9/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 158:/usr/include/c++/4.9/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 159:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 160:/usr/include/c++/4.9/bits/stl_iterator.h ****       reference
 161:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator*() const
 162:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 163:/usr/include/c++/4.9/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 164:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *--__tmp;
 165:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 166:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 167:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 168:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 169:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 170:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 171:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 172:/usr/include/c++/4.9/bits/stl_iterator.h ****       pointer
 173:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator->() const
 174:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return &(operator*()); }
 175:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 176:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 177:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  @c *this
 178:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 179:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 180:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 181:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator&
 182:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++()
 183:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 184:/usr/include/c++/4.9/bits/stl_iterator.h **** 	--current;
 185:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 186:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 187:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 188:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 189:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 190:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 191:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 192:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 193:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator
 194:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++(int)
 195:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 196:/usr/include/c++/4.9/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 197:/usr/include/c++/4.9/bits/stl_iterator.h **** 	--current;
 198:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return __tmp;
 199:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 200:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 201:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 202:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  @c *this
 203:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 204:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 205:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 206:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator&
 207:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator--()
 208:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 209:/usr/include/c++/4.9/bits/stl_iterator.h **** 	++current;
 210:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 211:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 212:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 213:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 214:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 215:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 216:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 217:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 218:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator
 219:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator--(int)
 220:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 221:/usr/include/c++/4.9/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 222:/usr/include/c++/4.9/bits/stl_iterator.h **** 	++current;
 223:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return __tmp;
 224:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 225:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 226:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 227:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 228:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 229:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 230:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 231:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator
 232:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator+(difference_type __n) const
 233:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 234:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 235:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 236:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  *this
 237:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 238:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 239:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 240:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 241:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator&
 242:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator+=(difference_type __n)
 243:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 244:/usr/include/c++/4.9/bits/stl_iterator.h **** 	current -= __n;
 245:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 246:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 247:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 248:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 249:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 250:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 251:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 252:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 253:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator
 254:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator-(difference_type __n) const
 255:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 256:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 257:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 258:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  *this
 259:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 260:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 261:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 262:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 263:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator&
 264:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator-=(difference_type __n)
 265:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 266:/usr/include/c++/4.9/bits/stl_iterator.h **** 	current += __n;
 267:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 268:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 269:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 270:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 271:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 272:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 273:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 274:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 275:/usr/include/c++/4.9/bits/stl_iterator.h ****       reference
 276:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator[](difference_type __n) const
 277:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *(*this + __n); }
 278:/usr/include/c++/4.9/bits/stl_iterator.h ****     };
 279:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 280:/usr/include/c++/4.9/bits/stl_iterator.h ****   //@{
 281:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
 282:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 283:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 284:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @return  A simple bool.
 285:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 286:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 287:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 288:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 289:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
 290:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 291:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 292:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 293:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 294:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 295:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 296:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 297:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 298:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 299:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 300:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 301:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 302:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 303:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 304:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 305:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 306:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return !(__x == __y); }
 307:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 308:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 309:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 310:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 311:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 312:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __y < __x; }
 313:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 314:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 315:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 316:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 317:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 318:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return !(__y < __x); }
 319:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 320:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 321:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 322:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 323:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 324:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return !(__x < __y); }
 325:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 326:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 327:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 328:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 329:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 330:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 331:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 332:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 333:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline reverse_iterator<_Iterator>
 334:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 335:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 336:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 337:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 338:/usr/include/c++/4.9/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 339:/usr/include/c++/4.9/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 340:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 341:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 342:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 343:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 344:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 345:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 346:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 347:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 348:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 349:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 350:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 351:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 352:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 353:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 354:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 355:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 356:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return !(__x == __y); }
 357:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 358:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 359:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 360:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 361:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 362:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __y < __x; }
 363:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 364:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 365:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 366:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 367:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 368:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return !(__y < __x); }
 369:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 370:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 371:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 372:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 373:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 374:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return !(__x < __y); }
 375:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 376:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 377:/usr/include/c++/4.9/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 378:/usr/include/c++/4.9/bits/stl_iterator.h ****     // DR 685.
 379:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline auto
 380:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 381:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 382:/usr/include/c++/4.9/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 383:/usr/include/c++/4.9/bits/stl_iterator.h **** #else
 384:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 385:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 386:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 387:/usr/include/c++/4.9/bits/stl_iterator.h **** #endif
 388:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 389:/usr/include/c++/4.9/bits/stl_iterator.h ****   //@}
 390:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 391:/usr/include/c++/4.9/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 392:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
 393:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 394:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 395:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 396:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 397:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  push_back.
 398:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 399:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 400:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  save typing.
 401:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
 402:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Container>
 403:/usr/include/c++/4.9/bits/stl_iterator.h ****     class back_insert_iterator
 404:/usr/include/c++/4.9/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 405:/usr/include/c++/4.9/bits/stl_iterator.h ****     {
 406:/usr/include/c++/4.9/bits/stl_iterator.h ****     protected:
 407:/usr/include/c++/4.9/bits/stl_iterator.h ****       _Container* container;
 408:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 409:/usr/include/c++/4.9/bits/stl_iterator.h ****     public:
 410:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 411:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef _Container          container_type;
 412:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 413:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 414:/usr/include/c++/4.9/bits/stl_iterator.h ****       explicit
 415:/usr/include/c++/4.9/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x) : container(&__x) { }
 416:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 417:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 418:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 419:/usr/include/c++/4.9/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 420:/usr/include/c++/4.9/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 421:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 422:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 423:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 424:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 425:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 426:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 427:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 428:/usr/include/c++/4.9/bits/stl_iterator.h **** #if __cplusplus < 201103L
 429:/usr/include/c++/4.9/bits/stl_iterator.h ****       back_insert_iterator&
 430:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 431:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 432:/usr/include/c++/4.9/bits/stl_iterator.h **** 	container->push_back(__value);
 433:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 434:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 435:/usr/include/c++/4.9/bits/stl_iterator.h **** #else
 436:/usr/include/c++/4.9/bits/stl_iterator.h ****       back_insert_iterator&
 437:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 438:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 439:/usr/include/c++/4.9/bits/stl_iterator.h **** 	container->push_back(__value);
 440:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 441:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 442:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 443:/usr/include/c++/4.9/bits/stl_iterator.h ****       back_insert_iterator&
 444:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 445:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 446:/usr/include/c++/4.9/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 447:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 448:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 449:/usr/include/c++/4.9/bits/stl_iterator.h **** #endif
 450:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 451:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.
 452:/usr/include/c++/4.9/bits/stl_iterator.h ****       back_insert_iterator&
 453:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator*()
 454:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 455:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 456:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 457:/usr/include/c++/4.9/bits/stl_iterator.h ****       back_insert_iterator&
 458:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++()
 459:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 460:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 461:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 462:/usr/include/c++/4.9/bits/stl_iterator.h ****       back_insert_iterator
 463:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++(int)
 464:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 465:/usr/include/c++/4.9/bits/stl_iterator.h ****     };
 466:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 467:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
 468:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 469:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 470:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 471:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 472:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 473:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 474:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 475:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 476:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  types for you.
 477:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
 478:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Container>
 479:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 480:/usr/include/c++/4.9/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 481:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 482:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 483:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
 484:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 485:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 486:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 487:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 488:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  push_front.
 489:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 490:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 491:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  save typing.
 492:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
 493:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Container>
 494:/usr/include/c++/4.9/bits/stl_iterator.h ****     class front_insert_iterator
 495:/usr/include/c++/4.9/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 496:/usr/include/c++/4.9/bits/stl_iterator.h ****     {
 497:/usr/include/c++/4.9/bits/stl_iterator.h ****     protected:
 498:/usr/include/c++/4.9/bits/stl_iterator.h ****       _Container* container;
 499:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 500:/usr/include/c++/4.9/bits/stl_iterator.h ****     public:
 501:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 502:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef _Container          container_type;
 503:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 504:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 505:/usr/include/c++/4.9/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x) : container(&__x) { }
 506:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 507:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 508:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 509:/usr/include/c++/4.9/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 510:/usr/include/c++/4.9/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 511:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 512:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 513:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 514:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 515:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 516:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 517:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 518:/usr/include/c++/4.9/bits/stl_iterator.h **** #if __cplusplus < 201103L
 519:/usr/include/c++/4.9/bits/stl_iterator.h ****       front_insert_iterator&
 520:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 521:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 522:/usr/include/c++/4.9/bits/stl_iterator.h **** 	container->push_front(__value);
 523:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 524:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 525:/usr/include/c++/4.9/bits/stl_iterator.h **** #else
 526:/usr/include/c++/4.9/bits/stl_iterator.h ****       front_insert_iterator&
 527:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 528:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 529:/usr/include/c++/4.9/bits/stl_iterator.h **** 	container->push_front(__value);
 530:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 531:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 532:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 533:/usr/include/c++/4.9/bits/stl_iterator.h ****       front_insert_iterator&
 534:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 535:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 536:/usr/include/c++/4.9/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 537:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 538:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 539:/usr/include/c++/4.9/bits/stl_iterator.h **** #endif
 540:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 541:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.
 542:/usr/include/c++/4.9/bits/stl_iterator.h ****       front_insert_iterator&
 543:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator*()
 544:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 545:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 546:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 547:/usr/include/c++/4.9/bits/stl_iterator.h ****       front_insert_iterator&
 548:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++()
 549:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 550:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 551:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 552:/usr/include/c++/4.9/bits/stl_iterator.h ****       front_insert_iterator
 553:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++(int)
 554:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 555:/usr/include/c++/4.9/bits/stl_iterator.h ****     };
 556:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 557:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
 558:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 559:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 560:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 561:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 562:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 563:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 564:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 565:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 566:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  types for you.
 567:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
 568:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Container>
 569:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 570:/usr/include/c++/4.9/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 571:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 572:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 573:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
 574:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 575:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 576:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 577:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 578:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 579:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  position.
 580:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 581:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 582:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  %iterator's position.)
 583:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 584:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 585:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  save typing.
 586:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
 587:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Container>
 588:/usr/include/c++/4.9/bits/stl_iterator.h ****     class insert_iterator
 589:/usr/include/c++/4.9/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 590:/usr/include/c++/4.9/bits/stl_iterator.h ****     {
 591:/usr/include/c++/4.9/bits/stl_iterator.h ****     protected:
 592:/usr/include/c++/4.9/bits/stl_iterator.h ****       _Container* container;
 593:/usr/include/c++/4.9/bits/stl_iterator.h ****       typename _Container::iterator iter;
 594:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 595:/usr/include/c++/4.9/bits/stl_iterator.h ****     public:
 596:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 597:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef _Container          container_type;
 598:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 599:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 600:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 601:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 602:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 603:/usr/include/c++/4.9/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 604:/usr/include/c++/4.9/bits/stl_iterator.h ****       : container(&__x), iter(__i) {}
 605:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 606:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 607:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 608:/usr/include/c++/4.9/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 609:/usr/include/c++/4.9/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 610:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 611:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 612:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 613:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 614:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 615:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 616:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 617:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 618:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @code
 619:/usr/include/c++/4.9/bits/stl_iterator.h ****        *     // vector v contains A and Z
 620:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 621:/usr/include/c++/4.9/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 622:/usr/include/c++/4.9/bits/stl_iterator.h ****        *     i = 1;
 623:/usr/include/c++/4.9/bits/stl_iterator.h ****        *     i = 2;
 624:/usr/include/c++/4.9/bits/stl_iterator.h ****        *     i = 3;
 625:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 626:/usr/include/c++/4.9/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 627:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @endcode
 628:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 629:/usr/include/c++/4.9/bits/stl_iterator.h **** #if __cplusplus < 201103L
 630:/usr/include/c++/4.9/bits/stl_iterator.h ****       insert_iterator&
 631:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 632:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 633:/usr/include/c++/4.9/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 634:/usr/include/c++/4.9/bits/stl_iterator.h **** 	++iter;
 635:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 636:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 637:/usr/include/c++/4.9/bits/stl_iterator.h **** #else
 638:/usr/include/c++/4.9/bits/stl_iterator.h ****       insert_iterator&
 639:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 640:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 641:/usr/include/c++/4.9/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 642:/usr/include/c++/4.9/bits/stl_iterator.h **** 	++iter;
 643:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 644:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 645:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 646:/usr/include/c++/4.9/bits/stl_iterator.h ****       insert_iterator&
 647:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 648:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 649:/usr/include/c++/4.9/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 650:/usr/include/c++/4.9/bits/stl_iterator.h **** 	++iter;
 651:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 652:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 653:/usr/include/c++/4.9/bits/stl_iterator.h **** #endif
 654:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 655:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.
 656:/usr/include/c++/4.9/bits/stl_iterator.h ****       insert_iterator&
 657:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator*()
 658:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 659:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 660:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 661:/usr/include/c++/4.9/bits/stl_iterator.h ****       insert_iterator&
 662:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++()
 663:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 664:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 665:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 666:/usr/include/c++/4.9/bits/stl_iterator.h ****       insert_iterator&
 667:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++(int)
 668:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 669:/usr/include/c++/4.9/bits/stl_iterator.h ****     };
 670:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 671:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
 672:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 673:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 674:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 675:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 676:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 677:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 678:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 679:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 680:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  types for you.
 681:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
 682:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 683:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 684:/usr/include/c++/4.9/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 685:/usr/include/c++/4.9/bits/stl_iterator.h ****     {
 686:/usr/include/c++/4.9/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 687:/usr/include/c++/4.9/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 688:/usr/include/c++/4.9/bits/stl_iterator.h ****     }
 689:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 690:/usr/include/c++/4.9/bits/stl_iterator.h ****   // @} group iterators
 691:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 692:/usr/include/c++/4.9/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 693:/usr/include/c++/4.9/bits/stl_iterator.h **** } // namespace
 694:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 695:/usr/include/c++/4.9/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 696:/usr/include/c++/4.9/bits/stl_iterator.h **** {
 697:/usr/include/c++/4.9/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 698:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 699:/usr/include/c++/4.9/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 700:/usr/include/c++/4.9/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 701:/usr/include/c++/4.9/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 702:/usr/include/c++/4.9/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 703:/usr/include/c++/4.9/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 704:/usr/include/c++/4.9/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 705:/usr/include/c++/4.9/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 706:/usr/include/c++/4.9/bits/stl_iterator.h ****   using std::iterator_traits;
 707:/usr/include/c++/4.9/bits/stl_iterator.h ****   using std::iterator;
 708:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 709:/usr/include/c++/4.9/bits/stl_iterator.h ****     class __normal_iterator
 710:/usr/include/c++/4.9/bits/stl_iterator.h ****     {
 711:/usr/include/c++/4.9/bits/stl_iterator.h ****     protected:
 712:/usr/include/c++/4.9/bits/stl_iterator.h ****       _Iterator _M_current;
 713:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 714:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 715:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 716:/usr/include/c++/4.9/bits/stl_iterator.h ****     public:
 717:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 718:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 719:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 720:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 721:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 722:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 723:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 724:/usr/include/c++/4.9/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 725:/usr/include/c++/4.9/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
 726:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 727:/usr/include/c++/4.9/bits/stl_iterator.h ****       explicit
 728:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 729:/usr/include/c++/4.9/bits/stl_iterator.h ****       : _M_current(__i) { }
 730:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 731:/usr/include/c++/4.9/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 732:/usr/include/c++/4.9/bits/stl_iterator.h ****       template<typename _Iter>
 733:/usr/include/c++/4.9/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 734:/usr/include/c++/4.9/bits/stl_iterator.h **** 			  typename __enable_if<
 735:/usr/include/c++/4.9/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 736:/usr/include/c++/4.9/bits/stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 737:/usr/include/c++/4.9/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 738:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 739:/usr/include/c++/4.9/bits/stl_iterator.h ****       // Forward iterator requirements
 740:/usr/include/c++/4.9/bits/stl_iterator.h ****       reference
 741:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 742:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *_M_current; }
 743:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 744:/usr/include/c++/4.9/bits/stl_iterator.h ****       pointer
 745:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 746:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return _M_current; }
 747:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 748:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator&
 749:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
 750:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 751:/usr/include/c++/4.9/bits/stl_iterator.h **** 	++_M_current;
 752:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 753:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 754:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 755:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator
 756:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 757:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 758:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 759:/usr/include/c++/4.9/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 760:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator&
 761:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
 762:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 763:/usr/include/c++/4.9/bits/stl_iterator.h **** 	--_M_current;
 764:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 765:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 766:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 767:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator
 768:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 769:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 770:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 771:/usr/include/c++/4.9/bits/stl_iterator.h ****       // Random access iterator requirements
 772:/usr/include/c++/4.9/bits/stl_iterator.h ****       reference
 773:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 774:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return _M_current[__n]; }
 775:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 776:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator&
 777:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 778:/usr/include/c++/4.9/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 779:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 780:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator
 781:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 782:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 783:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 784:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator&
 785:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 786:/usr/include/c++/4.9/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
 787:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 788:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator
 789:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 1643              		.loc 9 789 0
 1644              		.cfi_startproc
 1645 0000 55       		pushq	%rbp
 1646              		.cfi_def_cfa_offset 16
 1647              		.cfi_offset 6, -16
 1648 0001 4889E5   		movq	%rsp, %rbp
 1649              		.cfi_def_cfa_register 6
 1650 0004 4883EC30 		subq	$48, %rsp
 1651 0008 48897DD8 		movq	%rdi, -40(%rbp)
 1652 000c 488975D0 		movq	%rsi, -48(%rbp)
 1653              		.loc 9 789 0
 1654 0010 64488B04 		movq	%fs:40, %rax
 1654      25280000 
 1654      00
 1655 0019 488945F8 		movq	%rax, -8(%rbp)
 1656 001d 31C0     		xorl	%eax, %eax
 790:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 1657              		.loc 9 790 0
 1658 001f 488B45D8 		movq	-40(%rbp), %rax
 1659 0023 488B10   		movq	(%rax), %rdx
 1660 0026 488B45D0 		movq	-48(%rbp), %rax
 1661 002a 48C1E003 		salq	$3, %rax
 1662 002e 488D0CC5 		leaq	0(,%rax,8), %rcx
 1662      00000000 
 1663 0036 4829C1   		subq	%rax, %rcx
 1664 0039 4889C8   		movq	%rcx, %rax
 1665 003c 48F7D8   		negq	%rax
 1666 003f 4801D0   		addq	%rdx, %rax
 1667 0042 488945F0 		movq	%rax, -16(%rbp)
 1668 0046 488D55F0 		leaq	-16(%rbp), %rdx
 1669 004a 488D45E0 		leaq	-32(%rbp), %rax
 1670 004e 4889D6   		movq	%rdx, %rsi
 1671 0051 4889C7   		movq	%rax, %rdi
 1672 0054 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 1672      00
 1673 0059 488B45E0 		movq	-32(%rbp), %rax
 1674 005d 488B75F8 		movq	-8(%rbp), %rsi
 1675 0061 64483334 		xorq	%fs:40, %rsi
 1675      25280000 
 1675      00
 1676 006a 7405     		je	.L85
 1677 006c E8000000 		call	__stack_chk_fail@PLT
 1677      00
 1678              	.L85:
 1679 0071 C9       		leave
 1680              		.cfi_def_cfa 7, 8
 1681 0072 C3       		ret
 1682              		.cfi_endproc
 1683              	.LFE923:
 1685              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 1686              		.align 2
 1687              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 1689              	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:
 1690              	.LFB924:
 741:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *_M_current; }
 1691              		.loc 9 741 0
 1692              		.cfi_startproc
 1693 0000 55       		pushq	%rbp
 1694              		.cfi_def_cfa_offset 16
 1695              		.cfi_offset 6, -16
 1696 0001 4889E5   		movq	%rsp, %rbp
 1697              		.cfi_def_cfa_register 6
 1698 0004 48897DF8 		movq	%rdi, -8(%rbp)
 742:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 1699              		.loc 9 742 0
 1700 0008 488B45F8 		movq	-8(%rbp), %rax
 1701 000c 488B00   		movq	(%rax), %rax
 1702 000f 5D       		popq	%rbp
 1703              		.cfi_def_cfa 7, 8
 1704 0010 C3       		ret
 1705              		.cfi_endproc
 1706              	.LFE924:
 1708              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_,"axG",
 1709              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_
 1711              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_:
 1712              	.LFB931:
 188:/usr/include/c++/4.9/ext/alloc_traits.h ****       { __a.construct(__p, __arg); }
 1713              		.loc 7 188 0
 1714              		.cfi_startproc
 1715 0000 55       		pushq	%rbp
 1716              		.cfi_def_cfa_offset 16
 1717              		.cfi_offset 6, -16
 1718 0001 4889E5   		movq	%rsp, %rbp
 1719              		.cfi_def_cfa_register 6
 1720 0004 4883EC20 		subq	$32, %rsp
 1721 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1722 000c 488975F0 		movq	%rsi, -16(%rbp)
 1723 0010 488955E8 		movq	%rdx, -24(%rbp)
 1724              		.loc 7 189 0
 1725 0014 488B55E8 		movq	-24(%rbp), %rdx
 1726 0018 488B4DF0 		movq	-16(%rbp), %rcx
 1727 001c 488B45F8 		movq	-8(%rbp), %rax
 1728 0020 4889CE   		movq	%rcx, %rsi
 1729 0023 4889C7   		movq	%rax, %rdi
 1730 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE9constructEPS2_RKS2_@PLT
 1730      00
 1731 002b C9       		leave
 1732              		.cfi_def_cfa 7, 8
 1733 002c C3       		ret
 1734              		.cfi_endproc
 1735              	.LFE931:
 1737              		.section	.text._ZNSt4pairIiSsEC2ERKS0_,"axG",@progbits,_ZNSt4pairIiSsEC5ERKS0_,comdat
 1738              		.align 2
 1739              		.weak	_ZNSt4pairIiSsEC2ERKS0_
 1741              	_ZNSt4pairIiSsEC2ERKS0_:
 1742              	.LFB934:
  96:/usr/include/c++/4.9/bits/stl_pair.h ****     {
 1743              		.loc 4 96 0
 1744              		.cfi_startproc
 1745 0000 55       		pushq	%rbp
 1746              		.cfi_def_cfa_offset 16
 1747              		.cfi_offset 6, -16
 1748 0001 4889E5   		movq	%rsp, %rbp
 1749              		.cfi_def_cfa_register 6
 1750 0004 4883EC10 		subq	$16, %rsp
 1751 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1752 000c 488975F0 		movq	%rsi, -16(%rbp)
 1753              	.LBB20:
  96:/usr/include/c++/4.9/bits/stl_pair.h ****     {
 1754              		.loc 4 96 0
 1755 0010 488B45F0 		movq	-16(%rbp), %rax
 1756 0014 8B10     		movl	(%rax), %edx
 1757 0016 488B45F8 		movq	-8(%rbp), %rax
 1758 001a 8910     		movl	%edx, (%rax)
 1759 001c 488B45F0 		movq	-16(%rbp), %rax
 1760 0020 488D5008 		leaq	8(%rax), %rdx
 1761 0024 488B45F8 		movq	-8(%rbp), %rax
 1762 0028 4883C008 		addq	$8, %rax
 1763 002c 4889D6   		movq	%rdx, %rsi
 1764 002f 4889C7   		movq	%rax, %rdi
 1765 0032 E8000000 		call	_ZNSsC1ERKSs@PLT
 1765      00
 1766              	.LBE20:
 1767 0037 C9       		leave
 1768              		.cfi_def_cfa 7, 8
 1769 0038 C3       		ret
 1770              		.cfi_endproc
 1771              	.LFE934:
 1773              		.weak	_ZNSt4pairIiSsEC1ERKS0_
 1774              		.set	_ZNSt4pairIiSsEC1ERKS0_,_ZNSt4pairIiSsEC2ERKS0_
 1775              		.section	.text._ZNSt4pairIiSsEaSERKS0_,"axG",@progbits,_ZNSt4pairIiSsEaSERKS0_,comdat
 1776              		.align 2
 1777              		.weak	_ZNSt4pairIiSsEaSERKS0_
 1779              	_ZNSt4pairIiSsEaSERKS0_:
 1780              	.LFB936:
  96:/usr/include/c++/4.9/bits/stl_pair.h ****     {
 1781              		.loc 4 96 0
 1782              		.cfi_startproc
 1783 0000 55       		pushq	%rbp
 1784              		.cfi_def_cfa_offset 16
 1785              		.cfi_offset 6, -16
 1786 0001 4889E5   		movq	%rsp, %rbp
 1787              		.cfi_def_cfa_register 6
 1788 0004 4883EC10 		subq	$16, %rsp
 1789 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1790 000c 488975F0 		movq	%rsi, -16(%rbp)
  96:/usr/include/c++/4.9/bits/stl_pair.h ****     {
 1791              		.loc 4 96 0
 1792 0010 488B45F0 		movq	-16(%rbp), %rax
 1793 0014 8B10     		movl	(%rax), %edx
 1794 0016 488B45F8 		movq	-8(%rbp), %rax
 1795 001a 8910     		movl	%edx, (%rax)
 1796 001c 488B45F0 		movq	-16(%rbp), %rax
 1797 0020 488D5008 		leaq	8(%rax), %rdx
 1798 0024 488B45F8 		movq	-8(%rbp), %rax
 1799 0028 4883C008 		addq	$8, %rax
 1800 002c 4889D6   		movq	%rdx, %rsi
 1801 002f 4889C7   		movq	%rax, %rdi
 1802 0032 E8000000 		call	_ZNSsaSERKSs@PLT
 1802      00
 1803 0037 488B45F8 		movq	-8(%rbp), %rax
 1804 003b C9       		leave
 1805              		.cfi_def_cfa 7, 8
 1806 003c C3       		ret
 1807              		.cfi_endproc
 1808              	.LFE936:
 1810              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1
 1811              		.align 2
 1812              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS
 1814              	_ZNSt6vectorISt4pairIiSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:
 1815              	.LFB932:
 326:/usr/include/c++/4.9/bits/vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 1816              		.loc 8 326 0
 1817              		.cfi_startproc
 1818              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1819              		.cfi_lsda 0x1b,.LLSDA932
 1820 0000 55       		pushq	%rbp
 1821              		.cfi_def_cfa_offset 16
 1822              		.cfi_offset 6, -16
 1823 0001 4889E5   		movq	%rsp, %rbp
 1824              		.cfi_def_cfa_register 6
 1825 0004 4154     		pushq	%r12
 1826 0006 53       		pushq	%rbx
 1827 0007 4883EC60 		subq	$96, %rsp
 1828              		.cfi_offset 12, -24
 1829              		.cfi_offset 3, -32
 1830 000b 48897DA8 		movq	%rdi, -88(%rbp)
 1831 000f 488975A0 		movq	%rsi, -96(%rbp)
 1832 0013 48895598 		movq	%rdx, -104(%rbp)
 326:/usr/include/c++/4.9/bits/vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 1833              		.loc 8 326 0
 1834 0017 64488B04 		movq	%fs:40, %rax
 1834      25280000 
 1834      00
 1835 0020 488945E8 		movq	%rax, -24(%rbp)
 1836 0024 31C0     		xorl	%eax, %eax
 1837              	.LBB21:
 1838              	.LBB22:
 330:/usr/include/c++/4.9/bits/vector.tcc **** 	{
 1839              		.loc 8 330 0
 1840 0026 488B45A8 		movq	-88(%rbp), %rax
 1841 002a 488B5008 		movq	8(%rax), %rdx
 1842 002e 488B45A8 		movq	-88(%rbp), %rax
 1843 0032 488B4010 		movq	16(%rax), %rax
 1844 0036 4839C2   		cmpq	%rax, %rdx
 1845 0039 0F84AE00 		je	.L93
 1845      0000
 1846              	.LBB23:
 334:/usr/include/c++/4.9/bits/vector.tcc **** 	  ++this->_M_impl._M_finish;
 1847              		.loc 8 334 0
 1848 003f 488B45A8 		movq	-88(%rbp), %rax
 1849 0043 488B4008 		movq	8(%rax), %rax
 1850 0047 488D50F0 		leaq	-16(%rax), %rdx
 1851 004b 488B45A8 		movq	-88(%rbp), %rax
 1852 004f 488B4808 		movq	8(%rax), %rcx
 1853 0053 488B45A8 		movq	-88(%rbp), %rax
 332:/usr/include/c++/4.9/bits/vector.tcc **** 			           _GLIBCXX_MOVE(*(this->_M_impl._M_finish
 1854              		.loc 8 332 0
 1855 0057 4889CE   		movq	%rcx, %rsi
 1856 005a 4889C7   		movq	%rax, %rdi
 1857              	.LEHB35:
 1858 005d E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_@PLT
 1858      00
 335:/usr/include/c++/4.9/bits/vector.tcc **** #if __cplusplus < 201103L
 1859              		.loc 8 335 0
 1860 0062 488B45A8 		movq	-88(%rbp), %rax
 1861 0066 488B4008 		movq	8(%rax), %rax
 1862 006a 488D5010 		leaq	16(%rax), %rdx
 1863 006e 488B45A8 		movq	-88(%rbp), %rax
 1864 0072 48895008 		movq	%rdx, 8(%rax)
 337:/usr/include/c++/4.9/bits/vector.tcc **** #endif
 1865              		.loc 8 337 0
 1866 0076 488B5598 		movq	-104(%rbp), %rdx
 1867 007a 488D45D0 		leaq	-48(%rbp), %rax
 1868 007e 4889D6   		movq	%rdx, %rsi
 1869 0081 4889C7   		movq	%rax, %rdi
 1870 0084 E8000000 		call	_ZNSt4pairIiSsEC1ERKS0_@PLT
 1870      00
 1871              	.LEHE35:
 339:/usr/include/c++/4.9/bits/vector.tcc **** 				  this->_M_impl._M_finish - 2,
 1872              		.loc 8 339 0
 1873 0089 488B45A8 		movq	-88(%rbp), %rax
 1874 008d 488B4008 		movq	8(%rax), %rax
 1875 0091 4C8D60F0 		leaq	-16(%rax), %r12
 1876 0095 488B45A8 		movq	-88(%rbp), %rax
 1877 0099 488B4008 		movq	8(%rax), %rax
 1878 009d 488D58E0 		leaq	-32(%rax), %rbx
 1879 00a1 488D45A0 		leaq	-96(%rbp), %rax
 1880 00a5 4889C7   		movq	%rax, %rdi
 1881              	.LEHB36:
 1882 00a8 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 1882      00
 1883 00ad 488B00   		movq	(%rax), %rax
 1884 00b0 4C89E2   		movq	%r12, %rdx
 1885 00b3 4889DE   		movq	%rbx, %rsi
 1886 00b6 4889C7   		movq	%rax, %rdi
 1887 00b9 E8000000 		call	_ZSt13copy_backwardIPSt4pairIiSsES2_ET0_T_S4_S3_@PLT
 1887      00
 343:/usr/include/c++/4.9/bits/vector.tcc **** #else
 1888              		.loc 8 343 0
 1889 00be 488D45A0 		leaq	-96(%rbp), %rax
 1890 00c2 4889C7   		movq	%rax, %rdi
 1891 00c5 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv@PLT
 1891      00
 1892 00ca 4889C2   		movq	%rax, %rdx
 1893 00cd 488D45D0 		leaq	-48(%rbp), %rax
 1894 00d1 4889C6   		movq	%rax, %rsi
 1895 00d4 4889D7   		movq	%rdx, %rdi
 1896 00d7 E8000000 		call	_ZNSt4pairIiSsEaSERKS0_@PLT
 1896      00
 1897              	.LEHE36:
 343:/usr/include/c++/4.9/bits/vector.tcc **** #else
 1898              		.loc 8 343 0 is_stmt 0 discriminator 4
 1899 00dc 488D45D0 		leaq	-48(%rbp), %rax
 1900 00e0 4889C7   		movq	%rax, %rdi
 1901              	.LEHB37:
 1902 00e3 E8000000 		call	_ZNSt4pairIiSsED1Ev@PLT
 1902      00
 1903              	.LBE23:
 1904 00e8 E93A0200 		jmp	.L92
 1904      00
 1905              	.L93:
 1906              	.LBB24:
 351:/usr/include/c++/4.9/bits/vector.tcc **** 	  const size_type __elems_before = __position - begin();
 1907              		.loc 8 351 0 is_stmt 1
 1908 00ed 488B45A8 		movq	-88(%rbp), %rax
 1909 00f1 488D1500 		leaq	.LC0(%rip), %rdx
 1909      000000
 1910 00f8 BE010000 		movl	$1, %esi
 1910      00
 1911 00fd 4889C7   		movq	%rax, %rdi
 1912 0100 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE12_M_check_lenEmPKc@PLT
 1912      00
 1913 0105 488945B8 		movq	%rax, -72(%rbp)
 352:/usr/include/c++/4.9/bits/vector.tcc **** 	  pointer __new_start(this->_M_allocate(__len));
 1914              		.loc 8 352 0
 1915 0109 488B45A8 		movq	-88(%rbp), %rax
 1916 010d 4889C7   		movq	%rax, %rdi
 1917 0110 E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EE5beginEv@PLT
 1917      00
 1918 0115 488945D0 		movq	%rax, -48(%rbp)
 1919 0119 488D55D0 		leaq	-48(%rbp), %rdx
 1920 011d 488D45A0 		leaq	-96(%rbp), %rax
 1921 0121 4889D6   		movq	%rdx, %rsi
 1922 0124 4889C7   		movq	%rax, %rdi
 1923 0127 E8000000 		call	_ZN9__gnu_cxxmiIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference
 1923      00
 1924 012c 488945C0 		movq	%rax, -64(%rbp)
 353:/usr/include/c++/4.9/bits/vector.tcc **** 	  pointer __new_finish(__new_start);
 1925              		.loc 8 353 0
 1926 0130 488B45A8 		movq	-88(%rbp), %rax
 1927 0134 488B55B8 		movq	-72(%rbp), %rdx
 1928 0138 4889D6   		movq	%rdx, %rsi
 1929 013b 4889C7   		movq	%rax, %rdi
 1930 013e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm@PLT
 1930      00
 1931              	.LEHE37:
 1932 0143 488945C8 		movq	%rax, -56(%rbp)
 354:/usr/include/c++/4.9/bits/vector.tcc **** 	  __try
 1933              		.loc 8 354 0
 1934 0147 488B45C8 		movq	-56(%rbp), %rax
 1935 014b 488945B0 		movq	%rax, -80(%rbp)
 366:/usr/include/c++/4.9/bits/vector.tcc **** #endif
 1936              		.loc 8 366 0
 1937 014f 488B45C0 		movq	-64(%rbp), %rax
 1938 0153 48C1E004 		salq	$4, %rax
 1939 0157 4889C2   		movq	%rax, %rdx
 1940 015a 488B45C8 		movq	-56(%rbp), %rax
 1941 015e 488D0C02 		leaq	(%rdx,%rax), %rcx
 1942 0162 488B45A8 		movq	-88(%rbp), %rax
 361:/usr/include/c++/4.9/bits/vector.tcc **** 		                       __new_start + __elems_before,
 1943              		.loc 8 361 0
 1944 0166 488B5598 		movq	-104(%rbp), %rdx
 1945 016a 4889CE   		movq	%rcx, %rsi
 1946 016d 4889C7   		movq	%rax, %rdi
 1947              	.LEHB38:
 1948 0170 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_@PLT
 1948      00
 368:/usr/include/c++/4.9/bits/vector.tcc **** 
 1949              		.loc 8 368 0
 1950 0175 48C745B0 		movq	$0, -80(%rbp)
 1950      00000000 
 373:/usr/include/c++/4.9/bits/vector.tcc **** 
 1951              		.loc 8 373 0
 1952 017d 488B45A8 		movq	-88(%rbp), %rax
 1953 0181 4889C7   		movq	%rax, %rdi
 1954 0184 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1954      00
 1955 0189 4889C3   		movq	%rax, %rbx
 1956 018c 488D45A0 		leaq	-96(%rbp), %rax
 1957 0190 4889C7   		movq	%rax, %rdi
 1958 0193 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 1958      00
 1959 0198 488B30   		movq	(%rax), %rsi
 1960 019b 488B45A8 		movq	-88(%rbp), %rax
 1961 019f 488B00   		movq	(%rax), %rax
 370:/usr/include/c++/4.9/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1962              		.loc 8 370 0
 1963 01a2 488B55C8 		movq	-56(%rbp), %rdx
 1964 01a6 4889D9   		movq	%rbx, %rcx
 1965 01a9 4889C7   		movq	%rax, %rdi
 1966 01ac E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiSsES2_SaIS1_EET0_T_S5_S4_RT1_@PLT
 1966      00
 370:/usr/include/c++/4.9/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1967              		.loc 8 370 0 is_stmt 0 discriminator 2
 1968 01b1 488945B0 		movq	%rax, -80(%rbp)
 375:/usr/include/c++/4.9/bits/vector.tcc **** 
 1969              		.loc 8 375 0 is_stmt 1 discriminator 2
 1970 01b5 488345B0 		addq	$16, -80(%rbp)
 1970      10
 380:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 1971              		.loc 8 380 0 discriminator 2
 1972 01ba 488B45A8 		movq	-88(%rbp), %rax
 1973 01be 4889C7   		movq	%rax, %rdi
 1974 01c1 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1974      00
 1975 01c6 4989C4   		movq	%rax, %r12
 1976 01c9 488B45A8 		movq	-88(%rbp), %rax
 1977 01cd 488B5808 		movq	8(%rax), %rbx
 1978 01d1 488D45A0 		leaq	-96(%rbp), %rax
 1979 01d5 4889C7   		movq	%rax, %rdi
 1980 01d8 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 1980      00
 380:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 1981              		.loc 8 380 0 is_stmt 0 discriminator 1
 1982 01dd 488B00   		movq	(%rax), %rax
 377:/usr/include/c++/4.9/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1983              		.loc 8 377 0 is_stmt 1 discriminator 1
 1984 01e0 488B55B0 		movq	-80(%rbp), %rdx
 1985 01e4 4C89E1   		movq	%r12, %rcx
 1986 01e7 4889DE   		movq	%rbx, %rsi
 1987 01ea 4889C7   		movq	%rax, %rdi
 1988 01ed E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiSsES2_SaIS1_EET0_T_S5_S4_RT1_@PLT
 1988      00
 1989              	.LEHE38:
 377:/usr/include/c++/4.9/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1990              		.loc 8 377 0 is_stmt 0 discriminator 2
 1991 01f2 488945B0 		movq	%rax, -80(%rbp)
 393:/usr/include/c++/4.9/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 1992              		.loc 8 393 0 is_stmt 1 discriminator 2
 1993 01f6 488B45A8 		movq	-88(%rbp), %rax
 1994 01fa 4889C7   		movq	%rax, %rdi
 1995 01fd E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1995      00
 1996 0202 4889C2   		movq	%rax, %rdx
 1997 0205 488B45A8 		movq	-88(%rbp), %rax
 1998 0209 488B4808 		movq	8(%rax), %rcx
 1999 020d 488B45A8 		movq	-88(%rbp), %rax
 2000 0211 488B00   		movq	(%rax), %rax
 392:/usr/include/c++/4.9/bits/vector.tcc **** 			_M_get_Tp_allocator());
 2001              		.loc 8 392 0 discriminator 2
 2002 0214 4889CE   		movq	%rcx, %rsi
 2003 0217 4889C7   		movq	%rax, %rdi
 2004              	.LEHB39:
 2005 021a E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E@PLT
 2005      00
 396:/usr/include/c++/4.9/bits/vector.tcc **** 	  this->_M_impl._M_start = __new_start;
 2006              		.loc 8 396 0 discriminator 2
 2007 021f 488B45A8 		movq	-88(%rbp), %rax
 2008 0223 488B4010 		movq	16(%rax), %rax
 2009 0227 4889C2   		movq	%rax, %rdx
 2010 022a 488B45A8 		movq	-88(%rbp), %rax
 2011 022e 488B00   		movq	(%rax), %rax
 2012 0231 4829C2   		subq	%rax, %rdx
 2013 0234 4889D0   		movq	%rdx, %rax
 2014 0237 48C1F804 		sarq	$4, %rax
 2015 023b 4889C2   		movq	%rax, %rdx
 2016 023e 488B45A8 		movq	-88(%rbp), %rax
 2017 0242 488B08   		movq	(%rax), %rcx
 2018 0245 488B45A8 		movq	-88(%rbp), %rax
 394:/usr/include/c++/4.9/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
 2019              		.loc 8 394 0 discriminator 2
 2020 0249 4889CE   		movq	%rcx, %rsi
 2021 024c 4889C7   		movq	%rax, %rdi
 2022 024f E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m@PLT
 2022      00
 2023              	.LEHE39:
 397:/usr/include/c++/4.9/bits/vector.tcc **** 	  this->_M_impl._M_finish = __new_finish;
 2024              		.loc 8 397 0 discriminator 2
 2025 0254 488B45A8 		movq	-88(%rbp), %rax
 2026 0258 488B55C8 		movq	-56(%rbp), %rdx
 2027 025c 488910   		movq	%rdx, (%rax)
 398:/usr/include/c++/4.9/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = __new_start + __len;
 2028              		.loc 8 398 0 discriminator 2
 2029 025f 488B45A8 		movq	-88(%rbp), %rax
 2030 0263 488B55B0 		movq	-80(%rbp), %rdx
 2031 0267 48895008 		movq	%rdx, 8(%rax)
 399:/usr/include/c++/4.9/bits/vector.tcc **** 	}
 2032              		.loc 8 399 0 discriminator 2
 2033 026b 488B45B8 		movq	-72(%rbp), %rax
 2034 026f 48C1E004 		salq	$4, %rax
 2035 0273 4889C2   		movq	%rax, %rdx
 2036 0276 488B45C8 		movq	-56(%rbp), %rax
 2037 027a 4801C2   		addq	%rax, %rdx
 2038 027d 488B45A8 		movq	-88(%rbp), %rax
 2039 0281 48895010 		movq	%rdx, 16(%rax)
 2040              	.LBE24:
 2041              	.LBE22:
 2042              	.LBE21:
 2043              		.loc 8 401 0 discriminator 2
 2044 0285 E99D0000 		jmp	.L92
 2044      00
 2045              	.L101:
 2046 028a 4889C3   		movq	%rax, %rbx
 2047              	.LBB28:
 2048              	.LBB27:
 2049              	.LBB25:
 343:/usr/include/c++/4.9/bits/vector.tcc **** #else
 2050              		.loc 8 343 0
 2051 028d 488D45D0 		leaq	-48(%rbp), %rax
 2052 0291 4889C7   		movq	%rax, %rdi
 2053 0294 E8000000 		call	_ZNSt4pairIiSsED1Ev@PLT
 2053      00
 2054 0299 4889D8   		movq	%rbx, %rax
 2055 029c 4889C7   		movq	%rax, %rdi
 2056              	.LEHB40:
 2057 029f E8000000 		call	_Unwind_Resume@PLT
 2057      00
 2058              	.LEHE40:
 2059              	.L103:
 2060 02a4 4889C3   		movq	%rax, %rbx
 2061              	.LBE25:
 2062              	.LBB26:
 382:/usr/include/c++/4.9/bits/vector.tcc **** 	    {
 2063              		.loc 8 382 0
 2064 02a7 E8000000 		call	__cxa_end_catch@PLT
 2064      00
 2065 02ac 4889D8   		movq	%rbx, %rax
 2066 02af 4889C7   		movq	%rax, %rdi
 2067              	.LEHB41:
 2068 02b2 E8000000 		call	_Unwind_Resume@PLT
 2068      00
 2069              	.LEHE41:
 2070              	.L102:
 2071 02b7 4889C7   		movq	%rax, %rdi
 2072 02ba E8000000 		call	__cxa_begin_catch@PLT
 2072      00
 384:/usr/include/c++/4.9/bits/vector.tcc **** 		_Alloc_traits::destroy(this->_M_impl,
 2073              		.loc 8 384 0
 2074 02bf 48837DB0 		cmpq	$0, -80(%rbp)
 2074      00
 2075 02c4 7523     		jne	.L98
 386:/usr/include/c++/4.9/bits/vector.tcc **** 	      else
 2076              		.loc 8 386 0
 2077 02c6 488B45C0 		movq	-64(%rbp), %rax
 2078 02ca 48C1E004 		salq	$4, %rax
 2079 02ce 4889C2   		movq	%rax, %rdx
 2080 02d1 488B45C8 		movq	-56(%rbp), %rax
 2081 02d5 4801C2   		addq	%rax, %rdx
 2082 02d8 488B45A8 		movq	-88(%rbp), %rax
 385:/usr/include/c++/4.9/bits/vector.tcc **** 		                       __new_start + __elems_before);
 2083              		.loc 8 385 0
 2084 02dc 4889D6   		movq	%rdx, %rsi
 2085 02df 4889C7   		movq	%rax, %rdi
 2086              	.LEHB42:
 2087 02e2 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE7destroyERS3_PS2_@PLT
 2087      00
 2088 02e7 EB22     		jmp	.L99
 2089              	.L98:
 388:/usr/include/c++/4.9/bits/vector.tcc **** 	      _M_deallocate(__new_start, __len);
 2090              		.loc 8 388 0
 2091 02e9 488B45A8 		movq	-88(%rbp), %rax
 2092 02ed 4889C7   		movq	%rax, %rdi
 2093 02f0 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 2093      00
 2094 02f5 4889C2   		movq	%rax, %rdx
 2095 02f8 488B4DB0 		movq	-80(%rbp), %rcx
 2096 02fc 488B45C8 		movq	-56(%rbp), %rax
 2097 0300 4889CE   		movq	%rcx, %rsi
 2098 0303 4889C7   		movq	%rax, %rdi
 2099 0306 E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E@PLT
 2099      00
 2100              	.L99:
 389:/usr/include/c++/4.9/bits/vector.tcc **** 	      __throw_exception_again;
 2101              		.loc 8 389 0
 2102 030b 488B45A8 		movq	-88(%rbp), %rax
 2103 030f 488B55B8 		movq	-72(%rbp), %rdx
 2104 0313 488B4DC8 		movq	-56(%rbp), %rcx
 2105 0317 4889CE   		movq	%rcx, %rsi
 2106 031a 4889C7   		movq	%rax, %rdi
 2107 031d E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m@PLT
 2107      00
 390:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 2108              		.loc 8 390 0
 2109 0322 E8000000 		call	__cxa_rethrow@PLT
 2109      00
 2110              	.LEHE42:
 2111              	.L92:
 2112              	.LBE26:
 2113              	.LBE27:
 2114              	.LBE28:
 2115              		.loc 8 401 0
 2116 0327 488B45E8 		movq	-24(%rbp), %rax
 2117 032b 64483304 		xorq	%fs:40, %rax
 2117      25280000 
 2117      00
 2118 0334 7405     		je	.L100
 2119 0336 E8000000 		call	__stack_chk_fail@PLT
 2119      00
 2120              	.L100:
 2121 033b 4883C460 		addq	$96, %rsp
 2122 033f 5B       		popq	%rbx
 2123 0340 415C     		popq	%r12
 2124 0342 5D       		popq	%rbp
 2125              		.cfi_def_cfa 7, 8
 2126 0343 C3       		ret
 2127              		.cfi_endproc
 2128              	.LFE932:
 2129              		.section	.gcc_except_table
 2130              		.align 4
 2131              	.LLSDA932:
 2132 00b4 FF       		.byte	0xff
 2133 00b5 9B       		.byte	0x9b
 2134 00b6 35       		.uleb128 .LLSDATT932-.LLSDATTD932
 2135              	.LLSDATTD932:
 2136 00b7 01       		.byte	0x1
 2137 00b8 2B       		.uleb128 .LLSDACSE932-.LLSDACSB932
 2138              	.LLSDACSB932:
 2139 00b9 5D       		.uleb128 .LEHB35-.LFB932
 2140 00ba 2C       		.uleb128 .LEHE35-.LEHB35
 2141 00bb 00       		.uleb128 0
 2142 00bc 00       		.uleb128 0
 2143 00bd A801     		.uleb128 .LEHB36-.LFB932
 2144 00bf 34       		.uleb128 .LEHE36-.LEHB36
 2145 00c0 8A05     		.uleb128 .L101-.LFB932
 2146 00c2 00       		.uleb128 0
 2147 00c3 E301     		.uleb128 .LEHB37-.LFB932
 2148 00c5 60       		.uleb128 .LEHE37-.LEHB37
 2149 00c6 00       		.uleb128 0
 2150 00c7 00       		.uleb128 0
 2151 00c8 F002     		.uleb128 .LEHB38-.LFB932
 2152 00ca 8201     		.uleb128 .LEHE38-.LEHB38
 2153 00cc B705     		.uleb128 .L102-.LFB932
 2154 00ce 01       		.uleb128 0x1
 2155 00cf 9A04     		.uleb128 .LEHB39-.LFB932
 2156 00d1 3A       		.uleb128 .LEHE39-.LEHB39
 2157 00d2 00       		.uleb128 0
 2158 00d3 00       		.uleb128 0
 2159 00d4 9F05     		.uleb128 .LEHB40-.LFB932
 2160 00d6 05       		.uleb128 .LEHE40-.LEHB40
 2161 00d7 00       		.uleb128 0
 2162 00d8 00       		.uleb128 0
 2163 00d9 B205     		.uleb128 .LEHB41-.LFB932
 2164 00db 05       		.uleb128 .LEHE41-.LEHB41
 2165 00dc 00       		.uleb128 0
 2166 00dd 00       		.uleb128 0
 2167 00de E205     		.uleb128 .LEHB42-.LFB932
 2168 00e0 45       		.uleb128 .LEHE42-.LEHB42
 2169 00e1 A405     		.uleb128 .L103-.LFB932
 2170 00e3 00       		.uleb128 0
 2171              	.LLSDACSE932:
 2172 00e4 01       		.byte	0x1
 2173 00e5 00       		.byte	0
 2174 00e6 0000     		.align 4
 2175 00e8 00000000 		.long	0
 2176              	
 2177              	.LLSDATT932:
 2178              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1
 2180              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EE3endEv,"axG",@progbits,_ZNSt6vectorISt4pairIiSsESa
 2181              		.align 2
 2182              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EE3endEv
 2184              	_ZNSt6vectorISt4pairIiSsESaIS1_EE3endEv:
 2185              	.LFB937:
 565:/usr/include/c++/4.9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 2186              		.loc 5 565 0
 2187              		.cfi_startproc
 2188 0000 55       		pushq	%rbp
 2189              		.cfi_def_cfa_offset 16
 2190              		.cfi_offset 6, -16
 2191 0001 4889E5   		movq	%rsp, %rbp
 2192              		.cfi_def_cfa_register 6
 2193 0004 4883EC20 		subq	$32, %rsp
 2194 0008 48897DE8 		movq	%rdi, -24(%rbp)
 565:/usr/include/c++/4.9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 2195              		.loc 5 565 0
 2196 000c 64488B04 		movq	%fs:40, %rax
 2196      25280000 
 2196      00
 2197 0015 488945F8 		movq	%rax, -8(%rbp)
 2198 0019 31C0     		xorl	%eax, %eax
 566:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2199              		.loc 5 566 0
 2200 001b 488B45E8 		movq	-24(%rbp), %rax
 2201 001f 488D5008 		leaq	8(%rax), %rdx
 2202 0023 488D45F0 		leaq	-16(%rbp), %rax
 2203 0027 4889D6   		movq	%rdx, %rsi
 2204 002a 4889C7   		movq	%rax, %rdi
 2205 002d E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS3_@PLT
 2205      00
 2206 0032 488B45F0 		movq	-16(%rbp), %rax
 2207 0036 488B4DF8 		movq	-8(%rbp), %rcx
 2208 003a 6448330C 		xorq	%fs:40, %rcx
 2208      25280000 
 2208      00
 2209 0043 7405     		je	.L106
 2210 0045 E8000000 		call	__stack_chk_fail@PLT
 2210      00
 2211              	.L106:
 2212 004a C9       		leave
 2213              		.cfi_def_cfa 7, 8
 2214 004b C3       		ret
 2215              		.cfi_endproc
 2216              	.LFE937:
 2218              		.section	.text._ZNSaISt4pairIiSsEED2Ev,"axG",@progbits,_ZNSaISt4pairIiSsEED5Ev,comdat
 2219              		.align 2
 2220              		.weak	_ZNSaISt4pairIiSsEED2Ev
 2222              	_ZNSaISt4pairIiSsEED2Ev:
 2223              	.LFB946:
 2224              		.file 10 "/usr/include/c++/4.9/bits/allocator.h"
   1:/usr/include/c++/4.9/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/4.9/bits/allocator.h **** 
   3:/usr/include/c++/4.9/bits/allocator.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/allocator.h **** //
   5:/usr/include/c++/4.9/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/allocator.h **** // any later version.
  10:/usr/include/c++/4.9/bits/allocator.h **** 
  11:/usr/include/c++/4.9/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/allocator.h **** 
  16:/usr/include/c++/4.9/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/allocator.h **** 
  20:/usr/include/c++/4.9/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/allocator.h **** 
  25:/usr/include/c++/4.9/bits/allocator.h **** /*
  26:/usr/include/c++/4.9/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/4.9/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/4.9/bits/allocator.h ****  *
  29:/usr/include/c++/4.9/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/4.9/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/4.9/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/4.9/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/4.9/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/4.9/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/4.9/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/4.9/bits/allocator.h ****  */
  37:/usr/include/c++/4.9/bits/allocator.h **** 
  38:/usr/include/c++/4.9/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/4.9/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/4.9/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/4.9/bits/allocator.h ****  */
  42:/usr/include/c++/4.9/bits/allocator.h **** 
  43:/usr/include/c++/4.9/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/4.9/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/4.9/bits/allocator.h **** 
  46:/usr/include/c++/4.9/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/4.9/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/4.9/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/4.9/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/4.9/bits/allocator.h **** #endif
  51:/usr/include/c++/4.9/bits/allocator.h **** 
  52:/usr/include/c++/4.9/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/include/c++/4.9/bits/allocator.h **** {
  54:/usr/include/c++/4.9/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/include/c++/4.9/bits/allocator.h **** 
  56:/usr/include/c++/4.9/bits/allocator.h ****   /**
  57:/usr/include/c++/4.9/bits/allocator.h ****    *  @addtogroup allocators
  58:/usr/include/c++/4.9/bits/allocator.h ****    *  @{
  59:/usr/include/c++/4.9/bits/allocator.h ****    */
  60:/usr/include/c++/4.9/bits/allocator.h **** 
  61:/usr/include/c++/4.9/bits/allocator.h ****   /// allocator<void> specialization.
  62:/usr/include/c++/4.9/bits/allocator.h ****   template<>
  63:/usr/include/c++/4.9/bits/allocator.h ****     class allocator<void>
  64:/usr/include/c++/4.9/bits/allocator.h ****     {
  65:/usr/include/c++/4.9/bits/allocator.h ****     public:
  66:/usr/include/c++/4.9/bits/allocator.h ****       typedef size_t      size_type;
  67:/usr/include/c++/4.9/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  68:/usr/include/c++/4.9/bits/allocator.h ****       typedef void*       pointer;
  69:/usr/include/c++/4.9/bits/allocator.h ****       typedef const void* const_pointer;
  70:/usr/include/c++/4.9/bits/allocator.h ****       typedef void        value_type;
  71:/usr/include/c++/4.9/bits/allocator.h **** 
  72:/usr/include/c++/4.9/bits/allocator.h ****       template<typename _Tp1>
  73:/usr/include/c++/4.9/bits/allocator.h ****         struct rebind
  74:/usr/include/c++/4.9/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
  75:/usr/include/c++/4.9/bits/allocator.h **** 
  76:/usr/include/c++/4.9/bits/allocator.h **** #if __cplusplus >= 201103L
  77:/usr/include/c++/4.9/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  78:/usr/include/c++/4.9/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  79:/usr/include/c++/4.9/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  80:/usr/include/c++/4.9/bits/allocator.h **** #endif
  81:/usr/include/c++/4.9/bits/allocator.h ****     };
  82:/usr/include/c++/4.9/bits/allocator.h **** 
  83:/usr/include/c++/4.9/bits/allocator.h ****   /**
  84:/usr/include/c++/4.9/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
  85:/usr/include/c++/4.9/bits/allocator.h ****    *
  86:/usr/include/c++/4.9/bits/allocator.h ****    *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt04ch11.html
  87:/usr/include/c++/4.9/bits/allocator.h ****    *  for further details.
  88:/usr/include/c++/4.9/bits/allocator.h ****    *
  89:/usr/include/c++/4.9/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  90:/usr/include/c++/4.9/bits/allocator.h ****    */
  91:/usr/include/c++/4.9/bits/allocator.h ****   template<typename _Tp>
  92:/usr/include/c++/4.9/bits/allocator.h ****     class allocator: public __allocator_base<_Tp>
  93:/usr/include/c++/4.9/bits/allocator.h ****     {
  94:/usr/include/c++/4.9/bits/allocator.h ****    public:
  95:/usr/include/c++/4.9/bits/allocator.h ****       typedef size_t     size_type;
  96:/usr/include/c++/4.9/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
  97:/usr/include/c++/4.9/bits/allocator.h ****       typedef _Tp*       pointer;
  98:/usr/include/c++/4.9/bits/allocator.h ****       typedef const _Tp* const_pointer;
  99:/usr/include/c++/4.9/bits/allocator.h ****       typedef _Tp&       reference;
 100:/usr/include/c++/4.9/bits/allocator.h ****       typedef const _Tp& const_reference;
 101:/usr/include/c++/4.9/bits/allocator.h ****       typedef _Tp        value_type;
 102:/usr/include/c++/4.9/bits/allocator.h **** 
 103:/usr/include/c++/4.9/bits/allocator.h ****       template<typename _Tp1>
 104:/usr/include/c++/4.9/bits/allocator.h ****         struct rebind
 105:/usr/include/c++/4.9/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
 106:/usr/include/c++/4.9/bits/allocator.h **** 
 107:/usr/include/c++/4.9/bits/allocator.h **** #if __cplusplus >= 201103L
 108:/usr/include/c++/4.9/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 109:/usr/include/c++/4.9/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 110:/usr/include/c++/4.9/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 111:/usr/include/c++/4.9/bits/allocator.h **** #endif
 112:/usr/include/c++/4.9/bits/allocator.h **** 
 113:/usr/include/c++/4.9/bits/allocator.h ****       allocator() throw() { }
 114:/usr/include/c++/4.9/bits/allocator.h **** 
 115:/usr/include/c++/4.9/bits/allocator.h ****       allocator(const allocator& __a) throw()
 116:/usr/include/c++/4.9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 117:/usr/include/c++/4.9/bits/allocator.h **** 
 118:/usr/include/c++/4.9/bits/allocator.h ****       template<typename _Tp1>
 119:/usr/include/c++/4.9/bits/allocator.h ****         allocator(const allocator<_Tp1>&) throw() { }
 120:/usr/include/c++/4.9/bits/allocator.h **** 
 121:/usr/include/c++/4.9/bits/allocator.h ****       ~allocator() throw() { }
 2225              		.loc 10 121 0
 2226              		.cfi_startproc
 2227 0000 55       		pushq	%rbp
 2228              		.cfi_def_cfa_offset 16
 2229              		.cfi_offset 6, -16
 2230 0001 4889E5   		movq	%rsp, %rbp
 2231              		.cfi_def_cfa_register 6
 2232 0004 4883EC10 		subq	$16, %rsp
 2233 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2234              	.LBB29:
 2235              		.loc 10 121 0
 2236 000c 488B45F8 		movq	-8(%rbp), %rax
 2237 0010 4889C7   		movq	%rax, %rdi
 2238 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev@PLT
 2238      00
 2239              	.LBE29:
 2240 0018 C9       		leave
 2241              		.cfi_def_cfa 7, 8
 2242 0019 C3       		ret
 2243              		.cfi_endproc
 2244              	.LFE946:
 2246              		.weak	_ZNSaISt4pairIiSsEED1Ev
 2247              		.set	_ZNSaISt4pairIiSsEED1Ev,_ZNSaISt4pairIiSsEED2Ev
 2248              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m,"axG",@progbits,_ZNSt
 2249              		.align 2
 2250              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m
 2252              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m:
 2253              	.LFB948:
 174:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 2254              		.loc 5 174 0
 2255              		.cfi_startproc
 2256 0000 55       		pushq	%rbp
 2257              		.cfi_def_cfa_offset 16
 2258              		.cfi_offset 6, -16
 2259 0001 4889E5   		movq	%rsp, %rbp
 2260              		.cfi_def_cfa_register 6
 2261 0004 4883EC20 		subq	$32, %rsp
 2262 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2263 000c 488975F0 		movq	%rsi, -16(%rbp)
 2264 0010 488955E8 		movq	%rdx, -24(%rbp)
 2265              	.LBB30:
 177:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 2266              		.loc 5 177 0
 2267 0014 48837DF0 		cmpq	$0, -16(%rbp)
 2267      00
 2268 0019 7417     		je	.L109
 178:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 2269              		.loc 5 178 0
 2270 001b 488B45F8 		movq	-8(%rbp), %rax
 2271 001f 488B55E8 		movq	-24(%rbp), %rdx
 2272 0023 488B4DF0 		movq	-16(%rbp), %rcx
 2273 0027 4889CE   		movq	%rcx, %rsi
 2274 002a 4889C7   		movq	%rax, %rdi
 2275 002d E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE10deallocateERS3_PS2_m@PLT
 2275      00
 2276              	.L109:
 2277              	.LBE30:
 179:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2278              		.loc 5 179 0
 2279 0032 C9       		leave
 2280              		.cfi_def_cfa 7, 8
 2281 0033 C3       		ret
 2282              		.cfi_endproc
 2283              	.LFE948:
 2285              		.section	.text._ZSt8_DestroyIPSt4pairIiSsEEvT_S3_,"axG",@progbits,_ZSt8_DestroyIPSt4pairIiSsEEvT_S
 2286              		.weak	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_
 2288              	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_:
 2289              	.LFB949:
 122:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 2290              		.loc 6 122 0
 2291              		.cfi_startproc
 2292 0000 55       		pushq	%rbp
 2293              		.cfi_def_cfa_offset 16
 2294              		.cfi_offset 6, -16
 2295 0001 4889E5   		movq	%rsp, %rbp
 2296              		.cfi_def_cfa_register 6
 2297 0004 4883EC10 		subq	$16, %rsp
 2298 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2299 000c 488975F0 		movq	%rsi, -16(%rbp)
 2300              	.LBB31:
 126:/usr/include/c++/4.9/bits/stl_construct.h **** 	__destroy(__first, __last);
 2301              		.loc 6 126 0
 2302 0010 488B55F0 		movq	-16(%rbp), %rdx
 2303 0014 488B45F8 		movq	-8(%rbp), %rax
 2304 0018 4889D6   		movq	%rdx, %rsi
 2305 001b 4889C7   		movq	%rax, %rdi
 2306 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_@PLT
 2306      00
 2307              	.LBE31:
 128:/usr/include/c++/4.9/bits/stl_construct.h **** 
 2308              		.loc 6 128 0
 2309 0023 C9       		leave
 2310              		.cfi_def_cfa 7, 8
 2311 0024 C3       		ret
 2312              		.cfi_endproc
 2313              	.LFE949:
 2315              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_,"
 2316              		.align 2
 2317              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_
 2319              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_:
 2320              	.LFB950:
 2321              		.file 11 "/usr/include/c++/4.9/ext/new_allocator.h"
   1:/usr/include/c++/4.9/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/4.9/ext/new_allocator.h **** 
   3:/usr/include/c++/4.9/ext/new_allocator.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/ext/new_allocator.h **** //
   5:/usr/include/c++/4.9/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/4.9/ext/new_allocator.h **** 
  11:/usr/include/c++/4.9/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/ext/new_allocator.h **** 
  16:/usr/include/c++/4.9/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/ext/new_allocator.h **** 
  20:/usr/include/c++/4.9/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/ext/new_allocator.h **** 
  25:/usr/include/c++/4.9/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/4.9/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/4.9/ext/new_allocator.h ****  */
  28:/usr/include/c++/4.9/ext/new_allocator.h **** 
  29:/usr/include/c++/4.9/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/4.9/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/4.9/ext/new_allocator.h **** 
  32:/usr/include/c++/4.9/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/4.9/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/4.9/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/4.9/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/4.9/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/4.9/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/4.9/ext/new_allocator.h **** #endif
  39:/usr/include/c++/4.9/ext/new_allocator.h **** 
  40:/usr/include/c++/4.9/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/4.9/ext/new_allocator.h **** {
  42:/usr/include/c++/4.9/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/4.9/ext/new_allocator.h **** 
  44:/usr/include/c++/4.9/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/4.9/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/4.9/ext/new_allocator.h **** 
  47:/usr/include/c++/4.9/ext/new_allocator.h ****   /**
  48:/usr/include/c++/4.9/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/4.9/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/4.9/ext/new_allocator.h ****    *
  51:/usr/include/c++/4.9/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  52:/usr/include/c++/4.9/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/4.9/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/4.9/ext/new_allocator.h ****    *
  55:/usr/include/c++/4.9/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/4.9/ext/new_allocator.h ****    */
  57:/usr/include/c++/4.9/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/4.9/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/4.9/ext/new_allocator.h ****     {
  60:/usr/include/c++/4.9/ext/new_allocator.h ****     public:
  61:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/4.9/ext/new_allocator.h **** 
  69:/usr/include/c++/4.9/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/4.9/ext/new_allocator.h ****         struct rebind
  71:/usr/include/c++/4.9/ext/new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/4.9/ext/new_allocator.h **** 
  73:/usr/include/c++/4.9/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/4.9/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/4.9/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/4.9/ext/new_allocator.h **** #endif
  78:/usr/include/c++/4.9/ext/new_allocator.h **** 
  79:/usr/include/c++/4.9/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/4.9/ext/new_allocator.h **** 
  81:/usr/include/c++/4.9/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:/usr/include/c++/4.9/ext/new_allocator.h **** 
  83:/usr/include/c++/4.9/ext/new_allocator.h ****       template<typename _Tp1>
  84:/usr/include/c++/4.9/ext/new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:/usr/include/c++/4.9/ext/new_allocator.h **** 
  86:/usr/include/c++/4.9/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  87:/usr/include/c++/4.9/ext/new_allocator.h **** 
  88:/usr/include/c++/4.9/ext/new_allocator.h ****       pointer
  89:/usr/include/c++/4.9/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:/usr/include/c++/4.9/ext/new_allocator.h ****       { return std::__addressof(__x); }
  91:/usr/include/c++/4.9/ext/new_allocator.h **** 
  92:/usr/include/c++/4.9/ext/new_allocator.h ****       const_pointer
  93:/usr/include/c++/4.9/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:/usr/include/c++/4.9/ext/new_allocator.h ****       { return std::__addressof(__x); }
  95:/usr/include/c++/4.9/ext/new_allocator.h **** 
  96:/usr/include/c++/4.9/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:/usr/include/c++/4.9/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  98:/usr/include/c++/4.9/ext/new_allocator.h ****       pointer
  99:/usr/include/c++/4.9/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 100:/usr/include/c++/4.9/ext/new_allocator.h ****       { 
 101:/usr/include/c++/4.9/ext/new_allocator.h **** 	if (__n > this->max_size())
 102:/usr/include/c++/4.9/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 103:/usr/include/c++/4.9/ext/new_allocator.h **** 
 104:/usr/include/c++/4.9/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 105:/usr/include/c++/4.9/ext/new_allocator.h ****       }
 106:/usr/include/c++/4.9/ext/new_allocator.h **** 
 107:/usr/include/c++/4.9/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 108:/usr/include/c++/4.9/ext/new_allocator.h ****       void
 109:/usr/include/c++/4.9/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 110:/usr/include/c++/4.9/ext/new_allocator.h ****       { ::operator delete(__p); }
 111:/usr/include/c++/4.9/ext/new_allocator.h **** 
 112:/usr/include/c++/4.9/ext/new_allocator.h ****       size_type
 113:/usr/include/c++/4.9/ext/new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 114:/usr/include/c++/4.9/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 115:/usr/include/c++/4.9/ext/new_allocator.h **** 
 116:/usr/include/c++/4.9/ext/new_allocator.h **** #if __cplusplus >= 201103L
 117:/usr/include/c++/4.9/ext/new_allocator.h ****       template<typename _Up, typename... _Args>
 118:/usr/include/c++/4.9/ext/new_allocator.h ****         void
 119:/usr/include/c++/4.9/ext/new_allocator.h ****         construct(_Up* __p, _Args&&... __args)
 120:/usr/include/c++/4.9/ext/new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 121:/usr/include/c++/4.9/ext/new_allocator.h **** 
 122:/usr/include/c++/4.9/ext/new_allocator.h ****       template<typename _Up>
 123:/usr/include/c++/4.9/ext/new_allocator.h ****         void 
 124:/usr/include/c++/4.9/ext/new_allocator.h ****         destroy(_Up* __p) { __p->~_Up(); }
 125:/usr/include/c++/4.9/ext/new_allocator.h **** #else
 126:/usr/include/c++/4.9/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 127:/usr/include/c++/4.9/ext/new_allocator.h ****       // 402. wrong new expression in [some_] allocator::construct
 128:/usr/include/c++/4.9/ext/new_allocator.h ****       void 
 129:/usr/include/c++/4.9/ext/new_allocator.h ****       construct(pointer __p, const _Tp& __val) 
 2322              		.loc 11 129 0
 2323              		.cfi_startproc
 2324              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2325              		.cfi_lsda 0x1b,.LLSDA950
 2326 0000 55       		pushq	%rbp
 2327              		.cfi_def_cfa_offset 16
 2328              		.cfi_offset 6, -16
 2329 0001 4889E5   		movq	%rsp, %rbp
 2330              		.cfi_def_cfa_register 6
 2331 0004 4155     		pushq	%r13
 2332 0006 4154     		pushq	%r12
 2333 0008 53       		pushq	%rbx
 2334 0009 4883EC28 		subq	$40, %rsp
 2335              		.cfi_offset 13, -24
 2336              		.cfi_offset 12, -32
 2337              		.cfi_offset 3, -40
 2338 000d 48897DD8 		movq	%rdi, -40(%rbp)
 2339 0011 488975D0 		movq	%rsi, -48(%rbp)
 2340 0015 488955C8 		movq	%rdx, -56(%rbp)
 130:/usr/include/c++/4.9/ext/new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 2341              		.loc 11 130 0
 2342 0019 4C8B65D0 		movq	-48(%rbp), %r12
 2343 001d 4C89E6   		movq	%r12, %rsi
 2344 0020 BF380000 		movl	$56, %edi
 2344      00
 2345 0025 E8000000 		call	_ZnwmPv@PLT
 2345      00
 2346 002a 4889C3   		movq	%rax, %rbx
 2347 002d 4885DB   		testq	%rbx, %rbx
 2348 0030 7411     		je	.L113
 2349              		.loc 11 130 0 is_stmt 0 discriminator 1
 2350 0032 488B45C8 		movq	-56(%rbp), %rax
 2351 0036 4889C6   		movq	%rax, %rsi
 2352 0039 4889DF   		movq	%rbx, %rdi
 2353              	.LEHB43:
 2354 003c E8000000 		call	_ZN8UnitTest18DeferredTestResultC1ERKS0_@PLT
 2354      00
 2355              	.LEHE43:
 2356 0041 EB1B     		jmp	.L112
 2357              	.L113:
 2358              		.loc 11 130 0 discriminator 2
 2359 0043 EB19     		jmp	.L112
 2360              	.L116:
 2361 0045 4989C5   		movq	%rax, %r13
 2362              		.loc 11 130 0
 2363 0048 4C89E6   		movq	%r12, %rsi
 2364 004b 4889DF   		movq	%rbx, %rdi
 2365 004e E8000000 		call	_ZdlPvS_@PLT
 2365      00
 2366 0053 4C89E8   		movq	%r13, %rax
 2367 0056 4889C7   		movq	%rax, %rdi
 2368              	.LEHB44:
 2369 0059 E8000000 		call	_Unwind_Resume@PLT
 2369      00
 2370              	.LEHE44:
 2371              	.L112:
 2372 005e 4883C428 		addq	$40, %rsp
 2373 0062 5B       		popq	%rbx
 2374 0063 415C     		popq	%r12
 2375 0065 415D     		popq	%r13
 2376 0067 5D       		popq	%rbp
 2377              		.cfi_def_cfa 7, 8
 2378 0068 C3       		ret
 2379              		.cfi_endproc
 2380              	.LFE950:
 2381              		.section	.gcc_except_table
 2382              	.LLSDA950:
 2383 00ec FF       		.byte	0xff
 2384 00ed FF       		.byte	0xff
 2385 00ee 01       		.byte	0x1
 2386 00ef 08       		.uleb128 .LLSDACSE950-.LLSDACSB950
 2387              	.LLSDACSB950:
 2388 00f0 3C       		.uleb128 .LEHB43-.LFB950
 2389 00f1 05       		.uleb128 .LEHE43-.LEHB43
 2390 00f2 45       		.uleb128 .L116-.LFB950
 2391 00f3 00       		.uleb128 0
 2392 00f4 59       		.uleb128 .LEHB44-.LFB950
 2393 00f5 05       		.uleb128 .LEHE44-.LEHB44
 2394 00f6 00       		.uleb128 0
 2395 00f7 00       		.uleb128 0
 2396              	.LLSDACSE950:
 2397              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_,"
 2399              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_,"axG",@progbits,_ZNSt6vectorISt4pairIiSsE
 2400              		.align 2
 2401              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_
 2403              	_ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_:
 2404              	.LFB952:
 318:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__x.size(),
 2405              		.loc 5 318 0 is_stmt 1
 2406              		.cfi_startproc
 2407              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2408              		.cfi_lsda 0x1b,.LLSDA952
 2409 0000 55       		pushq	%rbp
 2410              		.cfi_def_cfa_offset 16
 2411              		.cfi_offset 6, -16
 2412 0001 4889E5   		movq	%rsp, %rbp
 2413              		.cfi_def_cfa_register 6
 2414 0004 4155     		pushq	%r13
 2415 0006 4154     		pushq	%r12
 2416 0008 53       		pushq	%rbx
 2417 0009 4883EC18 		subq	$24, %rsp
 2418              		.cfi_offset 13, -24
 2419              		.cfi_offset 12, -32
 2420              		.cfi_offset 3, -40
 2421 000d 48897DD8 		movq	%rdi, -40(%rbp)
 2422 0011 488975D0 		movq	%rsi, -48(%rbp)
 2423              	.LBB32:
 320:/usr/include/c++/4.9/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 2424              		.loc 5 320 0
 2425 0015 488B45D0 		movq	-48(%rbp), %rax
 2426 0019 4889C7   		movq	%rax, %rdi
 2427              	.LEHB45:
 2428 001c E8000000 		call	_ZNKSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 2428      00
 2429 0021 4889C7   		movq	%rax, %rdi
 2430 0024 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE17_S_select_on_copyERKS3_@PLT
 2430      00
 2431 0029 4889C3   		movq	%rax, %rbx
 2432 002c 488B45D0 		movq	-48(%rbp), %rax
 2433 0030 4889C7   		movq	%rax, %rdi
 2434 0033 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 2434      00
 2435 0038 4889C1   		movq	%rax, %rcx
 2436 003b 488B45D8 		movq	-40(%rbp), %rax
 2437 003f 4889DA   		movq	%rbx, %rdx
 2438 0042 4889CE   		movq	%rcx, %rsi
 2439 0045 4889C7   		movq	%rax, %rdi
 2440 0048 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_@PLT
 2440      00
 2441              	.LEHE45:
 324:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 2442              		.loc 5 324 0
 2443 004d 488B45D8 		movq	-40(%rbp), %rax
 2444 0051 4889C7   		movq	%rax, %rdi
 2445 0054 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 2445      00
 2446 0059 4989C5   		movq	%rax, %r13
 2447 005c 488B45D8 		movq	-40(%rbp), %rax
 2448 0060 488B18   		movq	(%rax), %rbx
 2449 0063 488B45D0 		movq	-48(%rbp), %rax
 2450 0067 4889C7   		movq	%rax, %rdi
 2451              	.LEHB46:
 2452 006a E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv@PLT
 2452      00
 2453 006f 4989C4   		movq	%rax, %r12
 2454 0072 488B45D0 		movq	-48(%rbp), %rax
 2455 0076 4889C7   		movq	%rax, %rdi
 2456 0079 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv@PLT
 2456      00
 324:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 2457              		.loc 5 324 0 is_stmt 0 discriminator 2
 2458 007e 4C89E9   		movq	%r13, %rcx
 2459 0081 4889DA   		movq	%rbx, %rdx
 2460 0084 4C89E6   		movq	%r12, %rsi
 2461 0087 4889C7   		movq	%rax, %rdi
 2462 008a E8000000 		call	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_
 2462      00
 2463              	.LEHE46:
 324:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 2464              		.loc 5 324 0 discriminator 3
 2465 008f 4889C2   		movq	%rax, %rdx
 321:/usr/include/c++/4.9/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 2466              		.loc 5 321 0 is_stmt 1 discriminator 3
 2467 0092 488B45D8 		movq	-40(%rbp), %rax
 2468 0096 48895008 		movq	%rdx, 8(%rax)
 2469 009a EB1A     		jmp	.L120
 2470              	.L119:
 2471 009c 4889C3   		movq	%rax, %rbx
 320:/usr/include/c++/4.9/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 2472              		.loc 5 320 0
 2473 009f 488B45D8 		movq	-40(%rbp), %rax
 2474 00a3 4889C7   		movq	%rax, %rdi
 2475 00a6 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev@PLT
 2475      00
 2476 00ab 4889D8   		movq	%rbx, %rax
 2477 00ae 4889C7   		movq	%rax, %rdi
 2478              	.LEHB47:
 2479 00b1 E8000000 		call	_Unwind_Resume@PLT
 2479      00
 2480              	.LEHE47:
 2481              	.L120:
 2482              	.LBE32:
 325:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2483              		.loc 5 325 0
 2484 00b6 4883C418 		addq	$24, %rsp
 2485 00ba 5B       		popq	%rbx
 2486 00bb 415C     		popq	%r12
 2487 00bd 415D     		popq	%r13
 2488 00bf 5D       		popq	%rbp
 2489              		.cfi_def_cfa 7, 8
 2490 00c0 C3       		ret
 2491              		.cfi_endproc
 2492              	.LFE952:
 2493              		.section	.gcc_except_table
 2494              	.LLSDA952:
 2495 00f8 FF       		.byte	0xff
 2496 00f9 FF       		.byte	0xff
 2497 00fa 01       		.byte	0x1
 2498 00fb 0E       		.uleb128 .LLSDACSE952-.LLSDACSB952
 2499              	.LLSDACSB952:
 2500 00fc 1C       		.uleb128 .LEHB45-.LFB952
 2501 00fd 31       		.uleb128 .LEHE45-.LEHB45
 2502 00fe 00       		.uleb128 0
 2503 00ff 00       		.uleb128 0
 2504 0100 6A       		.uleb128 .LEHB46-.LFB952
 2505 0101 25       		.uleb128 .LEHE46-.LEHB46
 2506 0102 9C01     		.uleb128 .L119-.LFB952
 2507 0104 00       		.uleb128 0
 2508 0105 B101     		.uleb128 .LEHB47-.LFB952
 2509 0107 05       		.uleb128 .LEHE47-.LEHB47
 2510 0108 00       		.uleb128 0
 2511 0109 00       		.uleb128 0
 2512              	.LLSDACSE952:
 2513              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_,"axG",@progbits,_ZNSt6vectorISt4pairIiSsE
 2515              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EEC1ERKS3_
 2516              		.set	_ZNSt6vectorISt4pairIiSsESaIS1_EEC1ERKS3_,_ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_
 2517              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 2518              		.align 2
 2519              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4bas
 2521              	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:
 2522              	.LFB954:
 791:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 792:/usr/include/c++/4.9/bits/stl_iterator.h ****       const _Iterator&
 793:/usr/include/c++/4.9/bits/stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
 2523              		.loc 9 793 0
 2524              		.cfi_startproc
 2525 0000 55       		pushq	%rbp
 2526              		.cfi_def_cfa_offset 16
 2527              		.cfi_offset 6, -16
 2528 0001 4889E5   		movq	%rsp, %rbp
 2529              		.cfi_def_cfa_register 6
 2530 0004 48897DF8 		movq	%rdi, -8(%rbp)
 794:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return _M_current; }
 2531              		.loc 9 794 0
 2532 0008 488B45F8 		movq	-8(%rbp), %rax
 2533 000c 5D       		popq	%rbp
 2534              		.cfi_def_cfa 7, 8
 2535 000d C3       		ret
 2536              		.cfi_endproc
 2537              	.LFE954:
 2539              		.section	.text._ZSt13copy_backwardIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_,"axG",@progbits
 2540              		.weak	_ZSt13copy_backwardIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_
 2542              	_ZSt13copy_backwardIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_:
 2543              	.LFB955:
 2544              		.file 12 "/usr/include/c++/4.9/bits/stl_algobase.h"
   1:/usr/include/c++/4.9/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/c++/4.9/bits/stl_algobase.h **** 
   3:/usr/include/c++/4.9/bits/stl_algobase.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/stl_algobase.h **** //
   5:/usr/include/c++/4.9/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/stl_algobase.h **** // any later version.
  10:/usr/include/c++/4.9/bits/stl_algobase.h **** 
  11:/usr/include/c++/4.9/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/stl_algobase.h **** 
  16:/usr/include/c++/4.9/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/stl_algobase.h **** 
  20:/usr/include/c++/4.9/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/stl_algobase.h **** 
  25:/usr/include/c++/4.9/bits/stl_algobase.h **** /*
  26:/usr/include/c++/4.9/bits/stl_algobase.h ****  *
  27:/usr/include/c++/4.9/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.9/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.9/bits/stl_algobase.h ****  *
  30:/usr/include/c++/4.9/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.9/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.9/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.9/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.9/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.9/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.9/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.9/bits/stl_algobase.h ****  *
  38:/usr/include/c++/4.9/bits/stl_algobase.h ****  *
  39:/usr/include/c++/4.9/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/4.9/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.9/bits/stl_algobase.h ****  *
  42:/usr/include/c++/4.9/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.9/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.9/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.9/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.9/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.9/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.9/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.9/bits/stl_algobase.h ****  */
  50:/usr/include/c++/4.9/bits/stl_algobase.h **** 
  51:/usr/include/c++/4.9/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/c++/4.9/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.9/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/c++/4.9/bits/stl_algobase.h ****  */
  55:/usr/include/c++/4.9/bits/stl_algobase.h **** 
  56:/usr/include/c++/4.9/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/c++/4.9/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/c++/4.9/bits/stl_algobase.h **** 
  59:/usr/include/c++/4.9/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/include/c++/4.9/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/4.9/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/include/c++/4.9/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/c++/4.9/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/c++/4.9/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/c++/4.9/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/c++/4.9/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/c++/4.9/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/c++/4.9/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/c++/4.9/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/c++/4.9/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  71:/usr/include/c++/4.9/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/include/c++/4.9/bits/stl_algobase.h **** 
  73:/usr/include/c++/4.9/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:/usr/include/c++/4.9/bits/stl_algobase.h **** {
  75:/usr/include/c++/4.9/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:/usr/include/c++/4.9/bits/stl_algobase.h **** 
  77:/usr/include/c++/4.9/bits/stl_algobase.h **** #if __cplusplus < 201103L
  78:/usr/include/c++/4.9/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  79:/usr/include/c++/4.9/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  80:/usr/include/c++/4.9/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  81:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<bool _BoolType>
  82:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct __iter_swap
  83:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
  84:/usr/include/c++/4.9/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  85:/usr/include/c++/4.9/bits/stl_algobase.h ****         static void
  86:/usr/include/c++/4.9/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  87:/usr/include/c++/4.9/bits/stl_algobase.h ****         {
  88:/usr/include/c++/4.9/bits/stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  89:/usr/include/c++/4.9/bits/stl_algobase.h ****             _ValueType1;
  90:/usr/include/c++/4.9/bits/stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  91:/usr/include/c++/4.9/bits/stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  92:/usr/include/c++/4.9/bits/stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  93:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
  94:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
  95:/usr/include/c++/4.9/bits/stl_algobase.h **** 
  96:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<>
  97:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct __iter_swap<true>
  98:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
  99:/usr/include/c++/4.9/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 100:/usr/include/c++/4.9/bits/stl_algobase.h ****         static void 
 101:/usr/include/c++/4.9/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 102:/usr/include/c++/4.9/bits/stl_algobase.h ****         {
 103:/usr/include/c++/4.9/bits/stl_algobase.h ****           swap(*__a, *__b);
 104:/usr/include/c++/4.9/bits/stl_algobase.h ****         }
 105:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 106:/usr/include/c++/4.9/bits/stl_algobase.h **** #endif
 107:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 108:/usr/include/c++/4.9/bits/stl_algobase.h ****   /**
 109:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 110:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 111:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 112:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 113:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @return   Nothing.
 114:/usr/include/c++/4.9/bits/stl_algobase.h ****    *
 115:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 116:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  iterators themselves.
 117:/usr/include/c++/4.9/bits/stl_algobase.h ****   */
 118:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 119:/usr/include/c++/4.9/bits/stl_algobase.h ****     inline void
 120:/usr/include/c++/4.9/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 121:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 122:/usr/include/c++/4.9/bits/stl_algobase.h ****       // concept requirements
 123:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 124:/usr/include/c++/4.9/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 125:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 126:/usr/include/c++/4.9/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 127:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 128:/usr/include/c++/4.9/bits/stl_algobase.h **** #if __cplusplus < 201103L
 129:/usr/include/c++/4.9/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 130:/usr/include/c++/4.9/bits/stl_algobase.h **** 	_ValueType1;
 131:/usr/include/c++/4.9/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 132:/usr/include/c++/4.9/bits/stl_algobase.h **** 	_ValueType2;
 133:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 134:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 135:/usr/include/c++/4.9/bits/stl_algobase.h **** 				  _ValueType2>)
 136:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 137:/usr/include/c++/4.9/bits/stl_algobase.h **** 				  _ValueType1>)
 138:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 139:/usr/include/c++/4.9/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 140:/usr/include/c++/4.9/bits/stl_algobase.h **** 	_ReferenceType1;
 141:/usr/include/c++/4.9/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 142:/usr/include/c++/4.9/bits/stl_algobase.h **** 	_ReferenceType2;
 143:/usr/include/c++/4.9/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 144:/usr/include/c++/4.9/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 145:/usr/include/c++/4.9/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 146:/usr/include/c++/4.9/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 147:/usr/include/c++/4.9/bits/stl_algobase.h **** #else
 148:/usr/include/c++/4.9/bits/stl_algobase.h ****       swap(*__a, *__b);
 149:/usr/include/c++/4.9/bits/stl_algobase.h **** #endif
 150:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 151:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 152:/usr/include/c++/4.9/bits/stl_algobase.h ****   /**
 153:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 154:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 155:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 156:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 157:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 158:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 159:/usr/include/c++/4.9/bits/stl_algobase.h ****    *
 160:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 161:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 162:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  The ranges must not overlap.
 163:/usr/include/c++/4.9/bits/stl_algobase.h ****   */
 164:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 165:/usr/include/c++/4.9/bits/stl_algobase.h ****     _ForwardIterator2
 166:/usr/include/c++/4.9/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 167:/usr/include/c++/4.9/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 168:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 169:/usr/include/c++/4.9/bits/stl_algobase.h ****       // concept requirements
 170:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 171:/usr/include/c++/4.9/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 172:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 173:/usr/include/c++/4.9/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 174:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 175:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 176:/usr/include/c++/4.9/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, ++__first2)
 177:/usr/include/c++/4.9/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 178:/usr/include/c++/4.9/bits/stl_algobase.h ****       return __first2;
 179:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 180:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 181:/usr/include/c++/4.9/bits/stl_algobase.h ****   /**
 182:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 183:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 184:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 185:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 186:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 187:/usr/include/c++/4.9/bits/stl_algobase.h ****    *
 188:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 189:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 190:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  preprocessor macro.
 191:/usr/include/c++/4.9/bits/stl_algobase.h ****   */
 192:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _Tp>
 193:/usr/include/c++/4.9/bits/stl_algobase.h ****     inline const _Tp&
 194:/usr/include/c++/4.9/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 195:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 196:/usr/include/c++/4.9/bits/stl_algobase.h ****       // concept requirements
 197:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 198:/usr/include/c++/4.9/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 199:/usr/include/c++/4.9/bits/stl_algobase.h ****       if (__b < __a)
 200:/usr/include/c++/4.9/bits/stl_algobase.h **** 	return __b;
 201:/usr/include/c++/4.9/bits/stl_algobase.h ****       return __a;
 202:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 203:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 204:/usr/include/c++/4.9/bits/stl_algobase.h ****   /**
 205:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 206:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 207:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 208:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 209:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 210:/usr/include/c++/4.9/bits/stl_algobase.h ****    *
 211:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 212:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 213:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  preprocessor macro.
 214:/usr/include/c++/4.9/bits/stl_algobase.h ****   */
 215:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _Tp>
 216:/usr/include/c++/4.9/bits/stl_algobase.h ****     inline const _Tp&
 217:/usr/include/c++/4.9/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 218:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 219:/usr/include/c++/4.9/bits/stl_algobase.h ****       // concept requirements
 220:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 221:/usr/include/c++/4.9/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 222:/usr/include/c++/4.9/bits/stl_algobase.h ****       if (__a < __b)
 223:/usr/include/c++/4.9/bits/stl_algobase.h **** 	return __b;
 224:/usr/include/c++/4.9/bits/stl_algobase.h ****       return __a;
 225:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 226:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 227:/usr/include/c++/4.9/bits/stl_algobase.h ****   /**
 228:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 229:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 230:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 231:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 232:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 233:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 234:/usr/include/c++/4.9/bits/stl_algobase.h ****    *
 235:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 236:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 237:/usr/include/c++/4.9/bits/stl_algobase.h ****   */
 238:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 239:/usr/include/c++/4.9/bits/stl_algobase.h ****     inline const _Tp&
 240:/usr/include/c++/4.9/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 241:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 242:/usr/include/c++/4.9/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 243:/usr/include/c++/4.9/bits/stl_algobase.h ****       if (__comp(__b, __a))
 244:/usr/include/c++/4.9/bits/stl_algobase.h **** 	return __b;
 245:/usr/include/c++/4.9/bits/stl_algobase.h ****       return __a;
 246:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 247:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 248:/usr/include/c++/4.9/bits/stl_algobase.h ****   /**
 249:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 250:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 251:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 252:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 253:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 254:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 255:/usr/include/c++/4.9/bits/stl_algobase.h ****    *
 256:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 257:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 258:/usr/include/c++/4.9/bits/stl_algobase.h ****   */
 259:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 260:/usr/include/c++/4.9/bits/stl_algobase.h ****     inline const _Tp&
 261:/usr/include/c++/4.9/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 262:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 263:/usr/include/c++/4.9/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 264:/usr/include/c++/4.9/bits/stl_algobase.h ****       if (__comp(__a, __b))
 265:/usr/include/c++/4.9/bits/stl_algobase.h **** 	return __b;
 266:/usr/include/c++/4.9/bits/stl_algobase.h ****       return __a;
 267:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 268:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 269:/usr/include/c++/4.9/bits/stl_algobase.h ****   // If _Iterator is a __normal_iterator return its base (a plain pointer,
 270:/usr/include/c++/4.9/bits/stl_algobase.h ****   // normally) otherwise return it untouched.  See copy, fill, ... 
 271:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _Iterator>
 272:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct _Niter_base
 273:/usr/include/c++/4.9/bits/stl_algobase.h ****     : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
 274:/usr/include/c++/4.9/bits/stl_algobase.h ****     { };
 275:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 276:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _Iterator>
 277:/usr/include/c++/4.9/bits/stl_algobase.h ****     inline typename _Niter_base<_Iterator>::iterator_type
 278:/usr/include/c++/4.9/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 279:/usr/include/c++/4.9/bits/stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 280:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 281:/usr/include/c++/4.9/bits/stl_algobase.h ****   // Likewise, for move_iterator.
 282:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _Iterator>
 283:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct _Miter_base
 284:/usr/include/c++/4.9/bits/stl_algobase.h ****     : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
 285:/usr/include/c++/4.9/bits/stl_algobase.h ****     { };
 286:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 287:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _Iterator>
 288:/usr/include/c++/4.9/bits/stl_algobase.h ****     inline typename _Miter_base<_Iterator>::iterator_type
 289:/usr/include/c++/4.9/bits/stl_algobase.h ****     __miter_base(_Iterator __it)
 290:/usr/include/c++/4.9/bits/stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 291:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 292:/usr/include/c++/4.9/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 293:/usr/include/c++/4.9/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 294:/usr/include/c++/4.9/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 295:/usr/include/c++/4.9/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 296:/usr/include/c++/4.9/bits/stl_algobase.h ****   // a for loop with an explicit count.
 297:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 298:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<bool, bool, typename>
 299:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct __copy_move
 300:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 301:/usr/include/c++/4.9/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 302:/usr/include/c++/4.9/bits/stl_algobase.h ****         static _OI
 303:/usr/include/c++/4.9/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 304:/usr/include/c++/4.9/bits/stl_algobase.h ****         {
 305:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 306:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    *__result = *__first;
 307:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  return __result;
 308:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
 309:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 310:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 311:/usr/include/c++/4.9/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 312:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _Category>
 313:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 314:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 315:/usr/include/c++/4.9/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 316:/usr/include/c++/4.9/bits/stl_algobase.h ****         static _OI
 317:/usr/include/c++/4.9/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 318:/usr/include/c++/4.9/bits/stl_algobase.h ****         {
 319:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 320:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 321:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  return __result;
 322:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
 323:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 324:/usr/include/c++/4.9/bits/stl_algobase.h **** #endif
 325:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 326:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<>
 327:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 328:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 329:/usr/include/c++/4.9/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 330:/usr/include/c++/4.9/bits/stl_algobase.h ****         static _OI
 331:/usr/include/c++/4.9/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 332:/usr/include/c++/4.9/bits/stl_algobase.h ****         { 
 333:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 334:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 335:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    {
 336:/usr/include/c++/4.9/bits/stl_algobase.h **** 	      *__result = *__first;
 337:/usr/include/c++/4.9/bits/stl_algobase.h **** 	      ++__first;
 338:/usr/include/c++/4.9/bits/stl_algobase.h **** 	      ++__result;
 339:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    }
 340:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  return __result;
 341:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
 342:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 343:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 344:/usr/include/c++/4.9/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 345:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<>
 346:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 347:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 348:/usr/include/c++/4.9/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 349:/usr/include/c++/4.9/bits/stl_algobase.h ****         static _OI
 350:/usr/include/c++/4.9/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 351:/usr/include/c++/4.9/bits/stl_algobase.h ****         { 
 352:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 353:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 354:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    {
 355:/usr/include/c++/4.9/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 356:/usr/include/c++/4.9/bits/stl_algobase.h **** 	      ++__first;
 357:/usr/include/c++/4.9/bits/stl_algobase.h **** 	      ++__result;
 358:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    }
 359:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  return __result;
 360:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
 361:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 362:/usr/include/c++/4.9/bits/stl_algobase.h **** #endif
 363:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 364:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<bool _IsMove>
 365:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 366:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 367:/usr/include/c++/4.9/bits/stl_algobase.h ****       template<typename _Tp>
 368:/usr/include/c++/4.9/bits/stl_algobase.h ****         static _Tp*
 369:/usr/include/c++/4.9/bits/stl_algobase.h ****         __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 370:/usr/include/c++/4.9/bits/stl_algobase.h ****         {
 371:/usr/include/c++/4.9/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 372:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 373:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  static_assert( is_copy_assignable<_Tp>::value,
 374:/usr/include/c++/4.9/bits/stl_algobase.h **** 	                 "type is not assignable" );
 375:/usr/include/c++/4.9/bits/stl_algobase.h **** #endif
 376:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 377:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  if (_Num)
 378:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 379:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  return __result + _Num;
 380:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
 381:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 382:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 383:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 384:/usr/include/c++/4.9/bits/stl_algobase.h ****     inline _OI
 385:/usr/include/c++/4.9/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 386:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 387:/usr/include/c++/4.9/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::value_type _ValueTypeI;
 388:/usr/include/c++/4.9/bits/stl_algobase.h ****       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
 389:/usr/include/c++/4.9/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 390:/usr/include/c++/4.9/bits/stl_algobase.h ****       const bool __simple = (__is_trivial(_ValueTypeI)
 391:/usr/include/c++/4.9/bits/stl_algobase.h **** 	                     && __is_pointer<_II>::__value
 392:/usr/include/c++/4.9/bits/stl_algobase.h **** 	                     && __is_pointer<_OI>::__value
 393:/usr/include/c++/4.9/bits/stl_algobase.h **** 			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 394:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 395:/usr/include/c++/4.9/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __simple,
 396:/usr/include/c++/4.9/bits/stl_algobase.h **** 	                      _Category>::__copy_m(__first, __last, __result);
 397:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 398:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 399:/usr/include/c++/4.9/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 400:/usr/include/c++/4.9/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 401:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _CharT>
 402:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct char_traits;
 403:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 404:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 405:/usr/include/c++/4.9/bits/stl_algobase.h ****     class istreambuf_iterator;
 406:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 407:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 408:/usr/include/c++/4.9/bits/stl_algobase.h ****     class ostreambuf_iterator;
 409:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 410:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 411:/usr/include/c++/4.9/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 412:/usr/include/c++/4.9/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 413:/usr/include/c++/4.9/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 414:/usr/include/c++/4.9/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 415:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 416:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 417:/usr/include/c++/4.9/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 418:/usr/include/c++/4.9/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 419:/usr/include/c++/4.9/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 420:/usr/include/c++/4.9/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 421:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 422:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 423:/usr/include/c++/4.9/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 424:/usr/include/c++/4.9/bits/stl_algobase.h **** 				    _CharT*>::__type
 425:/usr/include/c++/4.9/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 426:/usr/include/c++/4.9/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 427:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 428:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 429:/usr/include/c++/4.9/bits/stl_algobase.h ****     inline _OI
 430:/usr/include/c++/4.9/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 431:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 432:/usr/include/c++/4.9/bits/stl_algobase.h ****       return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 433:/usr/include/c++/4.9/bits/stl_algobase.h **** 					     std::__niter_base(__last),
 434:/usr/include/c++/4.9/bits/stl_algobase.h **** 					     std::__niter_base(__result)));
 435:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 436:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 437:/usr/include/c++/4.9/bits/stl_algobase.h ****   /**
 438:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 439:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 440:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 441:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 442:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 443:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @return   result + (first - last)
 444:/usr/include/c++/4.9/bits/stl_algobase.h ****    *
 445:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 446:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 447:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 448:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 449:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 450:/usr/include/c++/4.9/bits/stl_algobase.h ****    *
 451:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 452:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  within [first,last).
 453:/usr/include/c++/4.9/bits/stl_algobase.h ****   */
 454:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 455:/usr/include/c++/4.9/bits/stl_algobase.h ****     inline _OI
 456:/usr/include/c++/4.9/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 457:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 458:/usr/include/c++/4.9/bits/stl_algobase.h ****       // concept requirements
 459:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 460:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 461:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 462:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 463:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 464:/usr/include/c++/4.9/bits/stl_algobase.h ****       return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
 465:/usr/include/c++/4.9/bits/stl_algobase.h **** 	      (std::__miter_base(__first), std::__miter_base(__last),
 466:/usr/include/c++/4.9/bits/stl_algobase.h **** 	       __result));
 467:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 468:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 469:/usr/include/c++/4.9/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 470:/usr/include/c++/4.9/bits/stl_algobase.h ****   /**
 471:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 472:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 473:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 474:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 475:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 476:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @return   result + (first - last)
 477:/usr/include/c++/4.9/bits/stl_algobase.h ****    *
 478:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 479:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 480:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 481:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 482:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 483:/usr/include/c++/4.9/bits/stl_algobase.h ****    *
 484:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 485:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  within [first,last).
 486:/usr/include/c++/4.9/bits/stl_algobase.h ****   */
 487:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 488:/usr/include/c++/4.9/bits/stl_algobase.h ****     inline _OI
 489:/usr/include/c++/4.9/bits/stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 490:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 491:/usr/include/c++/4.9/bits/stl_algobase.h ****       // concept requirements
 492:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 493:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 494:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 495:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 496:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 497:/usr/include/c++/4.9/bits/stl_algobase.h ****       return std::__copy_move_a2<true>(std::__miter_base(__first),
 498:/usr/include/c++/4.9/bits/stl_algobase.h **** 				       std::__miter_base(__last), __result);
 499:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 500:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 501:/usr/include/c++/4.9/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 502:/usr/include/c++/4.9/bits/stl_algobase.h **** #else
 503:/usr/include/c++/4.9/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 504:/usr/include/c++/4.9/bits/stl_algobase.h **** #endif
 505:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 506:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<bool, bool, typename>
 507:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct __copy_move_backward
 508:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 509:/usr/include/c++/4.9/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 510:/usr/include/c++/4.9/bits/stl_algobase.h ****         static _BI2
 511:/usr/include/c++/4.9/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 512:/usr/include/c++/4.9/bits/stl_algobase.h ****         {
 513:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  while (__first != __last)
 514:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    *--__result = *--__last;
 515:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  return __result;
 516:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
 517:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 518:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 519:/usr/include/c++/4.9/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 520:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _Category>
 521:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 522:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 523:/usr/include/c++/4.9/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 524:/usr/include/c++/4.9/bits/stl_algobase.h ****         static _BI2
 525:/usr/include/c++/4.9/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 526:/usr/include/c++/4.9/bits/stl_algobase.h ****         {
 527:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  while (__first != __last)
 528:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 529:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  return __result;
 530:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
 531:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 532:/usr/include/c++/4.9/bits/stl_algobase.h **** #endif
 533:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 534:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<>
 535:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 536:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 537:/usr/include/c++/4.9/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 538:/usr/include/c++/4.9/bits/stl_algobase.h ****         static _BI2
 539:/usr/include/c++/4.9/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 540:/usr/include/c++/4.9/bits/stl_algobase.h ****         {
 541:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 542:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 543:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    *--__result = *--__last;
 544:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  return __result;
 545:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
 546:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 547:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 548:/usr/include/c++/4.9/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 549:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<>
 550:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 551:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 552:/usr/include/c++/4.9/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 553:/usr/include/c++/4.9/bits/stl_algobase.h ****         static _BI2
 554:/usr/include/c++/4.9/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 555:/usr/include/c++/4.9/bits/stl_algobase.h ****         {
 556:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 557:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 558:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 559:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  return __result;
 560:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
 561:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 562:/usr/include/c++/4.9/bits/stl_algobase.h **** #endif
 563:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 564:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<bool _IsMove>
 565:/usr/include/c++/4.9/bits/stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 566:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 567:/usr/include/c++/4.9/bits/stl_algobase.h ****       template<typename _Tp>
 568:/usr/include/c++/4.9/bits/stl_algobase.h ****         static _Tp*
 569:/usr/include/c++/4.9/bits/stl_algobase.h ****         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 570:/usr/include/c++/4.9/bits/stl_algobase.h ****         {
 571:/usr/include/c++/4.9/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 572:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 573:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  static_assert( is_copy_assignable<_Tp>::value,
 574:/usr/include/c++/4.9/bits/stl_algobase.h **** 	                 "type is not assignable" );
 575:/usr/include/c++/4.9/bits/stl_algobase.h **** #endif
 576:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 577:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  if (_Num)
 578:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 579:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  return __result - _Num;
 580:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
 581:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 582:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 583:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 584:/usr/include/c++/4.9/bits/stl_algobase.h ****     inline _BI2
 585:/usr/include/c++/4.9/bits/stl_algobase.h ****     __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 586:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 587:/usr/include/c++/4.9/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::value_type _ValueType1;
 588:/usr/include/c++/4.9/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI2>::value_type _ValueType2;
 589:/usr/include/c++/4.9/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 590:/usr/include/c++/4.9/bits/stl_algobase.h ****       const bool __simple = (__is_trivial(_ValueType1)
 591:/usr/include/c++/4.9/bits/stl_algobase.h **** 	                     && __is_pointer<_BI1>::__value
 592:/usr/include/c++/4.9/bits/stl_algobase.h **** 	                     && __is_pointer<_BI2>::__value
 593:/usr/include/c++/4.9/bits/stl_algobase.h **** 			     && __are_same<_ValueType1, _ValueType2>::__value);
 594:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 595:/usr/include/c++/4.9/bits/stl_algobase.h ****       return std::__copy_move_backward<_IsMove, __simple,
 596:/usr/include/c++/4.9/bits/stl_algobase.h **** 	                               _Category>::__copy_move_b(__first,
 597:/usr/include/c++/4.9/bits/stl_algobase.h **** 								 __last,
 598:/usr/include/c++/4.9/bits/stl_algobase.h **** 								 __result);
 599:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 600:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 601:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 602:/usr/include/c++/4.9/bits/stl_algobase.h ****     inline _BI2
 603:/usr/include/c++/4.9/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 604:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 605:/usr/include/c++/4.9/bits/stl_algobase.h ****       return _BI2(std::__copy_move_backward_a<_IsMove>
 606:/usr/include/c++/4.9/bits/stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 607:/usr/include/c++/4.9/bits/stl_algobase.h **** 		   std::__niter_base(__result)));
 608:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 609:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 610:/usr/include/c++/4.9/bits/stl_algobase.h ****   /**
 611:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 612:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 613:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 614:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 615:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 616:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  @return   result - (first - last)
 617:/usr/include/c++/4.9/bits/stl_algobase.h ****    *
 618:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 619:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 620:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 621:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 622:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 623:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 624:/usr/include/c++/4.9/bits/stl_algobase.h ****    *
 625:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 626:/usr/include/c++/4.9/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 627:/usr/include/c++/4.9/bits/stl_algobase.h ****   */
 628:/usr/include/c++/4.9/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 629:/usr/include/c++/4.9/bits/stl_algobase.h ****     inline _BI2
 630:/usr/include/c++/4.9/bits/stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 2545              		.loc 12 630 0
 2546              		.cfi_startproc
 2547 0000 55       		pushq	%rbp
 2548              		.cfi_def_cfa_offset 16
 2549              		.cfi_offset 6, -16
 2550 0001 4889E5   		movq	%rsp, %rbp
 2551              		.cfi_def_cfa_register 6
 2552 0004 53       		pushq	%rbx
 2553 0005 4883EC28 		subq	$40, %rsp
 2554              		.cfi_offset 3, -24
 2555 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2556 000d 488975E0 		movq	%rsi, -32(%rbp)
 2557 0011 488955D8 		movq	%rdx, -40(%rbp)
 631:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 632:/usr/include/c++/4.9/bits/stl_algobase.h ****       // concept requirements
 633:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 634:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 635:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 636:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 637:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 638:/usr/include/c++/4.9/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 639:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 640:/usr/include/c++/4.9/bits/stl_algobase.h ****       return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
 641:/usr/include/c++/4.9/bits/stl_algobase.h **** 	      (std::__miter_base(__first), std::__miter_base(__last),
 642:/usr/include/c++/4.9/bits/stl_algobase.h **** 	       __result));
 2558              		.loc 12 642 0
 2559 0015 488B45E0 		movq	-32(%rbp), %rax
 2560 0019 4889C7   		movq	%rax, %rdi
 2561 001c E8000000 		call	_ZSt12__miter_baseIPN8UnitTest18DeferredTestResultEENSt11_Miter_baseIT_E13iterator_typeES4_@P
 2561      00
 2562 0021 4889C3   		movq	%rax, %rbx
 2563 0024 488B45E8 		movq	-24(%rbp), %rax
 2564 0028 4889C7   		movq	%rax, %rdi
 2565 002b E8000000 		call	_ZSt12__miter_baseIPN8UnitTest18DeferredTestResultEENSt11_Miter_baseIT_E13iterator_typeES4_@P
 2565      00
 2566 0030 4889C1   		movq	%rax, %rcx
 2567 0033 488B45D8 		movq	-40(%rbp), %rax
 2568 0037 4889C2   		movq	%rax, %rdx
 2569 003a 4889DE   		movq	%rbx, %rsi
 2570 003d 4889CF   		movq	%rcx, %rdi
 2571 0040 E8000000 		call	_ZSt23__copy_move_backward_a2ILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_@PLT
 2571      00
 643:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 2572              		.loc 12 643 0
 2573 0045 4883C428 		addq	$40, %rsp
 2574 0049 5B       		popq	%rbx
 2575 004a 5D       		popq	%rbp
 2576              		.cfi_def_cfa 7, 8
 2577 004b C3       		ret
 2578              		.cfi_endproc
 2579              	.LFE955:
 2581              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EEaSERKS3_,"axG",@progbits,_ZNSt6vectorISt4pairIiSsE
 2582              		.align 2
 2583              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EEaSERKS3_
 2585              	_ZNSt6vectorISt4pairIiSsESaIS1_EEaSERKS3_:
 2586              	.LFB957:
 167:/usr/include/c++/4.9/bits/vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 2587              		.loc 8 167 0
 2588              		.cfi_startproc
 2589 0000 55       		pushq	%rbp
 2590              		.cfi_def_cfa_offset 16
 2591              		.cfi_offset 6, -16
 2592 0001 4889E5   		movq	%rsp, %rbp
 2593              		.cfi_def_cfa_register 6
 2594 0004 4156     		pushq	%r14
 2595 0006 4155     		pushq	%r13
 2596 0008 4154     		pushq	%r12
 2597 000a 53       		pushq	%rbx
 2598 000b 4883EC20 		subq	$32, %rsp
 2599              		.cfi_offset 14, -24
 2600              		.cfi_offset 13, -32
 2601              		.cfi_offset 12, -40
 2602              		.cfi_offset 3, -48
 2603 000f 48897DC8 		movq	%rdi, -56(%rbp)
 2604 0013 488975C0 		movq	%rsi, -64(%rbp)
 2605              	.LBB33:
 2606              	.LBB34:
 170:/usr/include/c++/4.9/bits/vector.tcc **** 	{
 2607              		.loc 8 170 0
 2608 0017 488B45C0 		movq	-64(%rbp), %rax
 2609 001b 483B45C8 		cmpq	-56(%rbp), %rax
 2610 001f 0F840302 		je	.L126
 2610      0000
 2611              	.LBB35:
 191:/usr/include/c++/4.9/bits/vector.tcc **** 	  if (__xlen > capacity())
 2612              		.loc 8 191 0
 2613 0025 488B45C0 		movq	-64(%rbp), %rax
 2614 0029 4889C7   		movq	%rax, %rdi
 2615 002c E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 2615      00
 2616 0031 488945D0 		movq	%rax, -48(%rbp)
 2617              	.LBB36:
 192:/usr/include/c++/4.9/bits/vector.tcc **** 	    {
 2618              		.loc 8 192 0
 2619 0035 488B45C8 		movq	-56(%rbp), %rax
 2620 0039 4889C7   		movq	%rax, %rdi
 2621 003c E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8capacityEv@PLT
 2621      00
 2622 0041 483B45D0 		cmpq	-48(%rbp), %rax
 2623 0045 0F92C0   		setb	%al
 2624 0048 84C0     		testb	%al, %al
 2625 004a 0F84BD00 		je	.L127
 2625      0000
 2626              	.LBB37:
 195:/usr/include/c++/4.9/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 2627              		.loc 8 195 0
 2628 0050 488B45C0 		movq	-64(%rbp), %rax
 2629 0054 4889C7   		movq	%rax, %rdi
 2630 0057 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv@PLT
 2630      00
 2631 005c 4889C3   		movq	%rax, %rbx
 2632 005f 488B45C0 		movq	-64(%rbp), %rax
 2633 0063 4889C7   		movq	%rax, %rdi
 2634 0066 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv@PLT
 2634      00
 2635 006b 4889C2   		movq	%rax, %rdx
 2636 006e 488B75D0 		movq	-48(%rbp), %rsi
 2637 0072 488B45C8 		movq	-56(%rbp), %rax
 2638 0076 4889D9   		movq	%rbx, %rcx
 2639 0079 4889C7   		movq	%rax, %rdi
 2640 007c E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S
 2640      00
 2641 0081 488945D8 		movq	%rax, -40(%rbp)
 197:/usr/include/c++/4.9/bits/vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 2642              		.loc 8 197 0
 2643 0085 488B45C8 		movq	-56(%rbp), %rax
 2644 0089 4889C7   		movq	%rax, %rdi
 2645 008c E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 2645      00
 2646 0091 4889C2   		movq	%rax, %rdx
 2647 0094 488B45C8 		movq	-56(%rbp), %rax
 2648 0098 488B4808 		movq	8(%rax), %rcx
 2649 009c 488B45C8 		movq	-56(%rbp), %rax
 2650 00a0 488B00   		movq	(%rax), %rax
 196:/usr/include/c++/4.9/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 2651              		.loc 8 196 0
 2652 00a3 4889CE   		movq	%rcx, %rsi
 2653 00a6 4889C7   		movq	%rax, %rdi
 2654 00a9 E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E@PLT
 2654      00
 200:/usr/include/c++/4.9/bits/vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 2655              		.loc 8 200 0
 2656 00ae 488B45C8 		movq	-56(%rbp), %rax
 2657 00b2 488B4010 		movq	16(%rax), %rax
 2658 00b6 4889C2   		movq	%rax, %rdx
 2659 00b9 488B45C8 		movq	-56(%rbp), %rax
 2660 00bd 488B00   		movq	(%rax), %rax
 2661 00c0 4829C2   		subq	%rax, %rdx
 2662 00c3 4889D0   		movq	%rdx, %rax
 2663 00c6 48C1F804 		sarq	$4, %rax
 2664 00ca 4889C2   		movq	%rax, %rdx
 2665 00cd 488B45C8 		movq	-56(%rbp), %rax
 2666 00d1 488B08   		movq	(%rax), %rcx
 2667 00d4 488B45C8 		movq	-56(%rbp), %rax
 198:/usr/include/c++/4.9/bits/vector.tcc **** 			    this->_M_impl._M_end_of_storage
 2668              		.loc 8 198 0
 2669 00d8 4889CE   		movq	%rcx, %rsi
 2670 00db 4889C7   		movq	%rax, %rdi
 2671 00de E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m@PLT
 2671      00
 201:/usr/include/c++/4.9/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 2672              		.loc 8 201 0
 2673 00e3 488B45C8 		movq	-56(%rbp), %rax
 2674 00e7 488B55D8 		movq	-40(%rbp), %rdx
 2675 00eb 488910   		movq	%rdx, (%rax)
 202:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 2676              		.loc 8 202 0
 2677 00ee 488B45C8 		movq	-56(%rbp), %rax
 2678 00f2 488B00   		movq	(%rax), %rax
 2679 00f5 488B55D0 		movq	-48(%rbp), %rdx
 2680 00f9 48C1E204 		salq	$4, %rdx
 2681 00fd 4801C2   		addq	%rax, %rdx
 2682 0100 488B45C8 		movq	-56(%rbp), %rax
 2683 0104 48895010 		movq	%rdx, 16(%rax)
 2684              	.LBE37:
 2685 0108 E9010100 		jmp	.L128
 2685      00
 2686              	.L127:
 204:/usr/include/c++/4.9/bits/vector.tcc **** 	    {
 2687              		.loc 8 204 0
 2688 010d 488B45C8 		movq	-56(%rbp), %rax
 2689 0111 4889C7   		movq	%rax, %rdi
 2690 0114 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 2690      00
 2691 0119 483B45D0 		cmpq	-48(%rbp), %rax
 2692 011d 0F93C0   		setnb	%al
 2693 0120 84C0     		testb	%al, %al
 2694 0122 7469     		je	.L129
 207:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 2695              		.loc 8 207 0
 2696 0124 488B45C8 		movq	-56(%rbp), %rax
 2697 0128 4889C7   		movq	%rax, %rdi
 2698 012b E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 2698      00
 2699 0130 4989C4   		movq	%rax, %r12
 2700 0133 488B45C8 		movq	-56(%rbp), %rax
 2701 0137 4889C7   		movq	%rax, %rdi
 2702 013a E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EE3endEv@PLT
 2702      00
 2703 013f 4889C3   		movq	%rax, %rbx
 2704 0142 488B45C8 		movq	-56(%rbp), %rax
 2705 0146 4889C7   		movq	%rax, %rdi
 2706 0149 E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EE5beginEv@PLT
 2706      00
 2707 014e 4989C6   		movq	%rax, %r14
 2708 0151 488B45C0 		movq	-64(%rbp), %rax
 2709 0155 4889C7   		movq	%rax, %rdi
 2710 0158 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv@PLT
 2710      00
 2711 015d 4989C5   		movq	%rax, %r13
 2712 0160 488B45C0 		movq	-64(%rbp), %rax
 2713 0164 4889C7   		movq	%rax, %rdi
 2714 0167 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv@PLT
 2714      00
 2715 016c 4C89F2   		movq	%r14, %rdx
 2716 016f 4C89EE   		movq	%r13, %rsi
 2717 0172 4889C7   		movq	%rax, %rdi
 2718 0175 E8000000 		call	_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEE
 2718      00
 206:/usr/include/c++/4.9/bits/vector.tcc **** 			    end(), _M_get_Tp_allocator());
 2719              		.loc 8 206 0
 2720 017a 4C89E2   		movq	%r12, %rdx
 2721 017d 4889DE   		movq	%rbx, %rsi
 2722 0180 4889C7   		movq	%rax, %rdi
 2723 0183 E8000000 		call	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEES3_EvT_S9_RS
 2723      00
 2724 0188 E9810000 		jmp	.L128
 2724      00
 2725              	.L129:
 212:/usr/include/c++/4.9/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 2726              		.loc 8 212 0
 2727 018d 488B45C8 		movq	-56(%rbp), %rax
 2728 0191 488B18   		movq	(%rax), %rbx
 2729 0194 488B45C0 		movq	-64(%rbp), %rax
 2730 0198 4C8B20   		movq	(%rax), %r12
 211:/usr/include/c++/4.9/bits/vector.tcc **** 			this->_M_impl._M_start);
 2731              		.loc 8 211 0
 2732 019b 488B45C8 		movq	-56(%rbp), %rax
 2733 019f 4889C7   		movq	%rax, %rdi
 2734 01a2 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 2734      00
 212:/usr/include/c++/4.9/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 2735              		.loc 8 212 0
 2736 01a7 48C1E004 		salq	$4, %rax
 2737 01ab 498D0C04 		leaq	(%r12,%rax), %rcx
 2738 01af 488B45C0 		movq	-64(%rbp), %rax
 2739 01b3 488B00   		movq	(%rax), %rax
 211:/usr/include/c++/4.9/bits/vector.tcc **** 			this->_M_impl._M_start);
 2740              		.loc 8 211 0
 2741 01b6 4889DA   		movq	%rbx, %rdx
 2742 01b9 4889CE   		movq	%rcx, %rsi
 2743 01bc 4889C7   		movq	%rax, %rdi
 2744 01bf E8000000 		call	_ZSt4copyIPSt4pairIiSsES2_ET0_T_S4_S3_@PLT
 2744      00
 216:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 2745              		.loc 8 216 0
 2746 01c4 488B45C8 		movq	-56(%rbp), %rax
 2747 01c8 4889C7   		movq	%rax, %rdi
 2748 01cb E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 2748      00
 2749 01d0 4989C6   		movq	%rax, %r14
 2750 01d3 488B45C8 		movq	-56(%rbp), %rax
 2751 01d7 4C8B6008 		movq	8(%rax), %r12
 2752 01db 488B45C0 		movq	-64(%rbp), %rax
 2753 01df 488B5808 		movq	8(%rax), %rbx
 2754 01e3 488B45C0 		movq	-64(%rbp), %rax
 2755 01e7 4C8B28   		movq	(%rax), %r13
 213:/usr/include/c++/4.9/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 2756              		.loc 8 213 0
 2757 01ea 488B45C8 		movq	-56(%rbp), %rax
 2758 01ee 4889C7   		movq	%rax, %rdi
 2759 01f1 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 2759      00
 216:/usr/include/c++/4.9/bits/vector.tcc **** 	    }
 2760              		.loc 8 216 0
 2761 01f6 48C1E004 		salq	$4, %rax
 2762 01fa 4C01E8   		addq	%r13, %rax
 213:/usr/include/c++/4.9/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 2763              		.loc 8 213 0
 2764 01fd 4C89F1   		movq	%r14, %rcx
 2765 0200 4C89E2   		movq	%r12, %rdx
 2766 0203 4889DE   		movq	%rbx, %rsi
 2767 0206 4889C7   		movq	%rax, %rdi
 2768 0209 E8000000 		call	_ZSt22__uninitialized_copy_aIPSt4pairIiSsES2_S1_ET0_T_S4_S3_RSaIT1_E@PLT
 2768      00
 2769              	.L128:
 2770              	.LBE36:
 218:/usr/include/c++/4.9/bits/vector.tcc **** 	}
 2771              		.loc 8 218 0
 2772 020e 488B45C8 		movq	-56(%rbp), %rax
 2773 0212 488B00   		movq	(%rax), %rax
 2774 0215 488B55D0 		movq	-48(%rbp), %rdx
 2775 0219 48C1E204 		salq	$4, %rdx
 2776 021d 4801C2   		addq	%rax, %rdx
 2777 0220 488B45C8 		movq	-56(%rbp), %rax
 2778 0224 48895008 		movq	%rdx, 8(%rax)
 2779              	.L126:
 2780              	.LBE35:
 2781              	.LBE34:
 220:/usr/include/c++/4.9/bits/vector.tcc ****     }
 2782              		.loc 8 220 0
 2783 0228 488B45C8 		movq	-56(%rbp), %rax
 2784              	.LBE33:
 221:/usr/include/c++/4.9/bits/vector.tcc **** 
 2785              		.loc 8 221 0
 2786 022c 4883C420 		addq	$32, %rsp
 2787 0230 5B       		popq	%rbx
 2788 0231 415C     		popq	%r12
 2789 0233 415D     		popq	%r13
 2790 0235 415E     		popq	%r14
 2791 0237 5D       		popq	%rbp
 2792              		.cfi_def_cfa 7, 8
 2793 0238 C3       		ret
 2794              		.cfi_endproc
 2795              	.LFE957:
 2797              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc,"axG",@pro
 2798              		.align 2
 2799              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc
 2801              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc:
 2802              	.LFB958:
 928:/usr/include/c++/4.9/bits/stl_vector.h **** 
 929:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 930:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 931:/usr/include/c++/4.9/bits/stl_vector.h ****       push_back(value_type&& __x)
 932:/usr/include/c++/4.9/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
 933:/usr/include/c++/4.9/bits/stl_vector.h **** 
 934:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename... _Args>
 935:/usr/include/c++/4.9/bits/stl_vector.h ****         void
 936:/usr/include/c++/4.9/bits/stl_vector.h ****         emplace_back(_Args&&... __args);
 937:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 938:/usr/include/c++/4.9/bits/stl_vector.h **** 
 939:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 940:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Removes last element.
 941:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 942:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
 943:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 944:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
 945:/usr/include/c++/4.9/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
 946:/usr/include/c++/4.9/bits/stl_vector.h ****        *  called.
 947:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 948:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 949:/usr/include/c++/4.9/bits/stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
 950:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 951:/usr/include/c++/4.9/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
 952:/usr/include/c++/4.9/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 953:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 954:/usr/include/c++/4.9/bits/stl_vector.h **** 
 955:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 956:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 957:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
 958:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
 959:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __args  Arguments.
 960:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 961:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 962:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
 963:/usr/include/c++/4.9/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
 964:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
 965:/usr/include/c++/4.9/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
 966:/usr/include/c++/4.9/bits/stl_vector.h ****        *  std::list.
 967:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 968:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename... _Args>
 969:/usr/include/c++/4.9/bits/stl_vector.h ****         iterator
 970:/usr/include/c++/4.9/bits/stl_vector.h ****         emplace(const_iterator __position, _Args&&... __args);
 971:/usr/include/c++/4.9/bits/stl_vector.h **** 
 972:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 973:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
 974:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
 975:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
 976:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 977:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 978:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
 979:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
 980:/usr/include/c++/4.9/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 981:/usr/include/c++/4.9/bits/stl_vector.h ****        *  used the user should consider using std::list.
 982:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 983:/usr/include/c++/4.9/bits/stl_vector.h ****       iterator
 984:/usr/include/c++/4.9/bits/stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
 985:/usr/include/c++/4.9/bits/stl_vector.h **** #else
 986:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 987:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
 988:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
 989:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
 990:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 991:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 992:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
 993:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
 994:/usr/include/c++/4.9/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 995:/usr/include/c++/4.9/bits/stl_vector.h ****        *  used the user should consider using std::list.
 996:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 997:/usr/include/c++/4.9/bits/stl_vector.h ****       iterator
 998:/usr/include/c++/4.9/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
 999:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
1000:/usr/include/c++/4.9/bits/stl_vector.h **** 
1001:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1002:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
1003:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1004:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1005:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1006:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1007:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1008:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1009:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1010:/usr/include/c++/4.9/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1011:/usr/include/c++/4.9/bits/stl_vector.h ****        *  used the user should consider using std::list.
1012:/usr/include/c++/4.9/bits/stl_vector.h ****        */
1013:/usr/include/c++/4.9/bits/stl_vector.h ****       iterator
1014:/usr/include/c++/4.9/bits/stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1015:/usr/include/c++/4.9/bits/stl_vector.h ****       { return emplace(__position, std::move(__x)); }
1016:/usr/include/c++/4.9/bits/stl_vector.h **** 
1017:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
1018:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1019:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1020:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
1021:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1022:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function will insert copies of the data in the 
1023:/usr/include/c++/4.9/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1024:/usr/include/c++/4.9/bits/stl_vector.h ****        *  specified by @a position.
1025:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1026:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1027:/usr/include/c++/4.9/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1028:/usr/include/c++/4.9/bits/stl_vector.h ****        *  consider using std::list.
1029:/usr/include/c++/4.9/bits/stl_vector.h ****        */
1030:/usr/include/c++/4.9/bits/stl_vector.h ****       iterator
1031:/usr/include/c++/4.9/bits/stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1032:/usr/include/c++/4.9/bits/stl_vector.h ****       { return this->insert(__position, __l.begin(), __l.end()); }
1033:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
1034:/usr/include/c++/4.9/bits/stl_vector.h **** 
1035:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1036:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
1037:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1038:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1039:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1040:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1041:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1042:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1043:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1044:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1045:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1046:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1047:/usr/include/c++/4.9/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1048:/usr/include/c++/4.9/bits/stl_vector.h ****        *  consider using std::list.
1049:/usr/include/c++/4.9/bits/stl_vector.h ****        */
1050:/usr/include/c++/4.9/bits/stl_vector.h ****       iterator
1051:/usr/include/c++/4.9/bits/stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1052:/usr/include/c++/4.9/bits/stl_vector.h ****       {
1053:/usr/include/c++/4.9/bits/stl_vector.h **** 	difference_type __offset = __position - cbegin();
1054:/usr/include/c++/4.9/bits/stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1055:/usr/include/c++/4.9/bits/stl_vector.h **** 	return begin() + __offset;
1056:/usr/include/c++/4.9/bits/stl_vector.h ****       }
1057:/usr/include/c++/4.9/bits/stl_vector.h **** #else
1058:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
1059:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1060:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1061:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1062:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1063:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1064:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1065:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1066:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1067:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1068:/usr/include/c++/4.9/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1069:/usr/include/c++/4.9/bits/stl_vector.h ****        *  consider using std::list.
1070:/usr/include/c++/4.9/bits/stl_vector.h ****        */
1071:/usr/include/c++/4.9/bits/stl_vector.h ****       void
1072:/usr/include/c++/4.9/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1073:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1074:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
1075:/usr/include/c++/4.9/bits/stl_vector.h **** 
1076:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1077:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
1078:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1079:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1080:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1081:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1082:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1083:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1084:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1085:/usr/include/c++/4.9/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1086:/usr/include/c++/4.9/bits/stl_vector.h ****        *  by @a pos.
1087:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1088:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1089:/usr/include/c++/4.9/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1090:/usr/include/c++/4.9/bits/stl_vector.h ****        *  consider using std::list.
1091:/usr/include/c++/4.9/bits/stl_vector.h ****        */
1092:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator,
1093:/usr/include/c++/4.9/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1094:/usr/include/c++/4.9/bits/stl_vector.h ****         iterator
1095:/usr/include/c++/4.9/bits/stl_vector.h ****         insert(const_iterator __position, _InputIterator __first,
1096:/usr/include/c++/4.9/bits/stl_vector.h **** 	       _InputIterator __last)
1097:/usr/include/c++/4.9/bits/stl_vector.h ****         {
1098:/usr/include/c++/4.9/bits/stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1099:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1100:/usr/include/c++/4.9/bits/stl_vector.h **** 			     __first, __last, __false_type());
1101:/usr/include/c++/4.9/bits/stl_vector.h **** 	  return begin() + __offset;
1102:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
1103:/usr/include/c++/4.9/bits/stl_vector.h **** #else
1104:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
1105:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1106:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1107:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1108:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1109:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1110:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1111:/usr/include/c++/4.9/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1112:/usr/include/c++/4.9/bits/stl_vector.h ****        *  by @a pos.
1113:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1114:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1115:/usr/include/c++/4.9/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1116:/usr/include/c++/4.9/bits/stl_vector.h ****        *  consider using std::list.
1117:/usr/include/c++/4.9/bits/stl_vector.h ****        */
1118:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator>
1119:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1120:/usr/include/c++/4.9/bits/stl_vector.h ****         insert(iterator __position, _InputIterator __first,
1121:/usr/include/c++/4.9/bits/stl_vector.h **** 	       _InputIterator __last)
1122:/usr/include/c++/4.9/bits/stl_vector.h ****         {
1123:/usr/include/c++/4.9/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1124:/usr/include/c++/4.9/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1125:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1126:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
1127:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
1128:/usr/include/c++/4.9/bits/stl_vector.h **** 
1129:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
1130:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1131:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1132:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1133:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1134:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1135:/usr/include/c++/4.9/bits/stl_vector.h ****        *  shorten the %vector by one.
1136:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1137:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1138:/usr/include/c++/4.9/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1139:/usr/include/c++/4.9/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1140:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1141:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1142:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1143:/usr/include/c++/4.9/bits/stl_vector.h ****        */
1144:/usr/include/c++/4.9/bits/stl_vector.h ****       iterator
1145:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1146:/usr/include/c++/4.9/bits/stl_vector.h ****       erase(const_iterator __position)
1147:/usr/include/c++/4.9/bits/stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1148:/usr/include/c++/4.9/bits/stl_vector.h **** #else
1149:/usr/include/c++/4.9/bits/stl_vector.h ****       erase(iterator __position)
1150:/usr/include/c++/4.9/bits/stl_vector.h ****       { return _M_erase(__position); }
1151:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
1152:/usr/include/c++/4.9/bits/stl_vector.h **** 
1153:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
1154:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
1155:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1156:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1157:/usr/include/c++/4.9/bits/stl_vector.h ****        *                  erased.
1158:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1159:/usr/include/c++/4.9/bits/stl_vector.h ****        *           prior to erasing (or end()).
1160:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1161:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function will erase the elements in the range
1162:/usr/include/c++/4.9/bits/stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1163:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1164:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1165:/usr/include/c++/4.9/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1166:/usr/include/c++/4.9/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1167:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1168:/usr/include/c++/4.9/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1169:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1170:/usr/include/c++/4.9/bits/stl_vector.h ****        */
1171:/usr/include/c++/4.9/bits/stl_vector.h ****       iterator
1172:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1173:/usr/include/c++/4.9/bits/stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1174:/usr/include/c++/4.9/bits/stl_vector.h ****       {
1175:/usr/include/c++/4.9/bits/stl_vector.h **** 	const auto __beg = begin();
1176:/usr/include/c++/4.9/bits/stl_vector.h **** 	const auto __cbeg = cbegin();
1177:/usr/include/c++/4.9/bits/stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1178:/usr/include/c++/4.9/bits/stl_vector.h ****       }
1179:/usr/include/c++/4.9/bits/stl_vector.h **** #else
1180:/usr/include/c++/4.9/bits/stl_vector.h ****       erase(iterator __first, iterator __last)
1181:/usr/include/c++/4.9/bits/stl_vector.h ****       { return _M_erase(__first, __last); }
1182:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
1183:/usr/include/c++/4.9/bits/stl_vector.h **** 
1184:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
1185:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1186:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1187:/usr/include/c++/4.9/bits/stl_vector.h ****        *
1188:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1189:/usr/include/c++/4.9/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1190:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1191:/usr/include/c++/4.9/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1192:/usr/include/c++/4.9/bits/stl_vector.h ****        */
1193:/usr/include/c++/4.9/bits/stl_vector.h ****       void
1194:/usr/include/c++/4.9/bits/stl_vector.h ****       swap(vector& __x)
1195:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1196:/usr/include/c++/4.9/bits/stl_vector.h ****       noexcept(_Alloc_traits::_S_nothrow_swap())
1197:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
1198:/usr/include/c++/4.9/bits/stl_vector.h ****       {
1199:/usr/include/c++/4.9/bits/stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1200:/usr/include/c++/4.9/bits/stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1201:/usr/include/c++/4.9/bits/stl_vector.h **** 	                          __x._M_get_Tp_allocator());
1202:/usr/include/c++/4.9/bits/stl_vector.h ****       }
1203:/usr/include/c++/4.9/bits/stl_vector.h **** 
1204:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
1205:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1206:/usr/include/c++/4.9/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1207:/usr/include/c++/4.9/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1208:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the user's responsibility.
1209:/usr/include/c++/4.9/bits/stl_vector.h ****        */
1210:/usr/include/c++/4.9/bits/stl_vector.h ****       void
1211:/usr/include/c++/4.9/bits/stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1212:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1213:/usr/include/c++/4.9/bits/stl_vector.h **** 
1214:/usr/include/c++/4.9/bits/stl_vector.h ****     protected:
1215:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
1216:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1217:/usr/include/c++/4.9/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1218:/usr/include/c++/4.9/bits/stl_vector.h ****        */
1219:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _ForwardIterator>
1220:/usr/include/c++/4.9/bits/stl_vector.h ****         pointer
1221:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_allocate_and_copy(size_type __n,
1222:/usr/include/c++/4.9/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1223:/usr/include/c++/4.9/bits/stl_vector.h ****         {
1224:/usr/include/c++/4.9/bits/stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1225:/usr/include/c++/4.9/bits/stl_vector.h **** 	  __try
1226:/usr/include/c++/4.9/bits/stl_vector.h **** 	    {
1227:/usr/include/c++/4.9/bits/stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1228:/usr/include/c++/4.9/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
1229:/usr/include/c++/4.9/bits/stl_vector.h **** 	      return __result;
1230:/usr/include/c++/4.9/bits/stl_vector.h **** 	    }
1231:/usr/include/c++/4.9/bits/stl_vector.h **** 	  __catch(...)
1232:/usr/include/c++/4.9/bits/stl_vector.h **** 	    {
1233:/usr/include/c++/4.9/bits/stl_vector.h **** 	      _M_deallocate(__result, __n);
1234:/usr/include/c++/4.9/bits/stl_vector.h **** 	      __throw_exception_again;
1235:/usr/include/c++/4.9/bits/stl_vector.h **** 	    }
1236:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
1237:/usr/include/c++/4.9/bits/stl_vector.h **** 
1238:/usr/include/c++/4.9/bits/stl_vector.h **** 
1239:/usr/include/c++/4.9/bits/stl_vector.h ****       // Internal constructor functions follow.
1240:/usr/include/c++/4.9/bits/stl_vector.h **** 
1241:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1242:/usr/include/c++/4.9/bits/stl_vector.h **** 
1243:/usr/include/c++/4.9/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1244:/usr/include/c++/4.9/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1245:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _Integer>
1246:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1247:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1248:/usr/include/c++/4.9/bits/stl_vector.h ****         {
1249:/usr/include/c++/4.9/bits/stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
1250:/usr/include/c++/4.9/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1251:/usr/include/c++/4.9/bits/stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1252:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1253:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
1254:/usr/include/c++/4.9/bits/stl_vector.h **** 
1255:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1256:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator>
1257:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1258:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1259:/usr/include/c++/4.9/bits/stl_vector.h **** 			       __false_type)
1260:/usr/include/c++/4.9/bits/stl_vector.h ****         {
1261:/usr/include/c++/4.9/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1262:/usr/include/c++/4.9/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1263:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last, _IterCategory());
1264:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
1265:/usr/include/c++/4.9/bits/stl_vector.h **** 
1266:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1267:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator>
1268:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1269:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_range_initialize(_InputIterator __first,
1270:/usr/include/c++/4.9/bits/stl_vector.h **** 			    _InputIterator __last, std::input_iterator_tag)
1271:/usr/include/c++/4.9/bits/stl_vector.h ****         {
1272:/usr/include/c++/4.9/bits/stl_vector.h **** 	  for (; __first != __last; ++__first)
1273:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1274:/usr/include/c++/4.9/bits/stl_vector.h **** 	    emplace_back(*__first);
1275:/usr/include/c++/4.9/bits/stl_vector.h **** #else
1276:/usr/include/c++/4.9/bits/stl_vector.h **** 	    push_back(*__first);
1277:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
1278:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
1279:/usr/include/c++/4.9/bits/stl_vector.h **** 
1280:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1281:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _ForwardIterator>
1282:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1283:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_range_initialize(_ForwardIterator __first,
1284:/usr/include/c++/4.9/bits/stl_vector.h **** 			    _ForwardIterator __last, std::forward_iterator_tag)
1285:/usr/include/c++/4.9/bits/stl_vector.h ****         {
1286:/usr/include/c++/4.9/bits/stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1287:/usr/include/c++/4.9/bits/stl_vector.h **** 	  this->_M_impl._M_start = this->_M_allocate(__n);
1288:/usr/include/c++/4.9/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1289:/usr/include/c++/4.9/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
1290:/usr/include/c++/4.9/bits/stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1291:/usr/include/c++/4.9/bits/stl_vector.h **** 					this->_M_impl._M_start,
1292:/usr/include/c++/4.9/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1293:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
1294:/usr/include/c++/4.9/bits/stl_vector.h **** 
1295:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1296:/usr/include/c++/4.9/bits/stl_vector.h ****       // vector(n,value,a) constructor.
1297:/usr/include/c++/4.9/bits/stl_vector.h ****       void
1298:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1299:/usr/include/c++/4.9/bits/stl_vector.h ****       {
1300:/usr/include/c++/4.9/bits/stl_vector.h **** 	std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value, 
1301:/usr/include/c++/4.9/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
1302:/usr/include/c++/4.9/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
1303:/usr/include/c++/4.9/bits/stl_vector.h ****       }
1304:/usr/include/c++/4.9/bits/stl_vector.h **** 
1305:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1306:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the vector(n) constructor.
1307:/usr/include/c++/4.9/bits/stl_vector.h ****       void
1308:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_default_initialize(size_type __n)
1309:/usr/include/c++/4.9/bits/stl_vector.h ****       {
1310:/usr/include/c++/4.9/bits/stl_vector.h **** 	std::__uninitialized_default_n_a(this->_M_impl._M_start, __n, 
1311:/usr/include/c++/4.9/bits/stl_vector.h **** 					 _M_get_Tp_allocator());
1312:/usr/include/c++/4.9/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
1313:/usr/include/c++/4.9/bits/stl_vector.h ****       }
1314:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
1315:/usr/include/c++/4.9/bits/stl_vector.h **** 
1316:/usr/include/c++/4.9/bits/stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1317:/usr/include/c++/4.9/bits/stl_vector.h ****       // assignment work for the range versions.
1318:/usr/include/c++/4.9/bits/stl_vector.h **** 
1319:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1320:/usr/include/c++/4.9/bits/stl_vector.h **** 
1321:/usr/include/c++/4.9/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1322:/usr/include/c++/4.9/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1323:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _Integer>
1324:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1325:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1326:/usr/include/c++/4.9/bits/stl_vector.h ****         { _M_fill_assign(__n, __val); }
1327:/usr/include/c++/4.9/bits/stl_vector.h **** 
1328:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1329:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator>
1330:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1331:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1332:/usr/include/c++/4.9/bits/stl_vector.h **** 			   __false_type)
1333:/usr/include/c++/4.9/bits/stl_vector.h ****         {
1334:/usr/include/c++/4.9/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1335:/usr/include/c++/4.9/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1336:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_assign_aux(__first, __last, _IterCategory());
1337:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
1338:/usr/include/c++/4.9/bits/stl_vector.h **** 
1339:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1340:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator>
1341:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1342:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_assign_aux(_InputIterator __first, _InputIterator __last,
1343:/usr/include/c++/4.9/bits/stl_vector.h **** 		      std::input_iterator_tag);
1344:/usr/include/c++/4.9/bits/stl_vector.h **** 
1345:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1346:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _ForwardIterator>
1347:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1348:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1349:/usr/include/c++/4.9/bits/stl_vector.h **** 		      std::forward_iterator_tag);
1350:/usr/include/c++/4.9/bits/stl_vector.h **** 
1351:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1352:/usr/include/c++/4.9/bits/stl_vector.h ****       // to be the same thing.
1353:/usr/include/c++/4.9/bits/stl_vector.h ****       void
1354:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1355:/usr/include/c++/4.9/bits/stl_vector.h **** 
1356:/usr/include/c++/4.9/bits/stl_vector.h **** 
1357:/usr/include/c++/4.9/bits/stl_vector.h ****       // Internal insert functions follow.
1358:/usr/include/c++/4.9/bits/stl_vector.h **** 
1359:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1360:/usr/include/c++/4.9/bits/stl_vector.h **** 
1361:/usr/include/c++/4.9/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1362:/usr/include/c++/4.9/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1363:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _Integer>
1364:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1365:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1366:/usr/include/c++/4.9/bits/stl_vector.h **** 			   __true_type)
1367:/usr/include/c++/4.9/bits/stl_vector.h ****         { _M_fill_insert(__pos, __n, __val); }
1368:/usr/include/c++/4.9/bits/stl_vector.h **** 
1369:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1370:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator>
1371:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1372:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_insert_dispatch(iterator __pos, _InputIterator __first,
1373:/usr/include/c++/4.9/bits/stl_vector.h **** 			   _InputIterator __last, __false_type)
1374:/usr/include/c++/4.9/bits/stl_vector.h ****         {
1375:/usr/include/c++/4.9/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1376:/usr/include/c++/4.9/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1377:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_range_insert(__pos, __first, __last, _IterCategory());
1378:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
1379:/usr/include/c++/4.9/bits/stl_vector.h **** 
1380:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1381:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator>
1382:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1383:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_range_insert(iterator __pos, _InputIterator __first,
1384:/usr/include/c++/4.9/bits/stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1385:/usr/include/c++/4.9/bits/stl_vector.h **** 
1386:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1387:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _ForwardIterator>
1388:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1389:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_range_insert(iterator __pos, _ForwardIterator __first,
1390:/usr/include/c++/4.9/bits/stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1391:/usr/include/c++/4.9/bits/stl_vector.h **** 
1392:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1393:/usr/include/c++/4.9/bits/stl_vector.h ****       // the same thing.
1394:/usr/include/c++/4.9/bits/stl_vector.h ****       void
1395:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1396:/usr/include/c++/4.9/bits/stl_vector.h **** 
1397:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
1398:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by resize(n).
1399:/usr/include/c++/4.9/bits/stl_vector.h ****       void
1400:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_default_append(size_type __n);
1401:/usr/include/c++/4.9/bits/stl_vector.h **** 
1402:/usr/include/c++/4.9/bits/stl_vector.h ****       bool
1403:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_shrink_to_fit();
1404:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
1405:/usr/include/c++/4.9/bits/stl_vector.h **** 
1406:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by insert(p,x)
1407:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus < 201103L
1408:/usr/include/c++/4.9/bits/stl_vector.h ****       void
1409:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1410:/usr/include/c++/4.9/bits/stl_vector.h **** #else
1411:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename... _Args>
1412:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1413:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_insert_aux(iterator __position, _Args&&... __args);
1414:/usr/include/c++/4.9/bits/stl_vector.h **** 
1415:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename... _Args>
1416:/usr/include/c++/4.9/bits/stl_vector.h ****         void
1417:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_emplace_back_aux(_Args&&... __args);
1418:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
1419:/usr/include/c++/4.9/bits/stl_vector.h **** 
1420:/usr/include/c++/4.9/bits/stl_vector.h ****       // Called by the latter.
1421:/usr/include/c++/4.9/bits/stl_vector.h ****       size_type
1422:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
 2803              		.loc 5 1422 0
 2804              		.cfi_startproc
 2805 0000 55       		pushq	%rbp
 2806              		.cfi_def_cfa_offset 16
 2807              		.cfi_offset 6, -16
 2808 0001 4889E5   		movq	%rsp, %rbp
 2809              		.cfi_def_cfa_register 6
 2810 0004 53       		pushq	%rbx
 2811 0005 4883EC48 		subq	$72, %rsp
 2812              		.cfi_offset 3, -24
 2813 0009 48897DC8 		movq	%rdi, -56(%rbp)
 2814 000d 488975C0 		movq	%rsi, -64(%rbp)
 2815 0011 488955B8 		movq	%rdx, -72(%rbp)
 2816              		.loc 5 1422 0
 2817 0015 64488B04 		movq	%fs:40, %rax
 2817      25280000 
 2817      00
 2818 001e 488945E8 		movq	%rax, -24(%rbp)
 2819 0022 31C0     		xorl	%eax, %eax
 2820              	.LBB38:
1423:/usr/include/c++/4.9/bits/stl_vector.h ****       {
1424:/usr/include/c++/4.9/bits/stl_vector.h **** 	if (max_size() - size() < __n)
 2821              		.loc 5 1424 0
 2822 0024 488B45C8 		movq	-56(%rbp), %rax
 2823 0028 4889C7   		movq	%rax, %rdi
 2824 002b E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv@PLT
 2824      00
 2825 0030 4889C3   		movq	%rax, %rbx
 2826 0033 488B45C8 		movq	-56(%rbp), %rax
 2827 0037 4889C7   		movq	%rax, %rdi
 2828 003a E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2828      00
 2829 003f 4829C3   		subq	%rax, %rbx
 2830 0042 4889DA   		movq	%rbx, %rdx
 2831 0045 488B45C0 		movq	-64(%rbp), %rax
 2832 0049 4839C2   		cmpq	%rax, %rdx
 2833 004c 0F92C0   		setb	%al
 2834 004f 84C0     		testb	%al, %al
 2835 0051 740C     		je	.L132
1425:/usr/include/c++/4.9/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 2836              		.loc 5 1425 0
 2837 0053 488B45B8 		movq	-72(%rbp), %rax
 2838 0057 4889C7   		movq	%rax, %rdi
 2839 005a E8000000 		call	_ZSt20__throw_length_errorPKc@PLT
 2839      00
 2840              	.L132:
1426:/usr/include/c++/4.9/bits/stl_vector.h **** 
1427:/usr/include/c++/4.9/bits/stl_vector.h **** 	const size_type __len = size() + std::max(size(), __n);
 2841              		.loc 5 1427 0
 2842 005f 488B45C8 		movq	-56(%rbp), %rax
 2843 0063 4889C7   		movq	%rax, %rdi
 2844 0066 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2844      00
 2845 006b 4889C3   		movq	%rax, %rbx
 2846 006e 488B45C8 		movq	-56(%rbp), %rax
 2847 0072 4889C7   		movq	%rax, %rdi
 2848 0075 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2848      00
 2849 007a 488945D8 		movq	%rax, -40(%rbp)
 2850 007e 488D55C0 		leaq	-64(%rbp), %rdx
 2851 0082 488D45D8 		leaq	-40(%rbp), %rax
 2852 0086 4889D6   		movq	%rdx, %rsi
 2853 0089 4889C7   		movq	%rax, %rdi
 2854 008c E8000000 		call	_ZSt3maxImERKT_S2_S2_@PLT
 2854      00
 2855 0091 488B00   		movq	(%rax), %rax
 2856 0094 4801D8   		addq	%rbx, %rax
 2857 0097 488945E0 		movq	%rax, -32(%rbp)
1428:/usr/include/c++/4.9/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 2858              		.loc 5 1428 0
 2859 009b 488B45C8 		movq	-56(%rbp), %rax
 2860 009f 4889C7   		movq	%rax, %rdi
 2861 00a2 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2861      00
 2862 00a7 483B45E0 		cmpq	-32(%rbp), %rax
 2863 00ab 7712     		ja	.L133
 2864              		.loc 5 1428 0 is_stmt 0 discriminator 2
 2865 00ad 488B45C8 		movq	-56(%rbp), %rax
 2866 00b1 4889C7   		movq	%rax, %rdi
 2867 00b4 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv@PLT
 2867      00
 2868 00b9 483B45E0 		cmpq	-32(%rbp), %rax
 2869 00bd 730E     		jnb	.L134
 2870              	.L133:
 2871              		.loc 5 1428 0 discriminator 3
 2872 00bf 488B45C8 		movq	-56(%rbp), %rax
 2873 00c3 4889C7   		movq	%rax, %rdi
 2874 00c6 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv@PLT
 2874      00
 2875 00cb EB04     		jmp	.L136
 2876              	.L134:
 2877              		.loc 5 1428 0 discriminator 4
 2878 00cd 488B45E0 		movq	-32(%rbp), %rax
 2879              	.L136:
 2880              	.LBE38:
1429:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 2881              		.loc 5 1429 0 is_stmt 1 discriminator 7
 2882 00d1 488B4DE8 		movq	-24(%rbp), %rcx
 2883 00d5 6448330C 		xorq	%fs:40, %rcx
 2883      25280000 
 2883      00
 2884 00de 7405     		je	.L137
 2885              		.loc 5 1429 0 is_stmt 0
 2886 00e0 E8000000 		call	__stack_chk_fail@PLT
 2886      00
 2887              	.L137:
 2888 00e5 4883C448 		addq	$72, %rsp
 2889 00e9 5B       		popq	%rbx
 2890 00ea 5D       		popq	%rbp
 2891              		.cfi_def_cfa 7, 8
 2892 00eb C3       		ret
 2893              		.cfi_endproc
 2894              	.LFE958:
 2896              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv,"axG",@progbits,_ZNSt6
 2897              		.align 2
 2898              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
 2900              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:
 2901              	.LFB959:
 547:/usr/include/c++/4.9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2902              		.loc 5 547 0 is_stmt 1
 2903              		.cfi_startproc
 2904 0000 55       		pushq	%rbp
 2905              		.cfi_def_cfa_offset 16
 2906              		.cfi_offset 6, -16
 2907 0001 4889E5   		movq	%rsp, %rbp
 2908              		.cfi_def_cfa_register 6
 2909 0004 4883EC20 		subq	$32, %rsp
 2910 0008 48897DE8 		movq	%rdi, -24(%rbp)
 547:/usr/include/c++/4.9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2911              		.loc 5 547 0
 2912 000c 64488B04 		movq	%fs:40, %rax
 2912      25280000 
 2912      00
 2913 0015 488945F8 		movq	%rax, -8(%rbp)
 2914 0019 31C0     		xorl	%eax, %eax
 548:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2915              		.loc 5 548 0
 2916 001b 488B55E8 		movq	-24(%rbp), %rdx
 2917 001f 488D45F0 		leaq	-16(%rbp), %rax
 2918 0023 4889D6   		movq	%rdx, %rsi
 2919 0026 4889C7   		movq	%rax, %rdi
 2920 0029 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 2920      00
 2921 002e 488B45F0 		movq	-16(%rbp), %rax
 2922 0032 488B4DF8 		movq	-8(%rbp), %rcx
 2923 0036 6448330C 		xorq	%fs:40, %rcx
 2923      25280000 
 2923      00
 2924 003f 7405     		je	.L140
 2925 0041 E8000000 		call	__stack_chk_fail@PLT
 2925      00
 2926              	.L140:
 2927 0046 C9       		leave
 2928              		.cfi_def_cfa 7, 8
 2929 0047 C3       		ret
 2930              		.cfi_endproc
 2931              	.LFE959:
 2933              		.section	.text._ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__norma
 2934              		.weak	_ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iterato
 2936              	_ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_
 2937              	.LFB960:
 795:/usr/include/c++/4.9/bits/stl_iterator.h ****     };
 796:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 797:/usr/include/c++/4.9/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
 798:/usr/include/c++/4.9/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
 799:/usr/include/c++/4.9/bits/stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
 800:/usr/include/c++/4.9/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
 801:/usr/include/c++/4.9/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
 802:/usr/include/c++/4.9/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
 803:/usr/include/c++/4.9/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
 804:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 805:/usr/include/c++/4.9/bits/stl_iterator.h ****   // Forward iterator requirements
 806:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 807:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 808:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 809:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 810:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 811:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 812:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 813:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 814:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 815:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 816:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 817:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 818:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 819:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 820:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 821:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 822:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 823:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 824:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 825:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 826:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 827:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 828:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 829:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 830:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 831:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 832:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 833:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 834:/usr/include/c++/4.9/bits/stl_iterator.h ****   // Random access iterator requirements
 835:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 836:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 837:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
 838:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 839:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 840:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
 841:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 842:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 843:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 844:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 845:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 846:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 847:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
 848:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 849:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 850:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 851:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
 852:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 853:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 854:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
 855:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 856:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 857:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 858:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
 859:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 860:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 861:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
 862:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 863:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 864:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 865:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 866:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 867:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 868:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
 869:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 870:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 871:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 872:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
 873:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 874:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 875:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
 876:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 877:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 878:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 879:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 880:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 881:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 882:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
 883:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 884:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 885:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 886:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
 887:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 888:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 889:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
 890:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 891:/usr/include/c++/4.9/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 892:/usr/include/c++/4.9/bits/stl_iterator.h ****   // According to the resolution of DR179 not only the various comparison
 893:/usr/include/c++/4.9/bits/stl_iterator.h ****   // operators but also operator- must accept mixed iterator/const_iterator
 894:/usr/include/c++/4.9/bits/stl_iterator.h ****   // parameters.
 895:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 896:/usr/include/c++/4.9/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 897:/usr/include/c++/4.9/bits/stl_iterator.h ****     // DR 685.
 898:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline auto
 899:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 900:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
 901:/usr/include/c++/4.9/bits/stl_iterator.h ****     -> decltype(__lhs.base() - __rhs.base())
 902:/usr/include/c++/4.9/bits/stl_iterator.h **** #else
 903:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline typename __normal_iterator<_IteratorL, _Container>::difference_type
 904:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 905:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 906:/usr/include/c++/4.9/bits/stl_iterator.h **** #endif
 907:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 908:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 909:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 910:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline typename __normal_iterator<_Iterator, _Container>::difference_type
 911:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 2938              		.loc 9 911 0
 2939              		.cfi_startproc
 2940 0000 55       		pushq	%rbp
 2941              		.cfi_def_cfa_offset 16
 2942              		.cfi_offset 6, -16
 2943 0001 4889E5   		movq	%rsp, %rbp
 2944              		.cfi_def_cfa_register 6
 2945 0004 53       		pushq	%rbx
 2946 0005 4883EC18 		subq	$24, %rsp
 2947              		.cfi_offset 3, -24
 2948 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2949 000d 488975E0 		movq	%rsi, -32(%rbp)
 912:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 913:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 914:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 2950              		.loc 9 914 0
 2951 0011 488B45E8 		movq	-24(%rbp), %rax
 2952 0015 4889C7   		movq	%rax, %rdi
 2953 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 2953      00
 2954 001d 488B00   		movq	(%rax), %rax
 2955 0020 4889C3   		movq	%rax, %rbx
 2956 0023 488B45E0 		movq	-32(%rbp), %rax
 2957 0027 4889C7   		movq	%rax, %rdi
 2958 002a E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 2958      00
 2959 002f 488B00   		movq	(%rax), %rax
 2960 0032 4829C3   		subq	%rax, %rbx
 2961 0035 4889D8   		movq	%rbx, %rax
 2962 0038 48C1F803 		sarq	$3, %rax
 2963 003c 4889C2   		movq	%rax, %rdx
 2964 003f 48B8B76D 		movabsq	$7905747460161236407, %rax
 2964      DBB66DDB 
 2964      B66D
 2965 0049 480FAFC2 		imulq	%rdx, %rax
 2966 004d 4883C418 		addq	$24, %rsp
 2967 0051 5B       		popq	%rbx
 2968 0052 5D       		popq	%rbp
 2969              		.cfi_def_cfa 7, 8
 2970 0053 C3       		ret
 2971              		.cfi_endproc
 2972              	.LFE960:
 2974              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm,"axG",@p
 2975              		.align 2
 2976              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm
 2978              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm:
 2979              	.LFB961:
 167:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 2980              		.loc 5 167 0
 2981              		.cfi_startproc
 2982 0000 55       		pushq	%rbp
 2983              		.cfi_def_cfa_offset 16
 2984              		.cfi_offset 6, -16
 2985 0001 4889E5   		movq	%rsp, %rbp
 2986              		.cfi_def_cfa_register 6
 2987 0004 4883EC10 		subq	$16, %rsp
 2988 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2989 000c 488975F0 		movq	%rsi, -16(%rbp)
 2990              	.LBB39:
 170:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 2991              		.loc 5 170 0
 2992 0010 48837DF0 		cmpq	$0, -16(%rbp)
 2992      00
 2993 0015 7415     		je	.L144
 170:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 2994              		.loc 5 170 0 is_stmt 0 discriminator 1
 2995 0017 488B45F8 		movq	-8(%rbp), %rax
 2996 001b 488B55F0 		movq	-16(%rbp), %rdx
 2997 001f 4889D6   		movq	%rdx, %rsi
 2998 0022 4889C7   		movq	%rax, %rdi
 2999 0025 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8allocateERS3_m@PLT
 2999      00
 3000 002a EB05     		jmp	.L145
 3001              	.L144:
 170:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 3002              		.loc 5 170 0 discriminator 2
 3003 002c B8000000 		movl	$0, %eax
 3003      00
 3004              	.L145:
 3005              	.LBE39:
 171:/usr/include/c++/4.9/bits/stl_vector.h **** 
 3006              		.loc 5 171 0 is_stmt 1 discriminator 4
 3007 0031 C9       		leave
 3008              		.cfi_def_cfa 7, 8
 3009 0032 C3       		ret
 3010              		.cfi_endproc
 3011              	.LFE961:
 3013              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv,
 3014              		.align 2
 3015              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 3017              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:
 3018              	.LFB962:
 113:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 3019              		.loc 5 113 0
 3020              		.cfi_startproc
 3021 0000 55       		pushq	%rbp
 3022              		.cfi_def_cfa_offset 16
 3023              		.cfi_offset 6, -16
 3024 0001 4889E5   		movq	%rsp, %rbp
 3025              		.cfi_def_cfa_register 6
 3026 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/4.9/bits/stl_vector.h **** 
 3027              		.loc 5 114 0
 3028 0008 488B45F8 		movq	-8(%rbp), %rax
 3029 000c 5D       		popq	%rbp
 3030              		.cfi_def_cfa 7, 8
 3031 000d C3       		ret
 3032              		.cfi_endproc
 3033              	.LFE962:
 3035              		.section	.text._ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_E
 3036              		.weak	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_
 3038              	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S4_RT1_
 3039              	.LFB963:
 3040              		.file 13 "/usr/include/c++/4.9/bits/stl_uninitialized.h"
   1:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
   3:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/stl_uninitialized.h **** //
   5:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // any later version.
  10:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
  11:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
  16:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
  20:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
  25:/usr/include/c++/4.9/bits/stl_uninitialized.h **** /*
  26:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  *
  27:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  *
  30:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  *
  38:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  *
  39:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  *
  42:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  */
  50:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
  51:/usr/include/c++/4.9/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/4.9/bits/stl_uninitialized.h ****  */
  55:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
  56:/usr/include/c++/4.9/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:/usr/include/c++/4.9/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
  59:/usr/include/c++/4.9/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/c++/4.9/bits/stl_uninitialized.h **** {
  61:/usr/include/c++/4.9/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
  63:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  64:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  65:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     {
  66:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  67:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         static _ForwardIterator
  68:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  69:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  70:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         {
  71:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  72:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  __try
  73:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    {
  74:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, ++__cur)
  75:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  76:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      return __cur;
  77:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    }
  78:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  __catch(...)
  79:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    {
  80:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  81:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      __throw_exception_again;
  82:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    }
  83:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	}
  84:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     };
  85:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
  86:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   template<>
  87:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     struct __uninitialized_copy<true>
  88:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     {
  89:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  90:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         static _ForwardIterator
  91:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  92:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  93:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
  94:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     };
  95:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
  96:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   /**
  97:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
  98:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
  99:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 100:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 101:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 102:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *
 103:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 104:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   */
 105:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 106:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 107:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 108:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 109:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     {
 110:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 111:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	_ValueType1;
 112:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 113:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	_ValueType2;
 114:/usr/include/c++/4.9/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 115:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       const bool __assignable = true;
 116:/usr/include/c++/4.9/bits/stl_uninitialized.h **** #else
 117:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 118:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _RefType1;
 119:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
 120:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 121:/usr/include/c++/4.9/bits/stl_uninitialized.h **** #endif
 122:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 123:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       return std::__uninitialized_copy<__is_trivial(_ValueType1)
 124:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 				       && __is_trivial(_ValueType2)
 125:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 				       && __assignable>::
 126:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 127:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     }
 128:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 129:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 130:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 131:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     struct __uninitialized_fill
 132:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     {
 133:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 134:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         static void
 135:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 136:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 137:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         {
 138:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 139:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  __try
 140:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    {
 141:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 142:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 143:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    }
 144:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  __catch(...)
 145:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    {
 146:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 147:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 148:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    }
 149:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	}
 150:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     };
 151:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 152:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   template<>
 153:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     struct __uninitialized_fill<true>
 154:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     {
 155:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 156:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         static void
 157:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 158:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 159:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 160:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     };
 161:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 162:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   /**
 163:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 164:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 165:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 166:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 167:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @return   Nothing.
 168:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *
 169:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 170:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   */
 171:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 172:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     inline void
 173:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 174:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		       const _Tp& __x)
 175:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     {
 176:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 177:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	_ValueType;
 178:/usr/include/c++/4.9/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 179:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       const bool __assignable = true;
 180:/usr/include/c++/4.9/bits/stl_uninitialized.h **** #else
 181:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 182:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 183:/usr/include/c++/4.9/bits/stl_uninitialized.h **** #endif
 184:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 185:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 186:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 187:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     }
 188:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 189:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 190:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 191:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n
 192:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     {
 193:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 194:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         static void
 195:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 196:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 			const _Tp& __x)
 197:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         {
 198:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 199:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  __try
 200:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    {
 201:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, ++__cur)
 202:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 203:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    }
 204:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  __catch(...)
 205:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    {
 206:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 207:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 208:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    }
 209:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	}
 210:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     };
 211:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 212:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   template<>
 213:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 214:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     {
 215:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 216:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         static void
 217:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 218:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 			const _Tp& __x)
 219:/usr/include/c++/4.9/bits/stl_uninitialized.h ****         { std::fill_n(__first, __n, __x); }
 220:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     };
 221:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 222:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   /**
 223:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 224:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 225:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 226:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 227:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  @return   Nothing.
 228:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *
 229:/usr/include/c++/4.9/bits/stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 230:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   */
 231:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 232:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     inline void
 233:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 234:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     {
 235:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 236:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	_ValueType;
 237:/usr/include/c++/4.9/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 238:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       const bool __assignable = true;
 239:/usr/include/c++/4.9/bits/stl_uninitialized.h **** #else
 240:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 241:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 242:/usr/include/c++/4.9/bits/stl_uninitialized.h **** #endif
 243:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 244:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       std::__uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 245:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 246:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     }
 247:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 248:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 249:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 250:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 251:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 252:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   //  any of the POD optimizations.
 253:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 254:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 255:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	   typename _Allocator>
 256:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     _ForwardIterator
 257:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 258:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 259:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     {
 260:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 261:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       __try
 262:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	{
 263:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 264:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  for (; __first != __last; ++__first, ++__cur)
 265:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 266:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  return __cur;
 267:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	}
 268:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       __catch(...)
 269:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	{
 270:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 271:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 272:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	}
 273:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     }
 274:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 275:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 276:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 277:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 278:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 279:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 280:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 281:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 282:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	   typename _Allocator>
 283:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 284:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 285:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 286:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     {
 287:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 288:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 289:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 					 __result, __alloc);
 290:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     }
 291:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 292:/usr/include/c++/4.9/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 293:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	   typename _Allocator>
 294:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     inline _ForwardIterator
 295:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 3041              		.loc 13 295 0
 3042              		.cfi_startproc
 3043 0000 55       		pushq	%rbp
 3044              		.cfi_def_cfa_offset 16
 3045              		.cfi_offset 6, -16
 3046 0001 4889E5   		movq	%rsp, %rbp
 3047              		.cfi_def_cfa_register 6
 3048 0004 4883EC20 		subq	$32, %rsp
 3049 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3050 000c 488975F0 		movq	%rsi, -16(%rbp)
 3051 0010 488955E8 		movq	%rdx, -24(%rbp)
 3052 0014 48894DE0 		movq	%rcx, -32(%rbp)
 296:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 297:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 				       _ForwardIterator __result,
 298:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 				       _Allocator& __alloc)
 299:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     {
 300:/usr/include/c++/4.9/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a
 301:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 302:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 3053              		.loc 13 302 0
 3054 0018 488B4DE0 		movq	-32(%rbp), %rcx
 3055 001c 488B55E8 		movq	-24(%rbp), %rdx
 3056 0020 488B75F0 		movq	-16(%rbp), %rsi
 3057 0024 488B45F8 		movq	-8(%rbp), %rax
 3058 0028 4889C7   		movq	%rax, %rdi
 3059 002b E8000000 		call	_ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E@PLT
 3059      00
 303:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     }
 3060              		.loc 13 303 0
 3061 0030 C9       		leave
 3062              		.cfi_def_cfa 7, 8
 3063 0031 C3       		ret
 3064              		.cfi_endproc
 3065              	.LFE963:
 3067              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_
 3068              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_
 3070              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_:
 3071              	.LFB964:
 190:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 191:/usr/include/c++/4.9/ext/alloc_traits.h ****     static void destroy(_Alloc& __a, pointer __p)
 3072              		.loc 7 191 0
 3073              		.cfi_startproc
 3074 0000 55       		pushq	%rbp
 3075              		.cfi_def_cfa_offset 16
 3076              		.cfi_offset 6, -16
 3077 0001 4889E5   		movq	%rsp, %rbp
 3078              		.cfi_def_cfa_register 6
 3079 0004 4883EC10 		subq	$16, %rsp
 3080 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3081 000c 488975F0 		movq	%rsi, -16(%rbp)
 192:/usr/include/c++/4.9/ext/alloc_traits.h ****     { __a.destroy(__p); }
 3082              		.loc 7 192 0
 3083 0010 488B55F0 		movq	-16(%rbp), %rdx
 3084 0014 488B45F8 		movq	-8(%rbp), %rax
 3085 0018 4889D6   		movq	%rdx, %rsi
 3086 001b 4889C7   		movq	%rax, %rdi
 3087 001e E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_@PLT
 3087      00
 3088 0023 C9       		leave
 3089              		.cfi_def_cfa 7, 8
 3090 0024 C3       		ret
 3091              		.cfi_endproc
 3092              	.LFE964:
 3094              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E,"axG",@progbits,_Z
 3095              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
 3097              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:
 3098              	.LFB965:
 148:/usr/include/c++/4.9/bits/stl_construct.h **** 	     allocator<_Tp>&)
 3099              		.loc 6 148 0
 3100              		.cfi_startproc
 3101 0000 55       		pushq	%rbp
 3102              		.cfi_def_cfa_offset 16
 3103              		.cfi_offset 6, -16
 3104 0001 4889E5   		movq	%rsp, %rbp
 3105              		.cfi_def_cfa_register 6
 3106 0004 4883EC20 		subq	$32, %rsp
 3107 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3108 000c 488975F0 		movq	%rsi, -16(%rbp)
 3109 0010 488955E8 		movq	%rdx, -24(%rbp)
 151:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 3110              		.loc 6 151 0
 3111 0014 488B55F0 		movq	-16(%rbp), %rdx
 3112 0018 488B45F8 		movq	-8(%rbp), %rax
 3113 001c 4889D6   		movq	%rdx, %rsi
 3114 001f 4889C7   		movq	%rax, %rdi
 3115 0022 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_@PLT
 3115      00
 3116              		.loc 6 152 0
 3117 0027 C9       		leave
 3118              		.cfi_def_cfa 7, 8
 3119 0028 C3       		ret
 3120              		.cfi_endproc
 3121              	.LFE965:
 3123              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m,"a
 3124              		.align 2
 3125              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
 3127              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:
 3128              	.LFB966:
 174:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 3129              		.loc 5 174 0
 3130              		.cfi_startproc
 3131 0000 55       		pushq	%rbp
 3132              		.cfi_def_cfa_offset 16
 3133              		.cfi_offset 6, -16
 3134 0001 4889E5   		movq	%rsp, %rbp
 3135              		.cfi_def_cfa_register 6
 3136 0004 4883EC20 		subq	$32, %rsp
 3137 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3138 000c 488975F0 		movq	%rsi, -16(%rbp)
 3139 0010 488955E8 		movq	%rdx, -24(%rbp)
 3140              	.LBB40:
 177:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 3141              		.loc 5 177 0
 3142 0014 48837DF0 		cmpq	$0, -16(%rbp)
 3142      00
 3143 0019 7417     		je	.L153
 178:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 3144              		.loc 5 178 0
 3145 001b 488B45F8 		movq	-8(%rbp), %rax
 3146 001f 488B55E8 		movq	-24(%rbp), %rdx
 3147 0023 488B4DF0 		movq	-16(%rbp), %rcx
 3148 0027 4889CE   		movq	%rcx, %rsi
 3149 002a 4889C7   		movq	%rax, %rdi
 3150 002d E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m@PLT
 3150      00
 3151              	.L153:
 3152              	.LBE40:
 179:/usr/include/c++/4.9/bits/stl_vector.h **** 
 3153              		.loc 5 179 0
 3154 0032 C9       		leave
 3155              		.cfi_def_cfa 7, 8
 3156 0033 C3       		ret
 3157              		.cfi_endproc
 3158              	.LFE966:
 3160              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2
 3161              		.align 2
 3162              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERK
 3164              	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_:
 3165              	.LFB968:
 728:/usr/include/c++/4.9/bits/stl_iterator.h ****       : _M_current(__i) { }
 3166              		.loc 9 728 0
 3167              		.cfi_startproc
 3168 0000 55       		pushq	%rbp
 3169              		.cfi_def_cfa_offset 16
 3170              		.cfi_offset 6, -16
 3171 0001 4889E5   		movq	%rsp, %rbp
 3172              		.cfi_def_cfa_register 6
 3173 0004 48897DF8 		movq	%rdi, -8(%rbp)
 3174 0008 488975F0 		movq	%rsi, -16(%rbp)
 3175              	.LBB41:
 729:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 3176              		.loc 9 729 0
 3177 000c 488B45F0 		movq	-16(%rbp), %rax
 3178 0010 488B10   		movq	(%rax), %rdx
 3179 0013 488B45F8 		movq	-8(%rbp), %rax
 3180 0017 488910   		movq	%rdx, (%rax)
 3181              	.LBE41:
 3182 001a 5D       		popq	%rbp
 3183              		.cfi_def_cfa 7, 8
 3184 001b C3       		ret
 3185              		.cfi_endproc
 3186              	.LFE968:
 3188              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 3189              		.set	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 3190              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE9constructEPS2_RKS2_,"axG",@progbits,_ZN9
 3191              		.align 2
 3192              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE9constructEPS2_RKS2_
 3194              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE9constructEPS2_RKS2_:
 3195              	.LFB970:
 129:/usr/include/c++/4.9/ext/new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 3196              		.loc 11 129 0
 3197              		.cfi_startproc
 3198              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3199              		.cfi_lsda 0x1b,.LLSDA970
 3200 0000 55       		pushq	%rbp
 3201              		.cfi_def_cfa_offset 16
 3202              		.cfi_offset 6, -16
 3203 0001 4889E5   		movq	%rsp, %rbp
 3204              		.cfi_def_cfa_register 6
 3205 0004 4155     		pushq	%r13
 3206 0006 4154     		pushq	%r12
 3207 0008 53       		pushq	%rbx
 3208 0009 4883EC28 		subq	$40, %rsp
 3209              		.cfi_offset 13, -24
 3210              		.cfi_offset 12, -32
 3211              		.cfi_offset 3, -40
 3212 000d 48897DD8 		movq	%rdi, -40(%rbp)
 3213 0011 488975D0 		movq	%rsi, -48(%rbp)
 3214 0015 488955C8 		movq	%rdx, -56(%rbp)
 3215              		.loc 11 130 0
 3216 0019 4C8B65D0 		movq	-48(%rbp), %r12
 3217 001d 4C89E6   		movq	%r12, %rsi
 3218 0020 BF100000 		movl	$16, %edi
 3218      00
 3219 0025 E8000000 		call	_ZnwmPv@PLT
 3219      00
 3220 002a 4889C3   		movq	%rax, %rbx
 3221 002d 4885DB   		testq	%rbx, %rbx
 3222 0030 7411     		je	.L157
 3223              		.loc 11 130 0 is_stmt 0 discriminator 1
 3224 0032 488B45C8 		movq	-56(%rbp), %rax
 3225 0036 4889C6   		movq	%rax, %rsi
 3226 0039 4889DF   		movq	%rbx, %rdi
 3227              	.LEHB48:
 3228 003c E8000000 		call	_ZNSt4pairIiSsEC1ERKS0_@PLT
 3228      00
 3229              	.LEHE48:
 3230 0041 EB1B     		jmp	.L156
 3231              	.L157:
 3232              		.loc 11 130 0 discriminator 2
 3233 0043 EB19     		jmp	.L156
 3234              	.L160:
 3235 0045 4989C5   		movq	%rax, %r13
 3236              		.loc 11 130 0
 3237 0048 4C89E6   		movq	%r12, %rsi
 3238 004b 4889DF   		movq	%rbx, %rdi
 3239 004e E8000000 		call	_ZdlPvS_@PLT
 3239      00
 3240 0053 4C89E8   		movq	%r13, %rax
 3241 0056 4889C7   		movq	%rax, %rdi
 3242              	.LEHB49:
 3243 0059 E8000000 		call	_Unwind_Resume@PLT
 3243      00
 3244              	.LEHE49:
 3245              	.L156:
 3246 005e 4883C428 		addq	$40, %rsp
 3247 0062 5B       		popq	%rbx
 3248 0063 415C     		popq	%r12
 3249 0065 415D     		popq	%r13
 3250 0067 5D       		popq	%rbp
 3251              		.cfi_def_cfa 7, 8
 3252 0068 C3       		ret
 3253              		.cfi_endproc
 3254              	.LFE970:
 3255              		.section	.gcc_except_table
 3256              	.LLSDA970:
 3257 010a FF       		.byte	0xff
 3258 010b FF       		.byte	0xff
 3259 010c 01       		.byte	0x1
 3260 010d 08       		.uleb128 .LLSDACSE970-.LLSDACSB970
 3261              	.LLSDACSB970:
 3262 010e 3C       		.uleb128 .LEHB48-.LFB970
 3263 010f 05       		.uleb128 .LEHE48-.LEHB48
 3264 0110 45       		.uleb128 .L160-.LFB970
 3265 0111 00       		.uleb128 0
 3266 0112 59       		.uleb128 .LEHB49-.LFB970
 3267 0113 05       		.uleb128 .LEHE49-.LEHB49
 3268 0114 00       		.uleb128 0
 3269 0115 00       		.uleb128 0
 3270              	.LLSDACSE970:
 3271              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE9constructEPS2_RKS2_,"axG",@progbits,_ZN9
 3273              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv,"axG",
 3274              		.align 2
 3275              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv
 3277              	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv:
 3278              	.LFB971:
 793:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return _M_current; }
 3279              		.loc 9 793 0 is_stmt 1
 3280              		.cfi_startproc
 3281 0000 55       		pushq	%rbp
 3282              		.cfi_def_cfa_offset 16
 3283              		.cfi_offset 6, -16
 3284 0001 4889E5   		movq	%rsp, %rbp
 3285              		.cfi_def_cfa_register 6
 3286 0004 48897DF8 		movq	%rdi, -8(%rbp)
 794:/usr/include/c++/4.9/bits/stl_iterator.h ****     };
 3287              		.loc 9 794 0
 3288 0008 488B45F8 		movq	-8(%rbp), %rax
 3289 000c 5D       		popq	%rbp
 3290              		.cfi_def_cfa 7, 8
 3291 000d C3       		ret
 3292              		.cfi_endproc
 3293              	.LFE971:
 3295              		.section	.text._ZSt13copy_backwardIPSt4pairIiSsES2_ET0_T_S4_S3_,"axG",@progbits,_ZSt13copy_backwar
 3296              		.weak	_ZSt13copy_backwardIPSt4pairIiSsES2_ET0_T_S4_S3_
 3298              	_ZSt13copy_backwardIPSt4pairIiSsES2_ET0_T_S4_S3_:
 3299              	.LFB972:
 630:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 3300              		.loc 12 630 0
 3301              		.cfi_startproc
 3302 0000 55       		pushq	%rbp
 3303              		.cfi_def_cfa_offset 16
 3304              		.cfi_offset 6, -16
 3305 0001 4889E5   		movq	%rsp, %rbp
 3306              		.cfi_def_cfa_register 6
 3307 0004 53       		pushq	%rbx
 3308 0005 4883EC28 		subq	$40, %rsp
 3309              		.cfi_offset 3, -24
 3310 0009 48897DE8 		movq	%rdi, -24(%rbp)
 3311 000d 488975E0 		movq	%rsi, -32(%rbp)
 3312 0011 488955D8 		movq	%rdx, -40(%rbp)
 642:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 3313              		.loc 12 642 0
 3314 0015 488B45E0 		movq	-32(%rbp), %rax
 3315 0019 4889C7   		movq	%rax, %rdi
 3316 001c E8000000 		call	_ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_@PLT
 3316      00
 3317 0021 4889C3   		movq	%rax, %rbx
 3318 0024 488B45E8 		movq	-24(%rbp), %rax
 3319 0028 4889C7   		movq	%rax, %rdi
 3320 002b E8000000 		call	_ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_@PLT
 3320      00
 3321 0030 4889C1   		movq	%rax, %rcx
 3322 0033 488B45D8 		movq	-40(%rbp), %rax
 3323 0037 4889C2   		movq	%rax, %rdx
 3324 003a 4889DE   		movq	%rbx, %rsi
 3325 003d 4889CF   		movq	%rcx, %rdi
 3326 0040 E8000000 		call	_ZSt23__copy_move_backward_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_@PLT
 3326      00
 3327              		.loc 12 643 0
 3328 0045 4883C428 		addq	$40, %rsp
 3329 0049 5B       		popq	%rbx
 3330 004a 5D       		popq	%rbp
 3331              		.cfi_def_cfa 7, 8
 3332 004b C3       		ret
 3333              		.cfi_endproc
 3334              	.LFE972:
 3336              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv,"axG",@pr
 3337              		.align 2
 3338              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv
 3340              	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv:
 3341              	.LFB973:
 741:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *_M_current; }
 3342              		.loc 9 741 0
 3343              		.cfi_startproc
 3344 0000 55       		pushq	%rbp
 3345              		.cfi_def_cfa_offset 16
 3346              		.cfi_offset 6, -16
 3347 0001 4889E5   		movq	%rsp, %rbp
 3348              		.cfi_def_cfa_register 6
 3349 0004 48897DF8 		movq	%rdi, -8(%rbp)
 742:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 3350              		.loc 9 742 0
 3351 0008 488B45F8 		movq	-8(%rbp), %rax
 3352 000c 488B00   		movq	(%rax), %rax
 3353 000f 5D       		popq	%rbp
 3354              		.cfi_def_cfa 7, 8
 3355 0010 C3       		ret
 3356              		.cfi_endproc
 3357              	.LFE973:
 3359              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE12_M_check_lenEmPKc,"axG",@progbits,_ZNKSt6vector
 3360              		.align 2
 3361              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE12_M_check_lenEmPKc
 3363              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE12_M_check_lenEmPKc:
 3364              	.LFB974:
1422:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 3365              		.loc 5 1422 0
 3366              		.cfi_startproc
 3367 0000 55       		pushq	%rbp
 3368              		.cfi_def_cfa_offset 16
 3369              		.cfi_offset 6, -16
 3370 0001 4889E5   		movq	%rsp, %rbp
 3371              		.cfi_def_cfa_register 6
 3372 0004 53       		pushq	%rbx
 3373 0005 4883EC48 		subq	$72, %rsp
 3374              		.cfi_offset 3, -24
 3375 0009 48897DC8 		movq	%rdi, -56(%rbp)
 3376 000d 488975C0 		movq	%rsi, -64(%rbp)
 3377 0011 488955B8 		movq	%rdx, -72(%rbp)
1422:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 3378              		.loc 5 1422 0
 3379 0015 64488B04 		movq	%fs:40, %rax
 3379      25280000 
 3379      00
 3380 001e 488945E8 		movq	%rax, -24(%rbp)
 3381 0022 31C0     		xorl	%eax, %eax
 3382              	.LBB42:
1424:/usr/include/c++/4.9/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 3383              		.loc 5 1424 0
 3384 0024 488B45C8 		movq	-56(%rbp), %rax
 3385 0028 4889C7   		movq	%rax, %rdi
 3386 002b E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv@PLT
 3386      00
 3387 0030 4889C3   		movq	%rax, %rbx
 3388 0033 488B45C8 		movq	-56(%rbp), %rax
 3389 0037 4889C7   		movq	%rax, %rdi
 3390 003a E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 3390      00
 3391 003f 4829C3   		subq	%rax, %rbx
 3392 0042 4889DA   		movq	%rbx, %rdx
 3393 0045 488B45C0 		movq	-64(%rbp), %rax
 3394 0049 4839C2   		cmpq	%rax, %rdx
 3395 004c 0F92C0   		setb	%al
 3396 004f 84C0     		testb	%al, %al
 3397 0051 740C     		je	.L168
1425:/usr/include/c++/4.9/bits/stl_vector.h **** 
 3398              		.loc 5 1425 0
 3399 0053 488B45B8 		movq	-72(%rbp), %rax
 3400 0057 4889C7   		movq	%rax, %rdi
 3401 005a E8000000 		call	_ZSt20__throw_length_errorPKc@PLT
 3401      00
 3402              	.L168:
1427:/usr/include/c++/4.9/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 3403              		.loc 5 1427 0
 3404 005f 488B45C8 		movq	-56(%rbp), %rax
 3405 0063 4889C7   		movq	%rax, %rdi
 3406 0066 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 3406      00
 3407 006b 4889C3   		movq	%rax, %rbx
 3408 006e 488B45C8 		movq	-56(%rbp), %rax
 3409 0072 4889C7   		movq	%rax, %rdi
 3410 0075 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 3410      00
 3411 007a 488945D8 		movq	%rax, -40(%rbp)
 3412 007e 488D55C0 		leaq	-64(%rbp), %rdx
 3413 0082 488D45D8 		leaq	-40(%rbp), %rax
 3414 0086 4889D6   		movq	%rdx, %rsi
 3415 0089 4889C7   		movq	%rax, %rdi
 3416 008c E8000000 		call	_ZSt3maxImERKT_S2_S2_@PLT
 3416      00
 3417 0091 488B00   		movq	(%rax), %rax
 3418 0094 4801D8   		addq	%rbx, %rax
 3419 0097 488945E0 		movq	%rax, -32(%rbp)
1428:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 3420              		.loc 5 1428 0
 3421 009b 488B45C8 		movq	-56(%rbp), %rax
 3422 009f 4889C7   		movq	%rax, %rdi
 3423 00a2 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 3423      00
 3424 00a7 483B45E0 		cmpq	-32(%rbp), %rax
 3425 00ab 7712     		ja	.L169
1428:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 3426              		.loc 5 1428 0 is_stmt 0 discriminator 2
 3427 00ad 488B45C8 		movq	-56(%rbp), %rax
 3428 00b1 4889C7   		movq	%rax, %rdi
 3429 00b4 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv@PLT
 3429      00
 3430 00b9 483B45E0 		cmpq	-32(%rbp), %rax
 3431 00bd 730E     		jnb	.L170
 3432              	.L169:
1428:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 3433              		.loc 5 1428 0 discriminator 3
 3434 00bf 488B45C8 		movq	-56(%rbp), %rax
 3435 00c3 4889C7   		movq	%rax, %rdi
 3436 00c6 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv@PLT
 3436      00
 3437 00cb EB04     		jmp	.L172
 3438              	.L170:
1428:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 3439              		.loc 5 1428 0 discriminator 4
 3440 00cd 488B45E0 		movq	-32(%rbp), %rax
 3441              	.L172:
 3442              	.LBE42:
 3443              		.loc 5 1429 0 is_stmt 1 discriminator 7
 3444 00d1 488B4DE8 		movq	-24(%rbp), %rcx
 3445 00d5 6448330C 		xorq	%fs:40, %rcx
 3445      25280000 
 3445      00
 3446 00de 7405     		je	.L173
 3447              		.loc 5 1429 0 is_stmt 0
 3448 00e0 E8000000 		call	__stack_chk_fail@PLT
 3448      00
 3449              	.L173:
 3450 00e5 4883C448 		addq	$72, %rsp
 3451 00e9 5B       		popq	%rbx
 3452 00ea 5D       		popq	%rbp
 3453              		.cfi_def_cfa 7, 8
 3454 00eb C3       		ret
 3455              		.cfi_endproc
 3456              	.LFE974:
 3458              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EE5beginEv,"axG",@progbits,_ZNSt6vectorISt4pairIiSsE
 3459              		.align 2
 3460              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EE5beginEv
 3462              	_ZNSt6vectorISt4pairIiSsESaIS1_EE5beginEv:
 3463              	.LFB975:
 547:/usr/include/c++/4.9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 3464              		.loc 5 547 0 is_stmt 1
 3465              		.cfi_startproc
 3466 0000 55       		pushq	%rbp
 3467              		.cfi_def_cfa_offset 16
 3468              		.cfi_offset 6, -16
 3469 0001 4889E5   		movq	%rsp, %rbp
 3470              		.cfi_def_cfa_register 6
 3471 0004 4883EC20 		subq	$32, %rsp
 3472 0008 48897DE8 		movq	%rdi, -24(%rbp)
 547:/usr/include/c++/4.9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 3473              		.loc 5 547 0
 3474 000c 64488B04 		movq	%fs:40, %rax
 3474      25280000 
 3474      00
 3475 0015 488945F8 		movq	%rax, -8(%rbp)
 3476 0019 31C0     		xorl	%eax, %eax
 548:/usr/include/c++/4.9/bits/stl_vector.h **** 
 3477              		.loc 5 548 0
 3478 001b 488B55E8 		movq	-24(%rbp), %rdx
 3479 001f 488D45F0 		leaq	-16(%rbp), %rax
 3480 0023 4889D6   		movq	%rdx, %rsi
 3481 0026 4889C7   		movq	%rax, %rdi
 3482 0029 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS3_@PLT
 3482      00
 3483 002e 488B45F0 		movq	-16(%rbp), %rax
 3484 0032 488B4DF8 		movq	-8(%rbp), %rcx
 3485 0036 6448330C 		xorq	%fs:40, %rcx
 3485      25280000 
 3485      00
 3486 003f 7405     		je	.L176
 3487 0041 E8000000 		call	__stack_chk_fail@PLT
 3487      00
 3488              	.L176:
 3489 0046 C9       		leave
 3490              		.cfi_def_cfa 7, 8
 3491 0047 C3       		ret
 3492              		.cfi_endproc
 3493              	.LFE975:
 3495              		.section	.text._ZN9__gnu_cxxmiIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15
 3496              		.weak	_ZN9__gnu_cxxmiIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15differenc
 3498              	_ZN9__gnu_cxxmiIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeE
 3499              	.LFB976:
 911:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 3500              		.loc 9 911 0
 3501              		.cfi_startproc
 3502 0000 55       		pushq	%rbp
 3503              		.cfi_def_cfa_offset 16
 3504              		.cfi_offset 6, -16
 3505 0001 4889E5   		movq	%rsp, %rbp
 3506              		.cfi_def_cfa_register 6
 3507 0004 53       		pushq	%rbx
 3508 0005 4883EC18 		subq	$24, %rsp
 3509              		.cfi_offset 3, -24
 3510 0009 48897DE8 		movq	%rdi, -24(%rbp)
 3511 000d 488975E0 		movq	%rsi, -32(%rbp)
 3512              		.loc 9 914 0
 3513 0011 488B45E8 		movq	-24(%rbp), %rax
 3514 0015 4889C7   		movq	%rax, %rdi
 3515 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 3515      00
 3516 001d 488B00   		movq	(%rax), %rax
 3517 0020 4889C3   		movq	%rax, %rbx
 3518 0023 488B45E0 		movq	-32(%rbp), %rax
 3519 0027 4889C7   		movq	%rax, %rdi
 3520 002a E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 3520      00
 3521 002f 488B00   		movq	(%rax), %rax
 3522 0032 4829C3   		subq	%rax, %rbx
 3523 0035 4889D8   		movq	%rbx, %rax
 3524 0038 48C1F804 		sarq	$4, %rax
 3525 003c 4883C418 		addq	$24, %rsp
 3526 0040 5B       		popq	%rbx
 3527 0041 5D       		popq	%rbp
 3528              		.cfi_def_cfa 7, 8
 3529 0042 C3       		ret
 3530              		.cfi_endproc
 3531              	.LFE976:
 3533              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vec
 3534              		.align 2
 3535              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm
 3537              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm:
 3538              	.LFB977:
 167:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 3539              		.loc 5 167 0
 3540              		.cfi_startproc
 3541 0000 55       		pushq	%rbp
 3542              		.cfi_def_cfa_offset 16
 3543              		.cfi_offset 6, -16
 3544 0001 4889E5   		movq	%rsp, %rbp
 3545              		.cfi_def_cfa_register 6
 3546 0004 4883EC10 		subq	$16, %rsp
 3547 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3548 000c 488975F0 		movq	%rsi, -16(%rbp)
 3549              	.LBB43:
 170:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 3550              		.loc 5 170 0
 3551 0010 48837DF0 		cmpq	$0, -16(%rbp)
 3551      00
 3552 0015 7415     		je	.L180
 170:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 3553              		.loc 5 170 0 is_stmt 0 discriminator 1
 3554 0017 488B45F8 		movq	-8(%rbp), %rax
 3555 001b 488B55F0 		movq	-16(%rbp), %rdx
 3556 001f 4889D6   		movq	%rdx, %rsi
 3557 0022 4889C7   		movq	%rax, %rdi
 3558 0025 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8allocateERS3_m@PLT
 3558      00
 3559 002a EB05     		jmp	.L181
 3560              	.L180:
 170:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 3561              		.loc 5 170 0 discriminator 2
 3562 002c B8000000 		movl	$0, %eax
 3562      00
 3563              	.L181:
 3564              	.LBE43:
 171:/usr/include/c++/4.9/bits/stl_vector.h **** 
 3565              		.loc 5 171 0 is_stmt 1 discriminator 4
 3566 0031 C9       		leave
 3567              		.cfi_def_cfa 7, 8
 3568 0032 C3       		ret
 3569              		.cfi_endproc
 3570              	.LFE977:
 3572              		.section	.text._ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiSsES2_SaIS1_EET0_T_S5_S4_RT1_,"a
 3573              		.weak	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiSsES2_SaIS1_EET0_T_S5_S4_RT1_
 3575              	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiSsES2_SaIS1_EET0_T_S5_S4_RT1_:
 3576              	.LFB978:
 295:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 3577              		.loc 13 295 0
 3578              		.cfi_startproc
 3579 0000 55       		pushq	%rbp
 3580              		.cfi_def_cfa_offset 16
 3581              		.cfi_offset 6, -16
 3582 0001 4889E5   		movq	%rsp, %rbp
 3583              		.cfi_def_cfa_register 6
 3584 0004 4883EC20 		subq	$32, %rsp
 3585 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3586 000c 488975F0 		movq	%rsi, -16(%rbp)
 3587 0010 488955E8 		movq	%rdx, -24(%rbp)
 3588 0014 48894DE0 		movq	%rcx, -32(%rbp)
 302:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     }
 3589              		.loc 13 302 0
 3590 0018 488B4DE0 		movq	-32(%rbp), %rcx
 3591 001c 488B55E8 		movq	-24(%rbp), %rdx
 3592 0020 488B75F0 		movq	-16(%rbp), %rsi
 3593 0024 488B45F8 		movq	-8(%rbp), %rax
 3594 0028 4889C7   		movq	%rax, %rdi
 3595 002b E8000000 		call	_ZSt22__uninitialized_copy_aIPSt4pairIiSsES2_S1_ET0_T_S4_S3_RSaIT1_E@PLT
 3595      00
 3596              		.loc 13 303 0
 3597 0030 C9       		leave
 3598              		.cfi_def_cfa 7, 8
 3599 0031 C3       		ret
 3600              		.cfi_endproc
 3601              	.LFE978:
 3603              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE7destroyERS3_PS2_,"axG",@progbits,_Z
 3604              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE7destroyERS3_PS2_
 3606              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE7destroyERS3_PS2_:
 3607              	.LFB979:
 191:/usr/include/c++/4.9/ext/alloc_traits.h ****     { __a.destroy(__p); }
 3608              		.loc 7 191 0
 3609              		.cfi_startproc
 3610 0000 55       		pushq	%rbp
 3611              		.cfi_def_cfa_offset 16
 3612              		.cfi_offset 6, -16
 3613 0001 4889E5   		movq	%rsp, %rbp
 3614              		.cfi_def_cfa_register 6
 3615 0004 4883EC10 		subq	$16, %rsp
 3616 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3617 000c 488975F0 		movq	%rsi, -16(%rbp)
 3618              		.loc 7 192 0
 3619 0010 488B55F0 		movq	-16(%rbp), %rdx
 3620 0014 488B45F8 		movq	-8(%rbp), %rax
 3621 0018 4889D6   		movq	%rdx, %rsi
 3622 001b 4889C7   		movq	%rax, %rdi
 3623 001e E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE7destroyEPS2_@PLT
 3623      00
 3624 0023 C9       		leave
 3625              		.cfi_def_cfa 7, 8
 3626 0024 C3       		ret
 3627              		.cfi_endproc
 3628              	.LFE979:
 3630              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS3_,"axG",
 3631              		.align 2
 3632              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS3_
 3634              	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS3_:
 3635              	.LFB981:
 728:/usr/include/c++/4.9/bits/stl_iterator.h ****       : _M_current(__i) { }
 3636              		.loc 9 728 0
 3637              		.cfi_startproc
 3638 0000 55       		pushq	%rbp
 3639              		.cfi_def_cfa_offset 16
 3640              		.cfi_offset 6, -16
 3641 0001 4889E5   		movq	%rsp, %rbp
 3642              		.cfi_def_cfa_register 6
 3643 0004 48897DF8 		movq	%rdi, -8(%rbp)
 3644 0008 488975F0 		movq	%rsi, -16(%rbp)
 3645              	.LBB44:
 729:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 3646              		.loc 9 729 0
 3647 000c 488B45F0 		movq	-16(%rbp), %rax
 3648 0010 488B10   		movq	(%rax), %rdx
 3649 0013 488B45F8 		movq	-8(%rbp), %rax
 3650 0017 488910   		movq	%rdx, (%rax)
 3651              	.LBE44:
 3652 001a 5D       		popq	%rbp
 3653              		.cfi_def_cfa 7, 8
 3654 001b C3       		ret
 3655              		.cfi_endproc
 3656              	.LFE981:
 3658              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS3_
 3659              		.set	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS3_,_ZN9__gnu_cxx17_
 3660              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_a
 3661              		.align 2
 3662              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev
 3664              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev:
 3665              	.LFB987:
  86:/usr/include/c++/4.9/ext/new_allocator.h **** 
 3666              		.loc 11 86 0
 3667              		.cfi_startproc
 3668 0000 55       		pushq	%rbp
 3669              		.cfi_def_cfa_offset 16
 3670              		.cfi_offset 6, -16
 3671 0001 4889E5   		movq	%rsp, %rbp
 3672              		.cfi_def_cfa_register 6
 3673 0004 48897DF8 		movq	%rdi, -8(%rbp)
  86:/usr/include/c++/4.9/ext/new_allocator.h **** 
 3674              		.loc 11 86 0
 3675 0008 5D       		popq	%rbp
 3676              		.cfi_def_cfa 7, 8
 3677 0009 C3       		ret
 3678              		.cfi_endproc
 3679              	.LFE987:
 3681              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED1Ev
 3682              		.set	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED1Ev,_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev
 3683              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE10deallocateERS3_PS2_m,"axG",@progbi
 3684              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE10deallocateERS3_PS2_m
 3686              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE10deallocateERS3_PS2_m:
 3687              	.LFB989:
 184:/usr/include/c++/4.9/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 3688              		.loc 7 184 0
 3689              		.cfi_startproc
 3690 0000 55       		pushq	%rbp
 3691              		.cfi_def_cfa_offset 16
 3692              		.cfi_offset 6, -16
 3693 0001 4889E5   		movq	%rsp, %rbp
 3694              		.cfi_def_cfa_register 6
 3695 0004 4883EC20 		subq	$32, %rsp
 3696 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3697 000c 488975F0 		movq	%rsi, -16(%rbp)
 3698 0010 488955E8 		movq	%rdx, -24(%rbp)
 185:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 3699              		.loc 7 185 0
 3700 0014 488B55E8 		movq	-24(%rbp), %rdx
 3701 0018 488B4DF0 		movq	-16(%rbp), %rcx
 3702 001c 488B45F8 		movq	-8(%rbp), %rax
 3703 0020 4889CE   		movq	%rcx, %rsi
 3704 0023 4889C7   		movq	%rax, %rdi
 3705 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m@PLT
 3705      00
 3706 002b C9       		leave
 3707              		.cfi_def_cfa 7, 8
 3708 002c C3       		ret
 3709              		.cfi_endproc
 3710              	.LFE989:
 3712              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_,"axG",@progbits,_ZNSt12_D
 3713              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_
 3715              	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_:
 3716              	.LFB990:
 100:/usr/include/c++/4.9/bits/stl_construct.h **** 	{
 3717              		.loc 6 100 0
 3718              		.cfi_startproc
 3719 0000 55       		pushq	%rbp
 3720              		.cfi_def_cfa_offset 16
 3721              		.cfi_offset 6, -16
 3722 0001 4889E5   		movq	%rsp, %rbp
 3723              		.cfi_def_cfa_register 6
 3724 0004 4883EC10 		subq	$16, %rsp
 3725 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3726 000c 488975F0 		movq	%rsi, -16(%rbp)
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3727              		.loc 6 102 0
 3728 0010 EB19     		jmp	.L191
 3729              	.L192:
 103:/usr/include/c++/4.9/bits/stl_construct.h **** 	}
 3730              		.loc 6 103 0 discriminator 2
 3731 0012 488B45F8 		movq	-8(%rbp), %rax
 3732 0016 4889C7   		movq	%rax, %rdi
 3733 0019 E8000000 		call	_ZSt11__addressofISt4pairIiSsEEPT_RS2_@PLT
 3733      00
 3734 001e 4889C7   		movq	%rax, %rdi
 3735 0021 E8000000 		call	_ZSt8_DestroyISt4pairIiSsEEvPT_@PLT
 3735      00
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3736              		.loc 6 102 0 discriminator 2
 3737 0026 488345F8 		addq	$16, -8(%rbp)
 3737      10
 3738              	.L191:
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3739              		.loc 6 102 0 is_stmt 0 discriminator 1
 3740 002b 488B45F8 		movq	-8(%rbp), %rax
 3741 002f 483B45F0 		cmpq	-16(%rbp), %rax
 3742 0033 75DD     		jne	.L192
 104:/usr/include/c++/4.9/bits/stl_construct.h ****     };
 3743              		.loc 6 104 0 is_stmt 1
 3744 0035 C9       		leave
 3745              		.cfi_def_cfa 7, 8
 3746 0036 C3       		ret
 3747              		.cfi_endproc
 3748              	.LFE990:
 3750              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorISt4pairIiSs
 3751              		.align 2
 3752              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv
 3754              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv:
 3755              	.LFB991:
 654:/usr/include/c++/4.9/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 3756              		.loc 5 654 0
 3757              		.cfi_startproc
 3758 0000 55       		pushq	%rbp
 3759              		.cfi_def_cfa_offset 16
 3760              		.cfi_offset 6, -16
 3761 0001 4889E5   		movq	%rsp, %rbp
 3762              		.cfi_def_cfa_register 6
 3763 0004 48897DF8 		movq	%rdi, -8(%rbp)
 655:/usr/include/c++/4.9/bits/stl_vector.h **** 
 3764              		.loc 5 655 0
 3765 0008 488B45F8 		movq	-8(%rbp), %rax
 3766 000c 488B4008 		movq	8(%rax), %rax
 3767 0010 4889C2   		movq	%rax, %rdx
 3768 0013 488B45F8 		movq	-8(%rbp), %rax
 3769 0017 488B00   		movq	(%rax), %rax
 3770 001a 4829C2   		subq	%rax, %rdx
 3771 001d 4889D0   		movq	%rdx, %rax
 3772 0020 48C1F804 		sarq	$4, %rax
 3773 0024 5D       		popq	%rbp
 3774              		.cfi_def_cfa 7, 8
 3775 0025 C3       		ret
 3776              		.cfi_endproc
 3777              	.LFE991:
 3779              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE17_S_select_on_copyERKS3_,"axG",@pro
 3780              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE17_S_select_on_copyERKS3_
 3782              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE17_S_select_on_copyERKS3_:
 3783              	.LFB992:
 193:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 194:/usr/include/c++/4.9/ext/alloc_traits.h ****     static size_type max_size(const _Alloc& __a)
 195:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return __a.max_size(); }
 196:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 197:/usr/include/c++/4.9/ext/alloc_traits.h ****     static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }
 3784              		.loc 7 197 0
 3785              		.cfi_startproc
 3786 0000 55       		pushq	%rbp
 3787              		.cfi_def_cfa_offset 16
 3788              		.cfi_offset 6, -16
 3789 0001 4889E5   		movq	%rsp, %rbp
 3790              		.cfi_def_cfa_register 6
 3791 0004 48897DF8 		movq	%rdi, -8(%rbp)
 3792              		.loc 7 197 0
 3793 0008 488B45F8 		movq	-8(%rbp), %rax
 3794 000c 5D       		popq	%rbp
 3795              		.cfi_def_cfa 7, 8
 3796 000d C3       		ret
 3797              		.cfi_endproc
 3798              	.LFE992:
 3800              		.section	.text._ZNKSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_Z
 3801              		.align 2
 3802              		.weak	_ZNKSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv
 3804              	_ZNKSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv:
 3805              	.LFB993:
 117:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 3806              		.loc 5 117 0
 3807              		.cfi_startproc
 3808 0000 55       		pushq	%rbp
 3809              		.cfi_def_cfa_offset 16
 3810              		.cfi_offset 6, -16
 3811 0001 4889E5   		movq	%rsp, %rbp
 3812              		.cfi_def_cfa_register 6
 3813 0004 48897DF8 		movq	%rdi, -8(%rbp)
 118:/usr/include/c++/4.9/bits/stl_vector.h **** 
 3814              		.loc 5 118 0
 3815 0008 488B45F8 		movq	-8(%rbp), %rax
 3816 000c 5D       		popq	%rbp
 3817              		.cfi_def_cfa 7, 8
 3818 000d C3       		ret
 3819              		.cfi_endproc
 3820              	.LFE993:
 3822              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_,"axG",@progbits,_ZNSt12_Vector_ba
 3823              		.align 2
 3824              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_
 3826              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_:
 3827              	.LFB995:
 134:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl(__a)
 3828              		.loc 5 134 0
 3829              		.cfi_startproc
 3830              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3831              		.cfi_lsda 0x1b,.LLSDA995
 3832 0000 55       		pushq	%rbp
 3833              		.cfi_def_cfa_offset 16
 3834              		.cfi_offset 6, -16
 3835 0001 4889E5   		movq	%rsp, %rbp
 3836              		.cfi_def_cfa_register 6
 3837 0004 53       		pushq	%rbx
 3838 0005 4883EC28 		subq	$40, %rsp
 3839              		.cfi_offset 3, -24
 3840 0009 48897DE8 		movq	%rdi, -24(%rbp)
 3841 000d 488975E0 		movq	%rsi, -32(%rbp)
 3842 0011 488955D8 		movq	%rdx, -40(%rbp)
 3843              	.LBB45:
 135:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_create_storage(__n); }
 3844              		.loc 5 135 0
 3845 0015 488B45E8 		movq	-24(%rbp), %rax
 3846 0019 488B55D8 		movq	-40(%rbp), %rdx
 3847 001d 4889D6   		movq	%rdx, %rsi
 3848 0020 4889C7   		movq	%rax, %rdi
 3849              	.LEHB50:
 3850 0023 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC1ERKS2_@PLT
 3850      00
 3851              	.LEHE50:
 136:/usr/include/c++/4.9/bits/stl_vector.h **** 
 3852              		.loc 5 136 0
 3853 0028 488B55E0 		movq	-32(%rbp), %rdx
 3854 002c 488B45E8 		movq	-24(%rbp), %rax
 3855 0030 4889D6   		movq	%rdx, %rsi
 3856 0033 4889C7   		movq	%rax, %rdi
 3857              	.LEHB51:
 3858 0036 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE17_M_create_storageEm@PLT
 3858      00
 3859              	.LEHE51:
 3860              	.LBE45:
 3861 003b EB1A     		jmp	.L202
 3862              	.L201:
 3863 003d 4889C3   		movq	%rax, %rbx
 3864              	.LBB46:
 135:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_create_storage(__n); }
 3865              		.loc 5 135 0
 3866 0040 488B45E8 		movq	-24(%rbp), %rax
 3867 0044 4889C7   		movq	%rax, %rdi
 3868 0047 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev@PLT
 3868      00
 3869 004c 4889D8   		movq	%rbx, %rax
 3870 004f 4889C7   		movq	%rax, %rdi
 3871              	.LEHB52:
 3872 0052 E8000000 		call	_Unwind_Resume@PLT
 3872      00
 3873              	.LEHE52:
 3874              	.L202:
 3875              	.LBE46:
 136:/usr/include/c++/4.9/bits/stl_vector.h **** 
 3876              		.loc 5 136 0
 3877 0057 4883C428 		addq	$40, %rsp
 3878 005b 5B       		popq	%rbx
 3879 005c 5D       		popq	%rbp
 3880              		.cfi_def_cfa 7, 8
 3881 005d C3       		ret
 3882              		.cfi_endproc
 3883              	.LFE995:
 3884              		.section	.gcc_except_table
 3885              	.LLSDA995:
 3886 0116 FF       		.byte	0xff
 3887 0117 FF       		.byte	0xff
 3888 0118 01       		.byte	0x1
 3889 0119 0C       		.uleb128 .LLSDACSE995-.LLSDACSB995
 3890              	.LLSDACSB995:
 3891 011a 23       		.uleb128 .LEHB50-.LFB995
 3892 011b 05       		.uleb128 .LEHE50-.LEHB50
 3893 011c 00       		.uleb128 0
 3894 011d 00       		.uleb128 0
 3895 011e 36       		.uleb128 .LEHB51-.LFB995
 3896 011f 05       		.uleb128 .LEHE51-.LEHB51
 3897 0120 3D       		.uleb128 .L201-.LFB995
 3898 0121 00       		.uleb128 0
 3899 0122 52       		.uleb128 .LEHB52-.LFB995
 3900 0123 05       		.uleb128 .LEHE52-.LEHB52
 3901 0124 00       		.uleb128 0
 3902 0125 00       		.uleb128 0
 3903              	.LLSDACSE995:
 3904              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_,"axG",@progbits,_ZNSt12_Vector_ba
 3906              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC1EmRKS2_
 3907              		.set	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC1EmRKS2_,_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2E
 3908              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv,"axG",@progbits,_ZNKSt6vectorISt4pairIiS
 3909              		.align 2
 3910              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv
 3912              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv:
 3913              	.LFB997:
 556:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 3914              		.loc 5 556 0
 3915              		.cfi_startproc
 3916 0000 55       		pushq	%rbp
 3917              		.cfi_def_cfa_offset 16
 3918              		.cfi_offset 6, -16
 3919 0001 4889E5   		movq	%rsp, %rbp
 3920              		.cfi_def_cfa_register 6
 3921 0004 4883EC30 		subq	$48, %rsp
 3922 0008 48897DD8 		movq	%rdi, -40(%rbp)
 556:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 3923              		.loc 5 556 0
 3924 000c 64488B04 		movq	%fs:40, %rax
 3924      25280000 
 3924      00
 3925 0015 488945F8 		movq	%rax, -8(%rbp)
 3926 0019 31C0     		xorl	%eax, %eax
 557:/usr/include/c++/4.9/bits/stl_vector.h **** 
 3927              		.loc 5 557 0
 3928 001b 488B45D8 		movq	-40(%rbp), %rax
 3929 001f 488B00   		movq	(%rax), %rax
 3930 0022 488945F0 		movq	%rax, -16(%rbp)
 3931 0026 488D55F0 		leaq	-16(%rbp), %rdx
 3932 002a 488D45E0 		leaq	-32(%rbp), %rax
 3933 002e 4889D6   		movq	%rdx, %rsi
 3934 0031 4889C7   		movq	%rax, %rdi
 3935 0034 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_@PLT
 3935      00
 3936 0039 488B45E0 		movq	-32(%rbp), %rax
 3937 003d 488B4DF8 		movq	-8(%rbp), %rcx
 3938 0041 6448330C 		xorq	%fs:40, %rcx
 3938      25280000 
 3938      00
 3939 004a 7405     		je	.L205
 3940 004c E8000000 		call	__stack_chk_fail@PLT
 3940      00
 3941              	.L205:
 3942 0051 C9       		leave
 3943              		.cfi_def_cfa 7, 8
 3944 0052 C3       		ret
 3945              		.cfi_endproc
 3946              	.LFE997:
 3948              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv,"axG",@progbits,_ZNKSt6vectorISt4pairIiSsE
 3949              		.align 2
 3950              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv
 3952              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv:
 3953              	.LFB998:
 574:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 3954              		.loc 5 574 0
 3955              		.cfi_startproc
 3956 0000 55       		pushq	%rbp
 3957              		.cfi_def_cfa_offset 16
 3958              		.cfi_offset 6, -16
 3959 0001 4889E5   		movq	%rsp, %rbp
 3960              		.cfi_def_cfa_register 6
 3961 0004 4883EC30 		subq	$48, %rsp
 3962 0008 48897DD8 		movq	%rdi, -40(%rbp)
 574:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 3963              		.loc 5 574 0
 3964 000c 64488B04 		movq	%fs:40, %rax
 3964      25280000 
 3964      00
 3965 0015 488945F8 		movq	%rax, -8(%rbp)
 3966 0019 31C0     		xorl	%eax, %eax
 575:/usr/include/c++/4.9/bits/stl_vector.h **** 
 3967              		.loc 5 575 0
 3968 001b 488B45D8 		movq	-40(%rbp), %rax
 3969 001f 488B4008 		movq	8(%rax), %rax
 3970 0023 488945F0 		movq	%rax, -16(%rbp)
 3971 0027 488D55F0 		leaq	-16(%rbp), %rdx
 3972 002b 488D45E0 		leaq	-32(%rbp), %rax
 3973 002f 4889D6   		movq	%rdx, %rsi
 3974 0032 4889C7   		movq	%rax, %rdi
 3975 0035 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_@PLT
 3975      00
 3976 003a 488B45E0 		movq	-32(%rbp), %rax
 3977 003e 488B4DF8 		movq	-8(%rbp), %rcx
 3978 0042 6448330C 		xorq	%fs:40, %rcx
 3978      25280000 
 3978      00
 3979 004b 7405     		je	.L208
 3980 004d E8000000 		call	__stack_chk_fail@PLT
 3980      00
 3981              	.L208:
 3982 0052 C9       		leave
 3983              		.cfi_def_cfa 7, 8
 3984 0053 C3       		ret
 3985              		.cfi_endproc
 3986              	.LFE998:
 3988              		.section	.text._ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vector
 3989              		.weak	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3
 3991              	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEPS
 3992              	.LFB999:
 277:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 3993              		.loc 13 277 0
 3994              		.cfi_startproc
 3995 0000 55       		pushq	%rbp
 3996              		.cfi_def_cfa_offset 16
 3997              		.cfi_offset 6, -16
 3998 0001 4889E5   		movq	%rsp, %rbp
 3999              		.cfi_def_cfa_register 6
 4000 0004 4883EC20 		subq	$32, %rsp
 4001 0008 48897DF0 		movq	%rdi, -16(%rbp)
 4002 000c 488975E0 		movq	%rsi, -32(%rbp)
 4003 0010 488955E8 		movq	%rdx, -24(%rbp)
 4004 0014 48894DF8 		movq	%rcx, -8(%rbp)
 279:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 4005              		.loc 13 279 0
 4006 0018 488B55E8 		movq	-24(%rbp), %rdx
 4007 001c 488B4DE0 		movq	-32(%rbp), %rcx
 4008 0020 488B45F0 		movq	-16(%rbp), %rax
 4009 0024 4889CE   		movq	%rcx, %rsi
 4010 0027 4889C7   		movq	%rax, %rdi
 4011 002a E8000000 		call	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEE
 4011      00
 4012 002f C9       		leave
 4013              		.cfi_def_cfa 7, 8
 4014 0030 C3       		ret
 4015              		.cfi_endproc
 4016              	.LFE999:
 4018              		.section	.text._ZSt12__miter_baseIPN8UnitTest18DeferredTestResultEENSt11_Miter_baseIT_E13iterator_
 4019              		.weak	_ZSt12__miter_baseIPN8UnitTest18DeferredTestResultEENSt11_Miter_baseIT_E13iterator_typeES4_
 4021              	_ZSt12__miter_baseIPN8UnitTest18DeferredTestResultEENSt11_Miter_baseIT_E13iterator_typeES4_:
 4022              	.LFB1000:
 289:/usr/include/c++/4.9/bits/stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 4023              		.loc 12 289 0
 4024              		.cfi_startproc
 4025 0000 55       		pushq	%rbp
 4026              		.cfi_def_cfa_offset 16
 4027              		.cfi_offset 6, -16
 4028 0001 4889E5   		movq	%rsp, %rbp
 4029              		.cfi_def_cfa_register 6
 4030 0004 4883EC10 		subq	$16, %rsp
 4031 0008 48897DF8 		movq	%rdi, -8(%rbp)
 290:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 4032              		.loc 12 290 0
 4033 000c 488B45F8 		movq	-8(%rbp), %rax
 4034 0010 4889C7   		movq	%rax, %rdi
 4035 0013 E8000000 		call	_ZNSt10_Iter_baseIPN8UnitTest18DeferredTestResultELb0EE7_S_baseES2_@PLT
 4035      00
 4036 0018 C9       		leave
 4037              		.cfi_def_cfa 7, 8
 4038 0019 C3       		ret
 4039              		.cfi_endproc
 4040              	.LFE1000:
 4042              		.section	.text._ZSt23__copy_move_backward_a2ILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_,
 4043              		.weak	_ZSt23__copy_move_backward_a2ILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_
 4045              	_ZSt23__copy_move_backward_a2ILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_:
 4046              	.LFB1001:
 603:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 4047              		.loc 12 603 0
 4048              		.cfi_startproc
 4049 0000 55       		pushq	%rbp
 4050              		.cfi_def_cfa_offset 16
 4051              		.cfi_offset 6, -16
 4052 0001 4889E5   		movq	%rsp, %rbp
 4053              		.cfi_def_cfa_register 6
 4054 0004 4154     		pushq	%r12
 4055 0006 53       		pushq	%rbx
 4056 0007 4883EC20 		subq	$32, %rsp
 4057              		.cfi_offset 12, -24
 4058              		.cfi_offset 3, -32
 4059 000b 48897DE8 		movq	%rdi, -24(%rbp)
 4060 000f 488975E0 		movq	%rsi, -32(%rbp)
 4061 0013 488955D8 		movq	%rdx, -40(%rbp)
 607:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 4062              		.loc 12 607 0
 4063 0017 488B45D8 		movq	-40(%rbp), %rax
 4064 001b 4889C7   		movq	%rax, %rdi
 4065 001e E8000000 		call	_ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_typeES4_@P
 4065      00
 4066 0023 4989C4   		movq	%rax, %r12
 4067 0026 488B45E0 		movq	-32(%rbp), %rax
 4068 002a 4889C7   		movq	%rax, %rdi
 4069 002d E8000000 		call	_ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_typeES4_@P
 4069      00
 4070 0032 4889C3   		movq	%rax, %rbx
 4071 0035 488B45E8 		movq	-24(%rbp), %rax
 4072 0039 4889C7   		movq	%rax, %rdi
 4073 003c E8000000 		call	_ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_typeES4_@P
 4073      00
 4074 0041 4C89E2   		movq	%r12, %rdx
 4075 0044 4889DE   		movq	%rbx, %rsi
 4076 0047 4889C7   		movq	%rax, %rdi
 4077 004a E8000000 		call	_ZSt22__copy_move_backward_aILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_@PLT
 4077      00
 608:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 4078              		.loc 12 608 0
 4079 004f 4883C420 		addq	$32, %rsp
 4080 0053 5B       		popq	%rbx
 4081 0054 415C     		popq	%r12
 4082 0056 5D       		popq	%rbp
 4083              		.cfi_def_cfa 7, 8
 4084 0057 C3       		ret
 4085              		.cfi_endproc
 4086              	.LFE1001:
 4088              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE8capacityEv,"axG",@progbits,_ZNKSt6vectorISt4pair
 4089              		.align 2
 4090              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8capacityEv
 4092              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8capacityEv:
 4093              	.LFB1002:
 734:/usr/include/c++/4.9/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 4094              		.loc 5 734 0
 4095              		.cfi_startproc
 4096 0000 55       		pushq	%rbp
 4097              		.cfi_def_cfa_offset 16
 4098              		.cfi_offset 6, -16
 4099 0001 4889E5   		movq	%rsp, %rbp
 4100              		.cfi_def_cfa_register 6
 4101 0004 48897DF8 		movq	%rdi, -8(%rbp)
 736:/usr/include/c++/4.9/bits/stl_vector.h **** 
 4102              		.loc 5 736 0
 4103 0008 488B45F8 		movq	-8(%rbp), %rax
 4104 000c 488B4010 		movq	16(%rax), %rax
 4105 0010 4889C2   		movq	%rax, %rdx
 4106 0013 488B45F8 		movq	-8(%rbp), %rax
 4107 0017 488B00   		movq	(%rax), %rax
 4108 001a 4829C2   		subq	%rax, %rdx
 4109 001d 4889D0   		movq	%rdx, %rax
 4110 0020 48C1F804 		sarq	$4, %rax
 4111 0024 5D       		popq	%rbp
 4112              		.cfi_def_cfa 7, 8
 4113 0025 C3       		ret
 4114              		.cfi_endproc
 4115              	.LFE1002:
 4117              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_itera
 4118              		.align 2
 4119              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_
 4121              	_ZNSt6vectorISt4pairIiSsESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEE
 4122              	.LFB1003:
1221:/usr/include/c++/4.9/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
 4123              		.loc 5 1221 0
 4124              		.cfi_startproc
 4125              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4126              		.cfi_lsda 0x1b,.LLSDA1003
 4127 0000 55       		pushq	%rbp
 4128              		.cfi_def_cfa_offset 16
 4129              		.cfi_offset 6, -16
 4130 0001 4889E5   		movq	%rsp, %rbp
 4131              		.cfi_def_cfa_register 6
 4132 0004 53       		pushq	%rbx
 4133 0005 4883EC48 		subq	$72, %rsp
 4134              		.cfi_offset 3, -24
 4135 0009 48897DD8 		movq	%rdi, -40(%rbp)
 4136 000d 488975D0 		movq	%rsi, -48(%rbp)
 4137 0011 488955C0 		movq	%rdx, -64(%rbp)
 4138 0015 48894DB0 		movq	%rcx, -80(%rbp)
 4139              	.LBB47:
1224:/usr/include/c++/4.9/bits/stl_vector.h **** 	  __try
 4140              		.loc 5 1224 0
 4141 0019 488B45D8 		movq	-40(%rbp), %rax
 4142 001d 488B55D0 		movq	-48(%rbp), %rdx
 4143 0021 4889D6   		movq	%rdx, %rsi
 4144 0024 4889C7   		movq	%rax, %rdi
 4145              	.LEHB53:
 4146 0027 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm@PLT
 4146      00
 4147              	.LEHE53:
 4148 002c 488945E8 		movq	%rax, -24(%rbp)
1228:/usr/include/c++/4.9/bits/stl_vector.h **** 	      return __result;
 4149              		.loc 5 1228 0
 4150 0030 488B45D8 		movq	-40(%rbp), %rax
 4151 0034 4889C7   		movq	%rax, %rdi
 4152 0037 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 4152      00
 4153 003c 4889C1   		movq	%rax, %rcx
1227:/usr/include/c++/4.9/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 4154              		.loc 5 1227 0
 4155 003f 488B55E8 		movq	-24(%rbp), %rdx
 4156 0043 488B75B0 		movq	-80(%rbp), %rsi
 4157 0047 488B45C0 		movq	-64(%rbp), %rax
 4158 004b 4889C7   		movq	%rax, %rdi
 4159              	.LEHB54:
 4160 004e E8000000 		call	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_
 4160      00
 4161              	.LEHE54:
1229:/usr/include/c++/4.9/bits/stl_vector.h **** 	    }
 4162              		.loc 5 1229 0
 4163 0053 488B45E8 		movq	-24(%rbp), %rax
 4164 0057 EB37     		jmp	.L223
 4165              	.L222:
 4166 0059 4889C3   		movq	%rax, %rbx
1231:/usr/include/c++/4.9/bits/stl_vector.h **** 	    {
 4167              		.loc 5 1231 0
 4168 005c E8000000 		call	__cxa_end_catch@PLT
 4168      00
 4169 0061 4889D8   		movq	%rbx, %rax
 4170 0064 4889C7   		movq	%rax, %rdi
 4171              	.LEHB55:
 4172 0067 E8000000 		call	_Unwind_Resume@PLT
 4172      00
 4173              	.LEHE55:
 4174              	.L221:
 4175 006c 4889C7   		movq	%rax, %rdi
 4176 006f E8000000 		call	__cxa_begin_catch@PLT
 4176      00
1233:/usr/include/c++/4.9/bits/stl_vector.h **** 	      __throw_exception_again;
 4177              		.loc 5 1233 0
 4178 0074 488B45D8 		movq	-40(%rbp), %rax
 4179 0078 488B55D0 		movq	-48(%rbp), %rdx
 4180 007c 488B4DE8 		movq	-24(%rbp), %rcx
 4181 0080 4889CE   		movq	%rcx, %rsi
 4182 0083 4889C7   		movq	%rax, %rdi
 4183              	.LEHB56:
 4184 0086 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m@PLT
 4184      00
1234:/usr/include/c++/4.9/bits/stl_vector.h **** 	    }
 4185              		.loc 5 1234 0
 4186 008b E8000000 		call	__cxa_rethrow@PLT
 4186      00
 4187              	.LEHE56:
 4188              	.L223:
 4189              	.LBE47:
1236:/usr/include/c++/4.9/bits/stl_vector.h **** 
 4190              		.loc 5 1236 0
 4191 0090 4883C448 		addq	$72, %rsp
 4192 0094 5B       		popq	%rbx
 4193 0095 5D       		popq	%rbp
 4194              		.cfi_def_cfa 7, 8
 4195 0096 C3       		ret
 4196              		.cfi_endproc
 4197              	.LFE1003:
 4198              		.section	.gcc_except_table
 4199 0126 0000     		.align 4
 4200              	.LLSDA1003:
 4201 0128 FF       		.byte	0xff
 4202 0129 9B       		.byte	0x9b
 4203 012a 19       		.uleb128 .LLSDATT1003-.LLSDATTD1003
 4204              	.LLSDATTD1003:
 4205 012b 01       		.byte	0x1
 4206 012c 11       		.uleb128 .LLSDACSE1003-.LLSDACSB1003
 4207              	.LLSDACSB1003:
 4208 012d 27       		.uleb128 .LEHB53-.LFB1003
 4209 012e 05       		.uleb128 .LEHE53-.LEHB53
 4210 012f 00       		.uleb128 0
 4211 0130 00       		.uleb128 0
 4212 0131 4E       		.uleb128 .LEHB54-.LFB1003
 4213 0132 05       		.uleb128 .LEHE54-.LEHB54
 4214 0133 6C       		.uleb128 .L221-.LFB1003
 4215 0134 01       		.uleb128 0x1
 4216 0135 67       		.uleb128 .LEHB55-.LFB1003
 4217 0136 05       		.uleb128 .LEHE55-.LEHB55
 4218 0137 00       		.uleb128 0
 4219 0138 00       		.uleb128 0
 4220 0139 8601     		.uleb128 .LEHB56-.LFB1003
 4221 013b 0A       		.uleb128 .LEHE56-.LEHB56
 4222 013c 59       		.uleb128 .L222-.LFB1003
 4223 013d 00       		.uleb128 0
 4224              	.LLSDACSE1003:
 4225 013e 01       		.byte	0x1
 4226 013f 00       		.byte	0
 4227              		.align 4
 4228 0140 00000000 		.long	0
 4229              	
 4230              	.LLSDATT1003:
 4231              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_itera
 4233              		.section	.text._ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_I
 4234              		.weak	_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EE
 4236              	_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_S
 4237              	.LFB1004:
 456:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 4238              		.loc 12 456 0
 4239              		.cfi_startproc
 4240 0000 55       		pushq	%rbp
 4241              		.cfi_def_cfa_offset 16
 4242              		.cfi_offset 6, -16
 4243 0001 4889E5   		movq	%rsp, %rbp
 4244              		.cfi_def_cfa_register 6
 4245 0004 53       		pushq	%rbx
 4246 0005 4883EC38 		subq	$56, %rsp
 4247              		.cfi_offset 3, -24
 4248 0009 48897DE0 		movq	%rdi, -32(%rbp)
 4249 000d 488975D0 		movq	%rsi, -48(%rbp)
 4250 0011 488955C0 		movq	%rdx, -64(%rbp)
 466:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 4251              		.loc 12 466 0
 4252 0015 488B45D0 		movq	-48(%rbp), %rax
 4253 0019 4889C7   		movq	%rax, %rdi
 4254 001c E8000000 		call	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11
 4254      00
 4255 0021 4889C3   		movq	%rax, %rbx
 4256 0024 488B45E0 		movq	-32(%rbp), %rax
 4257 0028 4889C7   		movq	%rax, %rdi
 4258 002b E8000000 		call	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11
 4258      00
 4259 0030 4889C1   		movq	%rax, %rcx
 4260 0033 488B45C0 		movq	-64(%rbp), %rax
 4261 0037 4889C2   		movq	%rax, %rdx
 4262 003a 4889DE   		movq	%rbx, %rsi
 4263 003d 4889CF   		movq	%rcx, %rdi
 4264 0040 E8000000 		call	_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEE
 4264      00
 467:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 4265              		.loc 12 467 0
 4266 0045 4883C438 		addq	$56, %rsp
 4267 0049 5B       		popq	%rbx
 4268 004a 5D       		popq	%rbp
 4269              		.cfi_def_cfa 7, 8
 4270 004b C3       		ret
 4271              		.cfi_endproc
 4272              	.LFE1004:
 4274              		.section	.text._ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEES3
 4275              		.weak	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEES3_EvT_S9_R
 4277              	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E
 4278              	.LFB1005:
 148:/usr/include/c++/4.9/bits/stl_construct.h **** 	     allocator<_Tp>&)
 4279              		.loc 6 148 0
 4280              		.cfi_startproc
 4281 0000 55       		pushq	%rbp
 4282              		.cfi_def_cfa_offset 16
 4283              		.cfi_offset 6, -16
 4284 0001 4889E5   		movq	%rsp, %rbp
 4285              		.cfi_def_cfa_register 6
 4286 0004 4883EC20 		subq	$32, %rsp
 4287 0008 48897DF0 		movq	%rdi, -16(%rbp)
 4288 000c 488975E0 		movq	%rsi, -32(%rbp)
 4289 0010 488955E8 		movq	%rdx, -24(%rbp)
 151:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 4290              		.loc 6 151 0
 4291 0014 488B55E0 		movq	-32(%rbp), %rdx
 4292 0018 488B45F0 		movq	-16(%rbp), %rax
 4293 001c 4889D6   		movq	%rdx, %rsi
 4294 001f 4889C7   		movq	%rax, %rdi
 4295 0022 E8000000 		call	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEEvT_S9_@PLT
 4295      00
 4296              		.loc 6 152 0
 4297 0027 C9       		leave
 4298              		.cfi_def_cfa 7, 8
 4299 0028 C3       		ret
 4300              		.cfi_endproc
 4301              	.LFE1005:
 4303              		.section	.text._ZSt4copyIPSt4pairIiSsES2_ET0_T_S4_S3_,"axG",@progbits,_ZSt4copyIPSt4pairIiSsES2_ET
 4304              		.weak	_ZSt4copyIPSt4pairIiSsES2_ET0_T_S4_S3_
 4306              	_ZSt4copyIPSt4pairIiSsES2_ET0_T_S4_S3_:
 4307              	.LFB1006:
 456:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 4308              		.loc 12 456 0
 4309              		.cfi_startproc
 4310 0000 55       		pushq	%rbp
 4311              		.cfi_def_cfa_offset 16
 4312              		.cfi_offset 6, -16
 4313 0001 4889E5   		movq	%rsp, %rbp
 4314              		.cfi_def_cfa_register 6
 4315 0004 53       		pushq	%rbx
 4316 0005 4883EC28 		subq	$40, %rsp
 4317              		.cfi_offset 3, -24
 4318 0009 48897DE8 		movq	%rdi, -24(%rbp)
 4319 000d 488975E0 		movq	%rsi, -32(%rbp)
 4320 0011 488955D8 		movq	%rdx, -40(%rbp)
 466:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 4321              		.loc 12 466 0
 4322 0015 488B45E0 		movq	-32(%rbp), %rax
 4323 0019 4889C7   		movq	%rax, %rdi
 4324 001c E8000000 		call	_ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_@PLT
 4324      00
 4325 0021 4889C3   		movq	%rax, %rbx
 4326 0024 488B45E8 		movq	-24(%rbp), %rax
 4327 0028 4889C7   		movq	%rax, %rdi
 4328 002b E8000000 		call	_ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_@PLT
 4328      00
 4329 0030 4889C1   		movq	%rax, %rcx
 4330 0033 488B45D8 		movq	-40(%rbp), %rax
 4331 0037 4889C2   		movq	%rax, %rdx
 4332 003a 4889DE   		movq	%rbx, %rsi
 4333 003d 4889CF   		movq	%rcx, %rdi
 4334 0040 E8000000 		call	_ZSt14__copy_move_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_@PLT
 4334      00
 467:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 4335              		.loc 12 467 0
 4336 0045 4883C428 		addq	$40, %rsp
 4337 0049 5B       		popq	%rbx
 4338 004a 5D       		popq	%rbp
 4339              		.cfi_def_cfa 7, 8
 4340 004b C3       		ret
 4341              		.cfi_endproc
 4342              	.LFE1006:
 4344              		.section	.text._ZSt22__uninitialized_copy_aIPSt4pairIiSsES2_S1_ET0_T_S4_S3_RSaIT1_E,"axG",@progbit
 4345              		.weak	_ZSt22__uninitialized_copy_aIPSt4pairIiSsES2_S1_ET0_T_S4_S3_RSaIT1_E
 4347              	_ZSt22__uninitialized_copy_aIPSt4pairIiSsES2_S1_ET0_T_S4_S3_RSaIT1_E:
 4348              	.LFB1007:
 277:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 4349              		.loc 13 277 0
 4350              		.cfi_startproc
 4351 0000 55       		pushq	%rbp
 4352              		.cfi_def_cfa_offset 16
 4353              		.cfi_offset 6, -16
 4354 0001 4889E5   		movq	%rsp, %rbp
 4355              		.cfi_def_cfa_register 6
 4356 0004 4883EC20 		subq	$32, %rsp
 4357 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4358 000c 488975F0 		movq	%rsi, -16(%rbp)
 4359 0010 488955E8 		movq	%rdx, -24(%rbp)
 4360 0014 48894DE0 		movq	%rcx, -32(%rbp)
 279:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 4361              		.loc 13 279 0
 4362 0018 488B55E8 		movq	-24(%rbp), %rdx
 4363 001c 488B4DF0 		movq	-16(%rbp), %rcx
 4364 0020 488B45F8 		movq	-8(%rbp), %rax
 4365 0024 4889CE   		movq	%rcx, %rsi
 4366 0027 4889C7   		movq	%rax, %rdi
 4367 002a E8000000 		call	_ZSt18uninitialized_copyIPSt4pairIiSsES2_ET0_T_S4_S3_@PLT
 4367      00
 4368 002f C9       		leave
 4369              		.cfi_def_cfa 7, 8
 4370 0030 C3       		ret
 4371              		.cfi_endproc
 4372              	.LFE1007:
 4374              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv,"axG",@progbits,_ZNKSt
 4375              		.align 2
 4376              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv
 4378              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv:
 4379              	.LFB1008:
 654:/usr/include/c++/4.9/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 4380              		.loc 5 654 0
 4381              		.cfi_startproc
 4382 0000 55       		pushq	%rbp
 4383              		.cfi_def_cfa_offset 16
 4384              		.cfi_offset 6, -16
 4385 0001 4889E5   		movq	%rsp, %rbp
 4386              		.cfi_def_cfa_register 6
 4387 0004 48897DF8 		movq	%rdi, -8(%rbp)
 655:/usr/include/c++/4.9/bits/stl_vector.h **** 
 4388              		.loc 5 655 0
 4389 0008 488B45F8 		movq	-8(%rbp), %rax
 4390 000c 488B4008 		movq	8(%rax), %rax
 4391 0010 4889C2   		movq	%rax, %rdx
 4392 0013 488B45F8 		movq	-8(%rbp), %rax
 4393 0017 488B00   		movq	(%rax), %rax
 4394 001a 4829C2   		subq	%rax, %rdx
 4395 001d 4889D0   		movq	%rdx, %rax
 4396 0020 48C1F803 		sarq	$3, %rax
 4397 0024 4889C2   		movq	%rax, %rdx
 4398 0027 48B8B76D 		movabsq	$7905747460161236407, %rax
 4398      DBB66DDB 
 4398      B66D
 4399 0031 480FAFC2 		imulq	%rdx, %rax
 4400 0035 5D       		popq	%rbp
 4401              		.cfi_def_cfa 7, 8
 4402 0036 C3       		ret
 4403              		.cfi_endproc
 4404              	.LFE1008:
 4406              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv,"axG",@progbits,_Z
 4407              		.align 2
 4408              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv
 4410              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv:
 4411              	.LFB1009:
 659:/usr/include/c++/4.9/bits/stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 4412              		.loc 5 659 0
 4413              		.cfi_startproc
 4414 0000 55       		pushq	%rbp
 4415              		.cfi_def_cfa_offset 16
 4416              		.cfi_offset 6, -16
 4417 0001 4889E5   		movq	%rsp, %rbp
 4418              		.cfi_def_cfa_register 6
 4419 0004 4883EC10 		subq	$16, %rsp
 4420 0008 48897DF8 		movq	%rdi, -8(%rbp)
 660:/usr/include/c++/4.9/bits/stl_vector.h **** 
 4421              		.loc 5 660 0
 4422 000c 488B45F8 		movq	-8(%rbp), %rax
 4423 0010 4889C7   		movq	%rax, %rdi
 4424 0013 E8000000 		call	_ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 4424      00
 4425 0018 4889C7   		movq	%rax, %rdi
 4426 001b E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_@PLT
 4426      00
 4427 0020 C9       		leave
 4428              		.cfi_def_cfa 7, 8
 4429 0021 C3       		ret
 4430              		.cfi_endproc
 4431              	.LFE1009:
 4433              		.section	.text._ZSt3maxImERKT_S2_S2_,"axG",@progbits,_ZSt3maxImERKT_S2_S2_,comdat
 4434              		.weak	_ZSt3maxImERKT_S2_S2_
 4436              	_ZSt3maxImERKT_S2_S2_:
 4437              	.LFB1010:
 217:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 4438              		.loc 12 217 0
 4439              		.cfi_startproc
 4440 0000 55       		pushq	%rbp
 4441              		.cfi_def_cfa_offset 16
 4442              		.cfi_offset 6, -16
 4443 0001 4889E5   		movq	%rsp, %rbp
 4444              		.cfi_def_cfa_register 6
 4445 0004 48897DF8 		movq	%rdi, -8(%rbp)
 4446 0008 488975F0 		movq	%rsi, -16(%rbp)
 222:/usr/include/c++/4.9/bits/stl_algobase.h **** 	return __b;
 4447              		.loc 12 222 0
 4448 000c 488B45F8 		movq	-8(%rbp), %rax
 4449 0010 488B10   		movq	(%rax), %rdx
 4450 0013 488B45F0 		movq	-16(%rbp), %rax
 4451 0017 488B00   		movq	(%rax), %rax
 4452 001a 4839C2   		cmpq	%rax, %rdx
 4453 001d 7306     		jnb	.L236
 223:/usr/include/c++/4.9/bits/stl_algobase.h ****       return __a;
 4454              		.loc 12 223 0
 4455 001f 488B45F0 		movq	-16(%rbp), %rax
 4456 0023 EB04     		jmp	.L237
 4457              	.L236:
 224:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 4458              		.loc 12 224 0
 4459 0025 488B45F8 		movq	-8(%rbp), %rax
 4460              	.L237:
 225:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 4461              		.loc 12 225 0
 4462 0029 5D       		popq	%rbp
 4463              		.cfi_def_cfa 7, 8
 4464 002a C3       		ret
 4465              		.cfi_endproc
 4466              	.LFE1010:
 4468              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8allocateERS3_m,"
 4469              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8allocateERS3_m
 4471              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8allocateERS3_m:
 4472              	.LFB1011:
 181:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 4473              		.loc 7 181 0
 4474              		.cfi_startproc
 4475 0000 55       		pushq	%rbp
 4476              		.cfi_def_cfa_offset 16
 4477              		.cfi_offset 6, -16
 4478 0001 4889E5   		movq	%rsp, %rbp
 4479              		.cfi_def_cfa_register 6
 4480 0004 4883EC10 		subq	$16, %rsp
 4481 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4482 000c 488975F0 		movq	%rsi, -16(%rbp)
 182:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 4483              		.loc 7 182 0
 4484 0010 488B4DF0 		movq	-16(%rbp), %rcx
 4485 0014 488B45F8 		movq	-8(%rbp), %rax
 4486 0018 BA000000 		movl	$0, %edx
 4486      00
 4487 001d 4889CE   		movq	%rcx, %rsi
 4488 0020 4889C7   		movq	%rax, %rdi
 4489 0023 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv@PLT
 4489      00
 4490 0028 C9       		leave
 4491              		.cfi_def_cfa 7, 8
 4492 0029 C3       		ret
 4493              		.cfi_endproc
 4494              	.LFE1011:
 4496              		.section	.text._ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaI
 4497              		.weak	_ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E
 4499              	_ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E:
 4500              	.LFB1012:
 277:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 4501              		.loc 13 277 0
 4502              		.cfi_startproc
 4503 0000 55       		pushq	%rbp
 4504              		.cfi_def_cfa_offset 16
 4505              		.cfi_offset 6, -16
 4506 0001 4889E5   		movq	%rsp, %rbp
 4507              		.cfi_def_cfa_register 6
 4508 0004 4883EC20 		subq	$32, %rsp
 4509 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4510 000c 488975F0 		movq	%rsi, -16(%rbp)
 4511 0010 488955E8 		movq	%rdx, -24(%rbp)
 4512 0014 48894DE0 		movq	%rcx, -32(%rbp)
 279:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 4513              		.loc 13 279 0
 4514 0018 488B55E8 		movq	-24(%rbp), %rdx
 4515 001c 488B4DF0 		movq	-16(%rbp), %rcx
 4516 0020 488B45F8 		movq	-8(%rbp), %rax
 4517 0024 4889CE   		movq	%rcx, %rsi
 4518 0027 4889C7   		movq	%rax, %rdi
 4519 002a E8000000 		call	_ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_@PLT
 4519      00
 4520 002f C9       		leave
 4521              		.cfi_def_cfa 7, 8
 4522 0030 C3       		ret
 4523              		.cfi_endproc
 4524              	.LFE1012:
 4526              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_,"axG",@p
 4527              		.align 2
 4528              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_
 4530              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_:
 4531              	.LFB1013:
 131:/usr/include/c++/4.9/ext/new_allocator.h **** 
 132:/usr/include/c++/4.9/ext/new_allocator.h ****       void 
 133:/usr/include/c++/4.9/ext/new_allocator.h ****       destroy(pointer __p) { __p->~_Tp(); }
 4532              		.loc 11 133 0
 4533              		.cfi_startproc
 4534 0000 55       		pushq	%rbp
 4535              		.cfi_def_cfa_offset 16
 4536              		.cfi_offset 6, -16
 4537 0001 4889E5   		movq	%rsp, %rbp
 4538              		.cfi_def_cfa_register 6
 4539 0004 4883EC10 		subq	$16, %rsp
 4540 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4541 000c 488975F0 		movq	%rsi, -16(%rbp)
 4542              		.loc 11 133 0
 4543 0010 488B45F0 		movq	-16(%rbp), %rax
 4544 0014 4889C7   		movq	%rax, %rdi
 4545 0017 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 4545      00
 4546 001c C9       		leave
 4547              		.cfi_def_cfa 7, 8
 4548 001d C3       		ret
 4549              		.cfi_endproc
 4550              	.LFE1013:
 4552              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_,"axG",@progbits,_ZSt8_Destroy
 4553              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
 4555              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:
 4556              	.LFB1014:
 122:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 4557              		.loc 6 122 0
 4558              		.cfi_startproc
 4559 0000 55       		pushq	%rbp
 4560              		.cfi_def_cfa_offset 16
 4561              		.cfi_offset 6, -16
 4562 0001 4889E5   		movq	%rsp, %rbp
 4563              		.cfi_def_cfa_register 6
 4564 0004 4883EC10 		subq	$16, %rsp
 4565 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4566 000c 488975F0 		movq	%rsi, -16(%rbp)
 4567              	.LBB48:
 126:/usr/include/c++/4.9/bits/stl_construct.h **** 	__destroy(__first, __last);
 4568              		.loc 6 126 0
 4569 0010 488B55F0 		movq	-16(%rbp), %rdx
 4570 0014 488B45F8 		movq	-8(%rbp), %rax
 4571 0018 4889D6   		movq	%rdx, %rsi
 4572 001b 4889C7   		movq	%rax, %rdi
 4573 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_@PLT
 4573      00
 4574              	.LBE48:
 128:/usr/include/c++/4.9/bits/stl_construct.h **** 
 4575              		.loc 6 128 0
 4576 0023 C9       		leave
 4577              		.cfi_def_cfa 7, 8
 4578 0024 C3       		ret
 4579              		.cfi_endproc
 4580              	.LFE1014:
 4582              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_
 4583              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m
 4585              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m:
 4586              	.LFB1015:
 184:/usr/include/c++/4.9/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 4587              		.loc 7 184 0
 4588              		.cfi_startproc
 4589 0000 55       		pushq	%rbp
 4590              		.cfi_def_cfa_offset 16
 4591              		.cfi_offset 6, -16
 4592 0001 4889E5   		movq	%rsp, %rbp
 4593              		.cfi_def_cfa_register 6
 4594 0004 4883EC20 		subq	$32, %rsp
 4595 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4596 000c 488975F0 		movq	%rsi, -16(%rbp)
 4597 0010 488955E8 		movq	%rdx, -24(%rbp)
 185:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 4598              		.loc 7 185 0
 4599 0014 488B55E8 		movq	-24(%rbp), %rdx
 4600 0018 488B4DF0 		movq	-16(%rbp), %rcx
 4601 001c 488B45F8 		movq	-8(%rbp), %rax
 4602 0020 4889CE   		movq	%rcx, %rsi
 4603 0023 4889C7   		movq	%rax, %rdi
 4604 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m@PLT
 4604      00
 4605 002b C9       		leave
 4606              		.cfi_def_cfa 7, 8
 4607 002c C3       		ret
 4608              		.cfi_endproc
 4609              	.LFE1015:
 4611              		.section	.text._ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_,"axG",@pro
 4612              		.weak	_ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_
 4614              	_ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_:
 4615              	.LFB1016:
 289:/usr/include/c++/4.9/bits/stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 4616              		.loc 12 289 0
 4617              		.cfi_startproc
 4618 0000 55       		pushq	%rbp
 4619              		.cfi_def_cfa_offset 16
 4620              		.cfi_offset 6, -16
 4621 0001 4889E5   		movq	%rsp, %rbp
 4622              		.cfi_def_cfa_register 6
 4623 0004 4883EC10 		subq	$16, %rsp
 4624 0008 48897DF8 		movq	%rdi, -8(%rbp)
 290:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 4625              		.loc 12 290 0
 4626 000c 488B45F8 		movq	-8(%rbp), %rax
 4627 0010 4889C7   		movq	%rax, %rdi
 4628 0013 E8000000 		call	_ZNSt10_Iter_baseIPSt4pairIiSsELb0EE7_S_baseES2_@PLT
 4628      00
 4629 0018 C9       		leave
 4630              		.cfi_def_cfa 7, 8
 4631 0019 C3       		ret
 4632              		.cfi_endproc
 4633              	.LFE1016:
 4635              		.section	.text._ZSt23__copy_move_backward_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_,"axG",@progbits,_ZS
 4636              		.weak	_ZSt23__copy_move_backward_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
 4638              	_ZSt23__copy_move_backward_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:
 4639              	.LFB1017:
 603:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 4640              		.loc 12 603 0
 4641              		.cfi_startproc
 4642 0000 55       		pushq	%rbp
 4643              		.cfi_def_cfa_offset 16
 4644              		.cfi_offset 6, -16
 4645 0001 4889E5   		movq	%rsp, %rbp
 4646              		.cfi_def_cfa_register 6
 4647 0004 4154     		pushq	%r12
 4648 0006 53       		pushq	%rbx
 4649 0007 4883EC20 		subq	$32, %rsp
 4650              		.cfi_offset 12, -24
 4651              		.cfi_offset 3, -32
 4652 000b 48897DE8 		movq	%rdi, -24(%rbp)
 4653 000f 488975E0 		movq	%rsi, -32(%rbp)
 4654 0013 488955D8 		movq	%rdx, -40(%rbp)
 607:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 4655              		.loc 12 607 0
 4656 0017 488B45D8 		movq	-40(%rbp), %rax
 4657 001b 4889C7   		movq	%rax, %rdi
 4658 001e E8000000 		call	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_@PLT
 4658      00
 4659 0023 4989C4   		movq	%rax, %r12
 4660 0026 488B45E0 		movq	-32(%rbp), %rax
 4661 002a 4889C7   		movq	%rax, %rdi
 4662 002d E8000000 		call	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_@PLT
 4662      00
 4663 0032 4889C3   		movq	%rax, %rbx
 4664 0035 488B45E8 		movq	-24(%rbp), %rax
 4665 0039 4889C7   		movq	%rax, %rdi
 4666 003c E8000000 		call	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_@PLT
 4666      00
 4667 0041 4C89E2   		movq	%r12, %rdx
 4668 0044 4889DE   		movq	%rbx, %rsi
 4669 0047 4889C7   		movq	%rax, %rdi
 4670 004a E8000000 		call	_ZSt22__copy_move_backward_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_@PLT
 4670      00
 608:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 4671              		.loc 12 608 0
 4672 004f 4883C420 		addq	$32, %rsp
 4673 0053 5B       		popq	%rbx
 4674 0054 415C     		popq	%r12
 4675 0056 5D       		popq	%rbp
 4676              		.cfi_def_cfa 7, 8
 4677 0057 C3       		ret
 4678              		.cfi_endproc
 4679              	.LFE1017:
 4681              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv,"axG",@progbits,_ZNKSt6vectorISt4pair
 4682              		.align 2
 4683              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv
 4685              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv:
 4686              	.LFB1018:
 659:/usr/include/c++/4.9/bits/stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 4687              		.loc 5 659 0
 4688              		.cfi_startproc
 4689 0000 55       		pushq	%rbp
 4690              		.cfi_def_cfa_offset 16
 4691              		.cfi_offset 6, -16
 4692 0001 4889E5   		movq	%rsp, %rbp
 4693              		.cfi_def_cfa_register 6
 4694 0004 4883EC10 		subq	$16, %rsp
 4695 0008 48897DF8 		movq	%rdi, -8(%rbp)
 660:/usr/include/c++/4.9/bits/stl_vector.h **** 
 4696              		.loc 5 660 0
 4697 000c 488B45F8 		movq	-8(%rbp), %rax
 4698 0010 4889C7   		movq	%rax, %rdi
 4699 0013 E8000000 		call	_ZNKSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 4699      00
 4700 0018 4889C7   		movq	%rax, %rdi
 4701 001b E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8max_sizeERKS3_@PLT
 4701      00
 4702 0020 C9       		leave
 4703              		.cfi_def_cfa 7, 8
 4704 0021 C3       		ret
 4705              		.cfi_endproc
 4706              	.LFE1018:
 4708              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8allocateERS3_m,"axG",@progbits,_ZN9
 4709              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8allocateERS3_m
 4711              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8allocateERS3_m:
 4712              	.LFB1019:
 181:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 4713              		.loc 7 181 0
 4714              		.cfi_startproc
 4715 0000 55       		pushq	%rbp
 4716              		.cfi_def_cfa_offset 16
 4717              		.cfi_offset 6, -16
 4718 0001 4889E5   		movq	%rsp, %rbp
 4719              		.cfi_def_cfa_register 6
 4720 0004 4883EC10 		subq	$16, %rsp
 4721 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4722 000c 488975F0 		movq	%rsi, -16(%rbp)
 182:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 4723              		.loc 7 182 0
 4724 0010 488B4DF0 		movq	-16(%rbp), %rcx
 4725 0014 488B45F8 		movq	-8(%rbp), %rax
 4726 0018 BA000000 		movl	$0, %edx
 4726      00
 4727 001d 4889CE   		movq	%rcx, %rsi
 4728 0020 4889C7   		movq	%rax, %rdi
 4729 0023 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE8allocateEmPKv@PLT
 4729      00
 4730 0028 C9       		leave
 4731              		.cfi_def_cfa 7, 8
 4732 0029 C3       		ret
 4733              		.cfi_endproc
 4734              	.LFE1019:
 4736              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE7destroyEPS2_,"axG",@progbits,_ZN9__gnu_c
 4737              		.align 2
 4738              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE7destroyEPS2_
 4740              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE7destroyEPS2_:
 4741              	.LFB1020:
 4742              		.loc 11 133 0
 4743              		.cfi_startproc
 4744 0000 55       		pushq	%rbp
 4745              		.cfi_def_cfa_offset 16
 4746              		.cfi_offset 6, -16
 4747 0001 4889E5   		movq	%rsp, %rbp
 4748              		.cfi_def_cfa_register 6
 4749 0004 4883EC10 		subq	$16, %rsp
 4750 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4751 000c 488975F0 		movq	%rsi, -16(%rbp)
 4752              		.loc 11 133 0
 4753 0010 488B45F0 		movq	-16(%rbp), %rax
 4754 0014 4889C7   		movq	%rax, %rdi
 4755 0017 E8000000 		call	_ZNSt4pairIiSsED1Ev@PLT
 4755      00
 4756 001c C9       		leave
 4757              		.cfi_def_cfa 7, 8
 4758 001d C3       		ret
 4759              		.cfi_endproc
 4760              	.LFE1020:
 4762              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m,"axG",@progbits,_ZN9__
 4763              		.align 2
 4764              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m
 4766              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m:
 4767              	.LFB1021:
 109:/usr/include/c++/4.9/ext/new_allocator.h ****       { ::operator delete(__p); }
 4768              		.loc 11 109 0
 4769              		.cfi_startproc
 4770 0000 55       		pushq	%rbp
 4771              		.cfi_def_cfa_offset 16
 4772              		.cfi_offset 6, -16
 4773 0001 4889E5   		movq	%rsp, %rbp
 4774              		.cfi_def_cfa_register 6
 4775 0004 4883EC20 		subq	$32, %rsp
 4776 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4777 000c 488975F0 		movq	%rsi, -16(%rbp)
 4778 0010 488955E8 		movq	%rdx, -24(%rbp)
 110:/usr/include/c++/4.9/ext/new_allocator.h **** 
 4779              		.loc 11 110 0
 4780 0014 488B45F0 		movq	-16(%rbp), %rax
 4781 0018 4889C7   		movq	%rax, %rdi
 4782 001b E8000000 		call	_ZdlPv@PLT
 4782      00
 4783 0020 C9       		leave
 4784              		.cfi_def_cfa 7, 8
 4785 0021 C3       		ret
 4786              		.cfi_endproc
 4787              	.LFE1021:
 4789              		.section	.text._ZSt11__addressofISt4pairIiSsEEPT_RS2_,"axG",@progbits,_ZSt11__addressofISt4pairIiS
 4790              		.weak	_ZSt11__addressofISt4pairIiSsEEPT_RS2_
 4792              	_ZSt11__addressofISt4pairIiSsEEPT_RS2_:
 4793              	.LFB1022:
 4794              		.file 14 "/usr/include/c++/4.9/bits/move.h"
   1:/usr/include/c++/4.9/bits/move.h **** // Move, forward and identity for C++0x + swap -*- C++ -*-
   2:/usr/include/c++/4.9/bits/move.h **** 
   3:/usr/include/c++/4.9/bits/move.h **** // Copyright (C) 2007-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/move.h **** //
   5:/usr/include/c++/4.9/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/move.h **** // any later version.
  10:/usr/include/c++/4.9/bits/move.h **** 
  11:/usr/include/c++/4.9/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/move.h **** 
  16:/usr/include/c++/4.9/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/move.h **** 
  20:/usr/include/c++/4.9/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/move.h **** 
  25:/usr/include/c++/4.9/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/4.9/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/4.9/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/4.9/bits/move.h ****  */
  29:/usr/include/c++/4.9/bits/move.h **** 
  30:/usr/include/c++/4.9/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/4.9/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/4.9/bits/move.h **** 
  33:/usr/include/c++/4.9/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/4.9/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/c++/4.9/bits/move.h **** 
  36:/usr/include/c++/4.9/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/c++/4.9/bits/move.h **** {
  38:/usr/include/c++/4.9/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/c++/4.9/bits/move.h **** 
  40:/usr/include/c++/4.9/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/c++/4.9/bits/move.h ****   /**
  42:/usr/include/c++/4.9/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/c++/4.9/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/c++/4.9/bits/move.h ****    */
  45:/usr/include/c++/4.9/bits/move.h ****   template<typename _Tp>
  46:/usr/include/c++/4.9/bits/move.h ****     inline _Tp*
  47:/usr/include/c++/4.9/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 4795              		.loc 14 47 0
 4796              		.cfi_startproc
 4797 0000 55       		pushq	%rbp
 4798              		.cfi_def_cfa_offset 16
 4799              		.cfi_offset 6, -16
 4800 0001 4889E5   		movq	%rsp, %rbp
 4801              		.cfi_def_cfa_register 6
 4802 0004 48897DF8 		movq	%rdi, -8(%rbp)
  48:/usr/include/c++/4.9/bits/move.h ****     {
  49:/usr/include/c++/4.9/bits/move.h ****       return reinterpret_cast<_Tp*>
  50:/usr/include/c++/4.9/bits/move.h **** 	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
 4803              		.loc 14 50 0
 4804 0008 488B45F8 		movq	-8(%rbp), %rax
  51:/usr/include/c++/4.9/bits/move.h ****     }
 4805              		.loc 14 51 0
 4806 000c 5D       		popq	%rbp
 4807              		.cfi_def_cfa 7, 8
 4808 000d C3       		ret
 4809              		.cfi_endproc
 4810              	.LFE1022:
 4812              		.section	.text._ZSt8_DestroyISt4pairIiSsEEvPT_,"axG",@progbits,_ZSt8_DestroyISt4pairIiSsEEvPT_,com
 4813              		.weak	_ZSt8_DestroyISt4pairIiSsEEvPT_
 4815              	_ZSt8_DestroyISt4pairIiSsEEvPT_:
 4816              	.LFB1023:
  92:/usr/include/c++/4.9/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 4817              		.loc 6 92 0
 4818              		.cfi_startproc
 4819 0000 55       		pushq	%rbp
 4820              		.cfi_def_cfa_offset 16
 4821              		.cfi_offset 6, -16
 4822 0001 4889E5   		movq	%rsp, %rbp
 4823              		.cfi_def_cfa_register 6
 4824 0004 4883EC10 		subq	$16, %rsp
 4825 0008 48897DF8 		movq	%rdi, -8(%rbp)
  93:/usr/include/c++/4.9/bits/stl_construct.h **** 
 4826              		.loc 6 93 0
 4827 000c 488B45F8 		movq	-8(%rbp), %rax
 4828 0010 4889C7   		movq	%rax, %rdi
 4829 0013 E8000000 		call	_ZNSt4pairIiSsED1Ev@PLT
 4829      00
 4830 0018 C9       		leave
 4831              		.cfi_def_cfa 7, 8
 4832 0019 C3       		ret
 4833              		.cfi_endproc
 4834              	.LFE1023:
 4836              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC2ERKS2_,"axG",@progbits,_ZNS
 4837              		.align 2
 4838              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC2ERKS2_
 4840              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC2ERKS2_:
 4841              	.LFB1025:
  90:/usr/include/c++/4.9/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 4842              		.loc 5 90 0
 4843              		.cfi_startproc
 4844 0000 55       		pushq	%rbp
 4845              		.cfi_def_cfa_offset 16
 4846              		.cfi_offset 6, -16
 4847 0001 4889E5   		movq	%rsp, %rbp
 4848              		.cfi_def_cfa_register 6
 4849 0004 4883EC10 		subq	$16, %rsp
 4850 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4851 000c 488975F0 		movq	%rsi, -16(%rbp)
 4852              	.LBB49:
  91:/usr/include/c++/4.9/bits/stl_vector.h **** 	{ }
 4853              		.loc 5 91 0
 4854 0010 488B55F0 		movq	-16(%rbp), %rdx
 4855 0014 488B45F8 		movq	-8(%rbp), %rax
 4856 0018 4889D6   		movq	%rdx, %rsi
 4857 001b 4889C7   		movq	%rax, %rdi
 4858 001e E8000000 		call	_ZNSaISt4pairIiSsEEC2ERKS1_@PLT
 4858      00
 4859 0023 488B45F8 		movq	-8(%rbp), %rax
 4860 0027 48C70000 		movq	$0, (%rax)
 4860      000000
 4861 002e 488B45F8 		movq	-8(%rbp), %rax
 4862 0032 48C74008 		movq	$0, 8(%rax)
 4862      00000000 
 4863 003a 488B45F8 		movq	-8(%rbp), %rax
 4864 003e 48C74010 		movq	$0, 16(%rax)
 4864      00000000 
 4865              	.LBE49:
  92:/usr/include/c++/4.9/bits/stl_vector.h **** 
 4866              		.loc 5 92 0
 4867 0046 C9       		leave
 4868              		.cfi_def_cfa 7, 8
 4869 0047 C3       		ret
 4870              		.cfi_endproc
 4871              	.LFE1025:
 4873              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC1ERKS2_
 4874              		.set	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC1ERKS2_,_ZNSt12_Vector_baseISt4pairIiS
 4875              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE17_M_create_storageEm,"axG",@progbits,_ZNSt
 4876              		.align 2
 4877              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE17_M_create_storageEm
 4879              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE17_M_create_storageEm:
 4880              	.LFB1027:
 183:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 4881              		.loc 5 183 0
 4882              		.cfi_startproc
 4883 0000 55       		pushq	%rbp
 4884              		.cfi_def_cfa_offset 16
 4885              		.cfi_offset 6, -16
 4886 0001 4889E5   		movq	%rsp, %rbp
 4887              		.cfi_def_cfa_register 6
 4888 0004 4883EC10 		subq	$16, %rsp
 4889 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4890 000c 488975F0 		movq	%rsi, -16(%rbp)
 185:/usr/include/c++/4.9/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 4891              		.loc 5 185 0
 4892 0010 488B55F0 		movq	-16(%rbp), %rdx
 4893 0014 488B45F8 		movq	-8(%rbp), %rax
 4894 0018 4889D6   		movq	%rdx, %rsi
 4895 001b 4889C7   		movq	%rax, %rdi
 4896 001e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm@PLT
 4896      00
 4897 0023 4889C2   		movq	%rax, %rdx
 4898 0026 488B45F8 		movq	-8(%rbp), %rax
 4899 002a 488910   		movq	%rdx, (%rax)
 186:/usr/include/c++/4.9/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 4900              		.loc 5 186 0
 4901 002d 488B45F8 		movq	-8(%rbp), %rax
 4902 0031 488B10   		movq	(%rax), %rdx
 4903 0034 488B45F8 		movq	-8(%rbp), %rax
 4904 0038 48895008 		movq	%rdx, 8(%rax)
 187:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 4905              		.loc 5 187 0
 4906 003c 488B45F8 		movq	-8(%rbp), %rax
 4907 0040 488B00   		movq	(%rax), %rax
 4908 0043 488B55F0 		movq	-16(%rbp), %rdx
 4909 0047 48C1E204 		salq	$4, %rdx
 4910 004b 4801C2   		addq	%rax, %rdx
 4911 004e 488B45F8 		movq	-8(%rbp), %rax
 4912 0052 48895010 		movq	%rdx, 16(%rax)
 188:/usr/include/c++/4.9/bits/stl_vector.h ****     };
 4913              		.loc 5 188 0
 4914 0056 C9       		leave
 4915              		.cfi_def_cfa 7, 8
 4916 0057 C3       		ret
 4917              		.cfi_endproc
 4918              	.LFE1027:
 4920              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_,"axG"
 4921              		.align 2
 4922              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_
 4924              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_:
 4925              	.LFB1029:
 728:/usr/include/c++/4.9/bits/stl_iterator.h ****       : _M_current(__i) { }
 4926              		.loc 9 728 0
 4927              		.cfi_startproc
 4928 0000 55       		pushq	%rbp
 4929              		.cfi_def_cfa_offset 16
 4930              		.cfi_offset 6, -16
 4931 0001 4889E5   		movq	%rsp, %rbp
 4932              		.cfi_def_cfa_register 6
 4933 0004 48897DF8 		movq	%rdi, -8(%rbp)
 4934 0008 488975F0 		movq	%rsi, -16(%rbp)
 4935              	.LBB50:
 729:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 4936              		.loc 9 729 0
 4937 000c 488B45F0 		movq	-16(%rbp), %rax
 4938 0010 488B10   		movq	(%rax), %rdx
 4939 0013 488B45F8 		movq	-8(%rbp), %rax
 4940 0017 488910   		movq	%rdx, (%rax)
 4941              	.LBE50:
 4942 001a 5D       		popq	%rbp
 4943              		.cfi_def_cfa 7, 8
 4944 001b C3       		ret
 4945              		.cfi_endproc
 4946              	.LFE1029:
 4948              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_
 4949              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_,_ZN9__gnu_cxx17
 4950              		.section	.text._ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_
 4951              		.weak	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEE
 4953              	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEPS3_ET
 4954              	.LFB1031:
 107:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 4955              		.loc 13 107 0
 4956              		.cfi_startproc
 4957 0000 55       		pushq	%rbp
 4958              		.cfi_def_cfa_offset 16
 4959              		.cfi_offset 6, -16
 4960 0001 4889E5   		movq	%rsp, %rbp
 4961              		.cfi_def_cfa_register 6
 4962 0004 4883EC30 		subq	$48, %rsp
 4963 0008 48897DE0 		movq	%rdi, -32(%rbp)
 4964 000c 488975D0 		movq	%rsi, -48(%rbp)
 4965 0010 488955D8 		movq	%rdx, -40(%rbp)
 4966              	.LBB51:
 115:/usr/include/c++/4.9/bits/stl_uninitialized.h **** #else
 4967              		.loc 13 115 0
 4968 0014 C645FF01 		movb	$1, -1(%rbp)
 126:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     }
 4969              		.loc 13 126 0
 4970 0018 488B55D8 		movq	-40(%rbp), %rdx
 4971 001c 488B4DD0 		movq	-48(%rbp), %rcx
 4972 0020 488B45E0 		movq	-32(%rbp), %rax
 4973 0024 4889CE   		movq	%rcx, %rsi
 4974 0027 4889C7   		movq	%rax, %rdi
 4975 002a E8000000 		call	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSs
 4975      00
 4976              	.LBE51:
 127:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 4977              		.loc 13 127 0
 4978 002f C9       		leave
 4979              		.cfi_def_cfa 7, 8
 4980 0030 C3       		ret
 4981              		.cfi_endproc
 4982              	.LFE1031:
 4984              		.section	.text._ZNSt10_Iter_baseIPN8UnitTest18DeferredTestResultELb0EE7_S_baseES2_,"axG",@progbits
 4985              		.weak	_ZNSt10_Iter_baseIPN8UnitTest18DeferredTestResultELb0EE7_S_baseES2_
 4987              	_ZNSt10_Iter_baseIPN8UnitTest18DeferredTestResultELb0EE7_S_baseES2_:
 4988              	.LFB1032:
 4989              		.file 15 "/usr/include/c++/4.9/bits/stl_iterator_base_types.h"
   1:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // Types used in iterator implementation -*- C++ -*-
   2:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
   3:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** //
   5:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // any later version.
  10:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  11:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  16:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  20:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  25:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** /*
  26:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  *
  27:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  *
  30:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  *
  38:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  *
  39:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  *
  42:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  */
  50:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  51:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** /** @file bits/stl_iterator_base_types.h
  52:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  *
  55:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  *  This file contains all of the general iterator-related utility types,
  56:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  *  such as iterator_traits and struct iterator.
  57:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****  */
  58:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  59:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** #ifndef _STL_ITERATOR_BASE_TYPES_H
  60:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** #define _STL_ITERATOR_BASE_TYPES_H 1
  61:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  62:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** #pragma GCC system_header
  63:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  64:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** #include <bits/c++config.h>
  65:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  66:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** #if __cplusplus >= 201103L
  67:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** # include <type_traits>  // For _GLIBCXX_HAS_NESTED_TYPE, is_convertible
  68:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** #endif
  69:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  70:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** namespace std _GLIBCXX_VISIBILITY(default)
  71:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** {
  72:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  73:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  74:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   /**
  75:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  @defgroup iterators Iterators
  76:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  Abstractions for uniform iterating through various underlying types.
  77:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   */
  78:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   //@{ 
  79:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  80:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   /**
  81:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  @defgroup iterator_tags Iterator Tags
  82:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  These are empty types, used to distinguish different iterators.  The
  83:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  distinction is not made by what they contain, but simply by what they
  84:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  are.  Different underlying algorithms can then be used based on the
  85:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  different operations supported by different iterator types.
  86:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   */
  87:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   //@{ 
  88:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   ///  Marking input iterators.
  89:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   struct input_iterator_tag { };
  90:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  91:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   ///  Marking output iterators.
  92:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   struct output_iterator_tag { };
  93:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  94:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   /// Forward iterators support a superset of input iterator operations.
  95:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   struct forward_iterator_tag : public input_iterator_tag { };
  96:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
  97:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   /// Bidirectional iterators support a superset of forward iterator
  98:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   /// operations.
  99:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   struct bidirectional_iterator_tag : public forward_iterator_tag { };
 100:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
 101:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   /// Random-access iterators support a superset of bidirectional
 102:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   /// iterator operations.
 103:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   struct random_access_iterator_tag : public bidirectional_iterator_tag { };
 104:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   //@}
 105:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
 106:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   /**
 107:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  @brief  Common %iterator class.
 108:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *
 109:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  %Iterator classes
 110:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  can inherit from this class to save some work.  The typedefs are then
 111:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  used in specializations and overloading.
 112:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *
 113:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  In particular, there are no default implementations of requirements
 114:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  such as @c operator++ and the like.  (How could there be?)
 115:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   */
 116:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
 117:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****            typename _Pointer = _Tp*, typename _Reference = _Tp&>
 118:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     struct iterator
 119:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     {
 120:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       /// One of the @link iterator_tags tag types@endlink.
 121:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef _Category  iterator_category;
 122:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       /// The type "pointed to" by the iterator.
 123:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef _Tp        value_type;
 124:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       /// Distance between iterators is represented as this type.
 125:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef _Distance  difference_type;
 126:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       /// This type represents a pointer-to-value_type.
 127:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef _Pointer   pointer;
 128:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       /// This type represents a reference-to-value_type.
 129:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef _Reference reference;
 130:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     };
 131:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
 132:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   /**
 133:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  @brief  Traits class for iterators.
 134:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *
 135:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  The general
 136:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  version simply @a forwards the nested typedefs from the Iterator
 137:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  argument.  Specialized versions for pointers and pointers-to-const
 138:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  provide tighter, more correct semantics.
 139:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   */
 140:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** #if __cplusplus >= 201103L
 141:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
 142:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** _GLIBCXX_HAS_NESTED_TYPE(iterator_category)
 143:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
 144:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   template<typename _Iterator,
 145:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 	   bool = __has_iterator_category<_Iterator>::value>
 146:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     struct __iterator_traits { };
 147:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
 148:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 149:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     struct __iterator_traits<_Iterator, true>
 150:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     {
 151:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 152:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 153:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 154:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 155:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 156:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     };
 157:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
 158:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 159:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     struct iterator_traits
 160:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     : public __iterator_traits<_Iterator> { };
 161:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** #else
 162:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 163:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     struct iterator_traits
 164:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     {
 165:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 166:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 167:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 168:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 169:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 170:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     };
 171:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** #endif
 172:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
 173:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   /// Partial specialization for pointer types.
 174:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 175:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     struct iterator_traits<_Tp*>
 176:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     {
 177:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 178:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 179:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 180:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef _Tp*                        pointer;
 181:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef _Tp&                        reference;
 182:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     };
 183:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
 184:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   /// Partial specialization for const pointer types.
 185:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 186:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     struct iterator_traits<const _Tp*>
 187:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     {
 188:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 189:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 190:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 191:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef const _Tp*                  pointer;
 192:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef const _Tp&                  reference;
 193:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     };
 194:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
 195:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   /**
 196:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  This function is not a part of the C++ standard but is syntactic
 197:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****    *  sugar for internal library use only.
 198:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   */
 199:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   template<typename _Iter>
 200:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     inline typename iterator_traits<_Iter>::iterator_category
 201:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     __iterator_category(const _Iter&)
 202:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     { return typename iterator_traits<_Iter>::iterator_category(); }
 203:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
 204:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   //@}
 205:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
 206:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   // If _Iterator has a base returns it otherwise _Iterator is returned
 207:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   // untouched
 208:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   template<typename _Iterator, bool _HasBase>
 209:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     struct _Iter_base
 210:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     {
 211:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef _Iterator iterator_type;
 212:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       static iterator_type _S_base(_Iterator __it)
 4990              		.loc 15 212 0
 4991              		.cfi_startproc
 4992 0000 55       		pushq	%rbp
 4993              		.cfi_def_cfa_offset 16
 4994              		.cfi_offset 6, -16
 4995 0001 4889E5   		movq	%rsp, %rbp
 4996              		.cfi_def_cfa_register 6
 4997 0004 48897DF8 		movq	%rdi, -8(%rbp)
 213:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       { return __it; }
 4998              		.loc 15 213 0
 4999 0008 488B45F8 		movq	-8(%rbp), %rax
 5000 000c 5D       		popq	%rbp
 5001              		.cfi_def_cfa 7, 8
 5002 000d C3       		ret
 5003              		.cfi_endproc
 5004              	.LFE1032:
 5006              		.section	.text._ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_
 5007              		.weak	_ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_typeES4_
 5009              	_ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_typeES4_:
 5010              	.LFB1033:
 278:/usr/include/c++/4.9/bits/stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 5011              		.loc 12 278 0
 5012              		.cfi_startproc
 5013 0000 55       		pushq	%rbp
 5014              		.cfi_def_cfa_offset 16
 5015              		.cfi_offset 6, -16
 5016 0001 4889E5   		movq	%rsp, %rbp
 5017              		.cfi_def_cfa_register 6
 5018 0004 4883EC10 		subq	$16, %rsp
 5019 0008 48897DF8 		movq	%rdi, -8(%rbp)
 279:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5020              		.loc 12 279 0
 5021 000c 488B45F8 		movq	-8(%rbp), %rax
 5022 0010 4889C7   		movq	%rax, %rdi
 5023 0013 E8000000 		call	_ZNSt10_Iter_baseIPN8UnitTest18DeferredTestResultELb0EE7_S_baseES2_@PLT
 5023      00
 5024 0018 C9       		leave
 5025              		.cfi_def_cfa 7, 8
 5026 0019 C3       		ret
 5027              		.cfi_endproc
 5028              	.LFE1033:
 5030              		.section	.text._ZSt22__copy_move_backward_aILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_,"
 5031              		.weak	_ZSt22__copy_move_backward_aILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_
 5033              	_ZSt22__copy_move_backward_aILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_:
 5034              	.LFB1034:
 585:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 5035              		.loc 12 585 0
 5036              		.cfi_startproc
 5037 0000 55       		pushq	%rbp
 5038              		.cfi_def_cfa_offset 16
 5039              		.cfi_offset 6, -16
 5040 0001 4889E5   		movq	%rsp, %rbp
 5041              		.cfi_def_cfa_register 6
 5042 0004 4883EC30 		subq	$48, %rsp
 5043 0008 48897DE8 		movq	%rdi, -24(%rbp)
 5044 000c 488975E0 		movq	%rsi, -32(%rbp)
 5045 0010 488955D8 		movq	%rdx, -40(%rbp)
 5046              	.LBB52:
 593:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5047              		.loc 12 593 0
 5048 0014 C645FF00 		movb	$0, -1(%rbp)
 598:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 5049              		.loc 12 598 0
 5050 0018 488B55D8 		movq	-40(%rbp), %rdx
 5051 001c 488B4DE0 		movq	-32(%rbp), %rcx
 5052 0020 488B45E8 		movq	-24(%rbp), %rax
 5053 0024 4889CE   		movq	%rcx, %rsi
 5054 0027 4889C7   		movq	%rax, %rdi
 5055 002a E8000000 		call	_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPN8UnitTes
 5055      00
 5056              	.LBE52:
 599:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5057              		.loc 12 599 0
 5058 002f C9       		leave
 5059              		.cfi_def_cfa 7, 8
 5060 0030 C3       		ret
 5061              		.cfi_endproc
 5062              	.LFE1034:
 5064              		.section	.text._ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_
 5065              		.weak	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt1
 5067              	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Miter
 5068              	.LFB1035:
 289:/usr/include/c++/4.9/bits/stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 5069              		.loc 12 289 0
 5070              		.cfi_startproc
 5071 0000 55       		pushq	%rbp
 5072              		.cfi_def_cfa_offset 16
 5073              		.cfi_offset 6, -16
 5074 0001 4889E5   		movq	%rsp, %rbp
 5075              		.cfi_def_cfa_register 6
 5076 0004 4883EC10 		subq	$16, %rsp
 5077 0008 48897DF0 		movq	%rdi, -16(%rbp)
 290:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5078              		.loc 12 290 0
 5079 000c 488B45F0 		movq	-16(%rbp), %rax
 5080 0010 4889C7   		movq	%rax, %rdi
 5081 0013 E8000000 		call	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb0EE7_
 5081      00
 5082 0018 C9       		leave
 5083              		.cfi_def_cfa 7, 8
 5084 0019 C3       		ret
 5085              		.cfi_endproc
 5086              	.LFE1035:
 5088              		.section	.text._ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_
 5089              		.weak	_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEE
 5091              	_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IP
 5092              	.LFB1036:
 430:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 5093              		.loc 12 430 0
 5094              		.cfi_startproc
 5095 0000 55       		pushq	%rbp
 5096              		.cfi_def_cfa_offset 16
 5097              		.cfi_offset 6, -16
 5098 0001 4889E5   		movq	%rsp, %rbp
 5099              		.cfi_def_cfa_register 6
 5100 0004 4154     		pushq	%r12
 5101 0006 53       		pushq	%rbx
 5102 0007 4883EC50 		subq	$80, %rsp
 5103              		.cfi_offset 12, -24
 5104              		.cfi_offset 3, -32
 5105 000b 48897DC0 		movq	%rdi, -64(%rbp)
 5106 000f 488975B0 		movq	%rsi, -80(%rbp)
 5107 0013 488955A0 		movq	%rdx, -96(%rbp)
 430:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 5108              		.loc 12 430 0
 5109 0017 64488B04 		movq	%fs:40, %rax
 5109      25280000 
 5109      00
 5110 0020 488945E8 		movq	%rax, -24(%rbp)
 5111 0024 31C0     		xorl	%eax, %eax
 434:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 5112              		.loc 12 434 0
 5113 0026 488B45A0 		movq	-96(%rbp), %rax
 5114 002a 4889C7   		movq	%rax, %rdi
 5115 002d E8000000 		call	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_
 5115      00
 5116 0032 4989C4   		movq	%rax, %r12
 5117 0035 488B45B0 		movq	-80(%rbp), %rax
 5118 0039 4889C7   		movq	%rax, %rdi
 5119 003c E8000000 		call	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11
 5119      00
 5120 0041 4889C3   		movq	%rax, %rbx
 5121 0044 488B45C0 		movq	-64(%rbp), %rax
 5122 0048 4889C7   		movq	%rax, %rdi
 5123 004b E8000000 		call	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11
 5123      00
 5124 0050 4C89E2   		movq	%r12, %rdx
 5125 0053 4889DE   		movq	%rbx, %rsi
 5126 0056 4889C7   		movq	%rax, %rdi
 5127 0059 E8000000 		call	_ZSt13__copy_move_aILb0EPKSt4pairIiSsEPS1_ET1_T0_S6_S5_@PLT
 5127      00
 5128 005e 488945E0 		movq	%rax, -32(%rbp)
 5129 0062 488D55E0 		leaq	-32(%rbp), %rdx
 5130 0066 488D45D0 		leaq	-48(%rbp), %rax
 5131 006a 4889D6   		movq	%rdx, %rsi
 5132 006d 4889C7   		movq	%rax, %rdi
 5133 0070 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS3_@PLT
 5133      00
 5134 0075 488B45D0 		movq	-48(%rbp), %rax
 435:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5135              		.loc 12 435 0
 5136 0079 488B4DE8 		movq	-24(%rbp), %rcx
 5137 007d 6448330C 		xorq	%fs:40, %rcx
 5137      25280000 
 5137      00
 5138 0086 7405     		je	.L273
 5139 0088 E8000000 		call	__stack_chk_fail@PLT
 5139      00
 5140              	.L273:
 5141 008d 4883C450 		addq	$80, %rsp
 5142 0091 5B       		popq	%rbx
 5143 0092 415C     		popq	%r12
 5144 0094 5D       		popq	%rbp
 5145              		.cfi_def_cfa 7, 8
 5146 0095 C3       		ret
 5147              		.cfi_endproc
 5148              	.LFE1036:
 5150              		.section	.text._ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEEv
 5151              		.weak	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEEvT_S9_
 5153              	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEEvT_S9_:
 5154              	.LFB1037:
 122:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 5155              		.loc 6 122 0
 5156              		.cfi_startproc
 5157 0000 55       		pushq	%rbp
 5158              		.cfi_def_cfa_offset 16
 5159              		.cfi_offset 6, -16
 5160 0001 4889E5   		movq	%rsp, %rbp
 5161              		.cfi_def_cfa_register 6
 5162 0004 4883EC20 		subq	$32, %rsp
 5163 0008 48897DF0 		movq	%rdi, -16(%rbp)
 5164 000c 488975E0 		movq	%rsi, -32(%rbp)
 5165              	.LBB53:
 126:/usr/include/c++/4.9/bits/stl_construct.h **** 	__destroy(__first, __last);
 5166              		.loc 6 126 0
 5167 0010 488B55E0 		movq	-32(%rbp), %rdx
 5168 0014 488B45F0 		movq	-16(%rbp), %rax
 5169 0018 4889D6   		movq	%rdx, %rsi
 5170 001b 4889C7   		movq	%rax, %rdi
 5171 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS5_
 5171      00
 5172              	.LBE53:
 128:/usr/include/c++/4.9/bits/stl_construct.h **** 
 5173              		.loc 6 128 0
 5174 0023 C9       		leave
 5175              		.cfi_def_cfa 7, 8
 5176 0024 C3       		ret
 5177              		.cfi_endproc
 5178              	.LFE1037:
 5180              		.section	.text._ZSt14__copy_move_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_,"axG",@progbits,_ZSt14__copy
 5181              		.weak	_ZSt14__copy_move_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
 5183              	_ZSt14__copy_move_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:
 5184              	.LFB1038:
 430:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 5185              		.loc 12 430 0
 5186              		.cfi_startproc
 5187 0000 55       		pushq	%rbp
 5188              		.cfi_def_cfa_offset 16
 5189              		.cfi_offset 6, -16
 5190 0001 4889E5   		movq	%rsp, %rbp
 5191              		.cfi_def_cfa_register 6
 5192 0004 4154     		pushq	%r12
 5193 0006 53       		pushq	%rbx
 5194 0007 4883EC20 		subq	$32, %rsp
 5195              		.cfi_offset 12, -24
 5196              		.cfi_offset 3, -32
 5197 000b 48897DE8 		movq	%rdi, -24(%rbp)
 5198 000f 488975E0 		movq	%rsi, -32(%rbp)
 5199 0013 488955D8 		movq	%rdx, -40(%rbp)
 434:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 5200              		.loc 12 434 0
 5201 0017 488B45D8 		movq	-40(%rbp), %rax
 5202 001b 4889C7   		movq	%rax, %rdi
 5203 001e E8000000 		call	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_@PLT
 5203      00
 5204 0023 4989C4   		movq	%rax, %r12
 5205 0026 488B45E0 		movq	-32(%rbp), %rax
 5206 002a 4889C7   		movq	%rax, %rdi
 5207 002d E8000000 		call	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_@PLT
 5207      00
 5208 0032 4889C3   		movq	%rax, %rbx
 5209 0035 488B45E8 		movq	-24(%rbp), %rax
 5210 0039 4889C7   		movq	%rax, %rdi
 5211 003c E8000000 		call	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_@PLT
 5211      00
 5212 0041 4C89E2   		movq	%r12, %rdx
 5213 0044 4889DE   		movq	%rbx, %rsi
 5214 0047 4889C7   		movq	%rax, %rdi
 5215 004a E8000000 		call	_ZSt13__copy_move_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_@PLT
 5215      00
 435:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5216              		.loc 12 435 0
 5217 004f 4883C420 		addq	$32, %rsp
 5218 0053 5B       		popq	%rbx
 5219 0054 415C     		popq	%r12
 5220 0056 5D       		popq	%rbp
 5221              		.cfi_def_cfa 7, 8
 5222 0057 C3       		ret
 5223              		.cfi_endproc
 5224              	.LFE1038:
 5226              		.section	.text._ZSt18uninitialized_copyIPSt4pairIiSsES2_ET0_T_S4_S3_,"axG",@progbits,_ZSt18uniniti
 5227              		.weak	_ZSt18uninitialized_copyIPSt4pairIiSsES2_ET0_T_S4_S3_
 5229              	_ZSt18uninitialized_copyIPSt4pairIiSsES2_ET0_T_S4_S3_:
 5230              	.LFB1039:
 107:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 5231              		.loc 13 107 0
 5232              		.cfi_startproc
 5233 0000 55       		pushq	%rbp
 5234              		.cfi_def_cfa_offset 16
 5235              		.cfi_offset 6, -16
 5236 0001 4889E5   		movq	%rsp, %rbp
 5237              		.cfi_def_cfa_register 6
 5238 0004 4883EC30 		subq	$48, %rsp
 5239 0008 48897DE8 		movq	%rdi, -24(%rbp)
 5240 000c 488975E0 		movq	%rsi, -32(%rbp)
 5241 0010 488955D8 		movq	%rdx, -40(%rbp)
 5242              	.LBB54:
 115:/usr/include/c++/4.9/bits/stl_uninitialized.h **** #else
 5243              		.loc 13 115 0
 5244 0014 C645FF01 		movb	$1, -1(%rbp)
 126:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     }
 5245              		.loc 13 126 0
 5246 0018 488B55D8 		movq	-40(%rbp), %rdx
 5247 001c 488B4DE0 		movq	-32(%rbp), %rcx
 5248 0020 488B45E8 		movq	-24(%rbp), %rax
 5249 0024 4889CE   		movq	%rcx, %rsi
 5250 0027 4889C7   		movq	%rax, %rdi
 5251 002a E8000000 		call	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiSsES4_EET0_T_S6_S5_@PLT
 5251      00
 5252              	.LBE54:
 127:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 5253              		.loc 13 127 0
 5254 002f C9       		leave
 5255              		.cfi_def_cfa 7, 8
 5256 0030 C3       		ret
 5257              		.cfi_endproc
 5258              	.LFE1039:
 5260              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_,"
 5261              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_
 5263              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_:
 5264              	.LFB1040:
 194:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return __a.max_size(); }
 5265              		.loc 7 194 0
 5266              		.cfi_startproc
 5267 0000 55       		pushq	%rbp
 5268              		.cfi_def_cfa_offset 16
 5269              		.cfi_offset 6, -16
 5270 0001 4889E5   		movq	%rsp, %rbp
 5271              		.cfi_def_cfa_register 6
 5272 0004 4883EC10 		subq	$16, %rsp
 5273 0008 48897DF8 		movq	%rdi, -8(%rbp)
 195:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 5274              		.loc 7 195 0
 5275 000c 488B45F8 		movq	-8(%rbp), %rax
 5276 0010 4889C7   		movq	%rax, %rdi
 5277 0013 E8000000 		call	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv@PLT
 5277      00
 5278 0018 C9       		leave
 5279              		.cfi_def_cfa 7, 8
 5280 0019 C3       		ret
 5281              		.cfi_endproc
 5282              	.LFE1040:
 5284              		.section	.text._ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 5285              		.align 2
 5286              		.weak	_ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 5288              	_ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:
 5289              	.LFB1041:
 117:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 5290              		.loc 5 117 0
 5291              		.cfi_startproc
 5292 0000 55       		pushq	%rbp
 5293              		.cfi_def_cfa_offset 16
 5294              		.cfi_offset 6, -16
 5295 0001 4889E5   		movq	%rsp, %rbp
 5296              		.cfi_def_cfa_register 6
 5297 0004 48897DF8 		movq	%rdi, -8(%rbp)
 118:/usr/include/c++/4.9/bits/stl_vector.h **** 
 5298              		.loc 5 118 0
 5299 0008 488B45F8 		movq	-8(%rbp), %rax
 5300 000c 5D       		popq	%rbp
 5301              		.cfi_def_cfa 7, 8
 5302 000d C3       		ret
 5303              		.cfi_endproc
 5304              	.LFE1041:
 5306              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv,"axG",@
 5307              		.align 2
 5308              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv
 5310              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv:
 5311              	.LFB1042:
  99:/usr/include/c++/4.9/ext/new_allocator.h ****       { 
 5312              		.loc 11 99 0
 5313              		.cfi_startproc
 5314 0000 55       		pushq	%rbp
 5315              		.cfi_def_cfa_offset 16
 5316              		.cfi_offset 6, -16
 5317 0001 4889E5   		movq	%rsp, %rbp
 5318              		.cfi_def_cfa_register 6
 5319 0004 4883EC20 		subq	$32, %rsp
 5320 0008 48897DF8 		movq	%rdi, -8(%rbp)
 5321 000c 488975F0 		movq	%rsi, -16(%rbp)
 5322 0010 488955E8 		movq	%rdx, -24(%rbp)
 101:/usr/include/c++/4.9/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 5323              		.loc 11 101 0
 5324 0014 488B45F8 		movq	-8(%rbp), %rax
 5325 0018 4889C7   		movq	%rax, %rdi
 5326 001b E8000000 		call	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv@PLT
 5326      00
 5327 0020 483B45F0 		cmpq	-16(%rbp), %rax
 5328 0024 0F92C0   		setb	%al
 5329 0027 84C0     		testb	%al, %al
 5330 0029 7405     		je	.L284
 102:/usr/include/c++/4.9/ext/new_allocator.h **** 
 5331              		.loc 11 102 0
 5332 002b E8000000 		call	_ZSt17__throw_bad_allocv@PLT
 5332      00
 5333              	.L284:
 104:/usr/include/c++/4.9/ext/new_allocator.h ****       }
 5334              		.loc 11 104 0
 5335 0030 488B45F0 		movq	-16(%rbp), %rax
 5336 0034 48C1E003 		salq	$3, %rax
 5337 0038 488D14C5 		leaq	0(,%rax,8), %rdx
 5337      00000000 
 5338 0040 4829C2   		subq	%rax, %rdx
 5339 0043 4889D0   		movq	%rdx, %rax
 5340 0046 4889C7   		movq	%rax, %rdi
 5341 0049 E8000000 		call	_Znwm@PLT
 5341      00
 105:/usr/include/c++/4.9/ext/new_allocator.h **** 
 5342              		.loc 11 105 0
 5343 004e C9       		leave
 5344              		.cfi_def_cfa 7, 8
 5345 004f C3       		ret
 5346              		.cfi_endproc
 5347              	.LFE1042:
 5349              		.section	.text._ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_,"axG",@pro
 5350              		.weak	_ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_
 5352              	_ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_:
 5353              	.LFB1043:
 107:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 5354              		.loc 13 107 0
 5355              		.cfi_startproc
 5356 0000 55       		pushq	%rbp
 5357              		.cfi_def_cfa_offset 16
 5358              		.cfi_offset 6, -16
 5359 0001 4889E5   		movq	%rsp, %rbp
 5360              		.cfi_def_cfa_register 6
 5361 0004 4883EC30 		subq	$48, %rsp
 5362 0008 48897DE8 		movq	%rdi, -24(%rbp)
 5363 000c 488975E0 		movq	%rsi, -32(%rbp)
 5364 0010 488955D8 		movq	%rdx, -40(%rbp)
 5365              	.LBB55:
 115:/usr/include/c++/4.9/bits/stl_uninitialized.h **** #else
 5366              		.loc 13 115 0
 5367 0014 C645FF01 		movb	$1, -1(%rbp)
 126:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     }
 5368              		.loc 13 126 0
 5369 0018 488B55D8 		movq	-40(%rbp), %rdx
 5370 001c 488B4DE0 		movq	-32(%rbp), %rcx
 5371 0020 488B45E8 		movq	-24(%rbp), %rax
 5372 0024 4889CE   		movq	%rcx, %rsi
 5373 0027 4889C7   		movq	%rax, %rdi
 5374 002a E8000000 		call	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6
 5374      00
 5375              	.LBE55:
 127:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 
 5376              		.loc 13 127 0
 5377 002f C9       		leave
 5378              		.cfi_def_cfa 7, 8
 5379 0030 C3       		ret
 5380              		.cfi_endproc
 5381              	.LFE1043:
 5383              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_,"axG",
 5384              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
 5386              	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:
 5387              	.LFB1044:
 100:/usr/include/c++/4.9/bits/stl_construct.h **** 	{
 5388              		.loc 6 100 0
 5389              		.cfi_startproc
 5390 0000 55       		pushq	%rbp
 5391              		.cfi_def_cfa_offset 16
 5392              		.cfi_offset 6, -16
 5393 0001 4889E5   		movq	%rsp, %rbp
 5394              		.cfi_def_cfa_register 6
 5395 0004 4883EC10 		subq	$16, %rsp
 5396 0008 48897DF8 		movq	%rdi, -8(%rbp)
 5397 000c 488975F0 		movq	%rsi, -16(%rbp)
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 5398              		.loc 6 102 0
 5399 0010 EB19     		jmp	.L289
 5400              	.L290:
 103:/usr/include/c++/4.9/bits/stl_construct.h **** 	}
 5401              		.loc 6 103 0 discriminator 2
 5402 0012 488B45F8 		movq	-8(%rbp), %rax
 5403 0016 4889C7   		movq	%rax, %rdi
 5404 0019 E8000000 		call	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_@PLT
 5404      00
 5405 001e 4889C7   		movq	%rax, %rdi
 5406 0021 E8000000 		call	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_@PLT
 5406      00
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 5407              		.loc 6 102 0 discriminator 2
 5408 0026 488345F8 		addq	$56, -8(%rbp)
 5408      38
 5409              	.L289:
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 5410              		.loc 6 102 0 is_stmt 0 discriminator 1
 5411 002b 488B45F8 		movq	-8(%rbp), %rax
 5412 002f 483B45F0 		cmpq	-16(%rbp), %rax
 5413 0033 75DD     		jne	.L290
 104:/usr/include/c++/4.9/bits/stl_construct.h ****     };
 5414              		.loc 6 104 0 is_stmt 1
 5415 0035 C9       		leave
 5416              		.cfi_def_cfa 7, 8
 5417 0036 C3       		ret
 5418              		.cfi_endproc
 5419              	.LFE1044:
 5421              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m,"ax
 5422              		.align 2
 5423              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
 5425              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:
 5426              	.LFB1045:
 109:/usr/include/c++/4.9/ext/new_allocator.h ****       { ::operator delete(__p); }
 5427              		.loc 11 109 0
 5428              		.cfi_startproc
 5429 0000 55       		pushq	%rbp
 5430              		.cfi_def_cfa_offset 16
 5431              		.cfi_offset 6, -16
 5432 0001 4889E5   		movq	%rsp, %rbp
 5433              		.cfi_def_cfa_register 6
 5434 0004 4883EC20 		subq	$32, %rsp
 5435 0008 48897DF8 		movq	%rdi, -8(%rbp)
 5436 000c 488975F0 		movq	%rsi, -16(%rbp)
 5437 0010 488955E8 		movq	%rdx, -24(%rbp)
 110:/usr/include/c++/4.9/ext/new_allocator.h **** 
 5438              		.loc 11 110 0
 5439 0014 488B45F0 		movq	-16(%rbp), %rax
 5440 0018 4889C7   		movq	%rax, %rdi
 5441 001b E8000000 		call	_ZdlPv@PLT
 5441      00
 5442 0020 C9       		leave
 5443              		.cfi_def_cfa 7, 8
 5444 0021 C3       		ret
 5445              		.cfi_endproc
 5446              	.LFE1045:
 5448              		.section	.text._ZNSt10_Iter_baseIPSt4pairIiSsELb0EE7_S_baseES2_,"axG",@progbits,_ZNSt10_Iter_baseI
 5449              		.weak	_ZNSt10_Iter_baseIPSt4pairIiSsELb0EE7_S_baseES2_
 5451              	_ZNSt10_Iter_baseIPSt4pairIiSsELb0EE7_S_baseES2_:
 5452              	.LFB1046:
 212:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       { return __it; }
 5453              		.loc 15 212 0
 5454              		.cfi_startproc
 5455 0000 55       		pushq	%rbp
 5456              		.cfi_def_cfa_offset 16
 5457              		.cfi_offset 6, -16
 5458 0001 4889E5   		movq	%rsp, %rbp
 5459              		.cfi_def_cfa_register 6
 5460 0004 48897DF8 		movq	%rdi, -8(%rbp)
 5461              		.loc 15 213 0
 5462 0008 488B45F8 		movq	-8(%rbp), %rax
 5463 000c 5D       		popq	%rbp
 5464              		.cfi_def_cfa 7, 8
 5465 000d C3       		ret
 5466              		.cfi_endproc
 5467              	.LFE1046:
 5469              		.section	.text._ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_,"axG",@pro
 5470              		.weak	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_
 5472              	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_:
 5473              	.LFB1047:
 278:/usr/include/c++/4.9/bits/stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 5474              		.loc 12 278 0
 5475              		.cfi_startproc
 5476 0000 55       		pushq	%rbp
 5477              		.cfi_def_cfa_offset 16
 5478              		.cfi_offset 6, -16
 5479 0001 4889E5   		movq	%rsp, %rbp
 5480              		.cfi_def_cfa_register 6
 5481 0004 4883EC10 		subq	$16, %rsp
 5482 0008 48897DF8 		movq	%rdi, -8(%rbp)
 279:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5483              		.loc 12 279 0
 5484 000c 488B45F8 		movq	-8(%rbp), %rax
 5485 0010 4889C7   		movq	%rax, %rdi
 5486 0013 E8000000 		call	_ZNSt10_Iter_baseIPSt4pairIiSsELb0EE7_S_baseES2_@PLT
 5486      00
 5487 0018 C9       		leave
 5488              		.cfi_def_cfa 7, 8
 5489 0019 C3       		ret
 5490              		.cfi_endproc
 5491              	.LFE1047:
 5493              		.section	.text._ZSt22__copy_move_backward_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_,"axG",@progbits,_ZSt
 5494              		.weak	_ZSt22__copy_move_backward_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
 5496              	_ZSt22__copy_move_backward_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:
 5497              	.LFB1048:
 585:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 5498              		.loc 12 585 0
 5499              		.cfi_startproc
 5500 0000 55       		pushq	%rbp
 5501              		.cfi_def_cfa_offset 16
 5502              		.cfi_offset 6, -16
 5503 0001 4889E5   		movq	%rsp, %rbp
 5504              		.cfi_def_cfa_register 6
 5505 0004 4883EC30 		subq	$48, %rsp
 5506 0008 48897DE8 		movq	%rdi, -24(%rbp)
 5507 000c 488975E0 		movq	%rsi, -32(%rbp)
 5508 0010 488955D8 		movq	%rdx, -40(%rbp)
 5509              	.LBB56:
 593:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5510              		.loc 12 593 0
 5511 0014 C645FF00 		movb	$0, -1(%rbp)
 598:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 5512              		.loc 12 598 0
 5513 0018 488B55D8 		movq	-40(%rbp), %rdx
 5514 001c 488B4DE0 		movq	-32(%rbp), %rcx
 5515 0020 488B45E8 		movq	-24(%rbp), %rax
 5516 0024 4889CE   		movq	%rcx, %rsi
 5517 0027 4889C7   		movq	%rax, %rdi
 5518 002a E8000000 		call	_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt4pairIi
 5518      00
 5519              	.LBE56:
 599:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5520              		.loc 12 599 0
 5521 002f C9       		leave
 5522              		.cfi_def_cfa 7, 8
 5523 0030 C3       		ret
 5524              		.cfi_endproc
 5525              	.LFE1048:
 5527              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8max_sizeERKS3_,"axG",@progbits,_ZN9
 5528              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8max_sizeERKS3_
 5530              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8max_sizeERKS3_:
 5531              	.LFB1049:
 194:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return __a.max_size(); }
 5532              		.loc 7 194 0
 5533              		.cfi_startproc
 5534 0000 55       		pushq	%rbp
 5535              		.cfi_def_cfa_offset 16
 5536              		.cfi_offset 6, -16
 5537 0001 4889E5   		movq	%rsp, %rbp
 5538              		.cfi_def_cfa_register 6
 5539 0004 4883EC10 		subq	$16, %rsp
 5540 0008 48897DF8 		movq	%rdi, -8(%rbp)
 195:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 5541              		.loc 7 195 0
 5542 000c 488B45F8 		movq	-8(%rbp), %rax
 5543 0010 4889C7   		movq	%rax, %rdi
 5544 0013 E8000000 		call	_ZNK9__gnu_cxx13new_allocatorISt4pairIiSsEE8max_sizeEv@PLT
 5544      00
 5545 0018 C9       		leave
 5546              		.cfi_def_cfa 7, 8
 5547 0019 C3       		ret
 5548              		.cfi_endproc
 5549              	.LFE1049:
 5551              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_
 5552              		.align 2
 5553              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE8allocateEmPKv
 5555              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE8allocateEmPKv:
 5556              	.LFB1050:
  99:/usr/include/c++/4.9/ext/new_allocator.h ****       { 
 5557              		.loc 11 99 0
 5558              		.cfi_startproc
 5559 0000 55       		pushq	%rbp
 5560              		.cfi_def_cfa_offset 16
 5561              		.cfi_offset 6, -16
 5562 0001 4889E5   		movq	%rsp, %rbp
 5563              		.cfi_def_cfa_register 6
 5564 0004 4883EC20 		subq	$32, %rsp
 5565 0008 48897DF8 		movq	%rdi, -8(%rbp)
 5566 000c 488975F0 		movq	%rsi, -16(%rbp)
 5567 0010 488955E8 		movq	%rdx, -24(%rbp)
 101:/usr/include/c++/4.9/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 5568              		.loc 11 101 0
 5569 0014 488B45F8 		movq	-8(%rbp), %rax
 5570 0018 4889C7   		movq	%rax, %rdi
 5571 001b E8000000 		call	_ZNK9__gnu_cxx13new_allocatorISt4pairIiSsEE8max_sizeEv@PLT
 5571      00
 5572 0020 483B45F0 		cmpq	-16(%rbp), %rax
 5573 0024 0F92C0   		setb	%al
 5574 0027 84C0     		testb	%al, %al
 5575 0029 7405     		je	.L301
 102:/usr/include/c++/4.9/ext/new_allocator.h **** 
 5576              		.loc 11 102 0
 5577 002b E8000000 		call	_ZSt17__throw_bad_allocv@PLT
 5577      00
 5578              	.L301:
 104:/usr/include/c++/4.9/ext/new_allocator.h ****       }
 5579              		.loc 11 104 0
 5580 0030 488B45F0 		movq	-16(%rbp), %rax
 5581 0034 48C1E004 		salq	$4, %rax
 5582 0038 4889C7   		movq	%rax, %rdi
 5583 003b E8000000 		call	_Znwm@PLT
 5583      00
 105:/usr/include/c++/4.9/ext/new_allocator.h **** 
 5584              		.loc 11 105 0
 5585 0040 C9       		leave
 5586              		.cfi_def_cfa 7, 8
 5587 0041 C3       		ret
 5588              		.cfi_endproc
 5589              	.LFE1050:
 5591              		.section	.text._ZNSaISt4pairIiSsEEC2ERKS1_,"axG",@progbits,_ZNSaISt4pairIiSsEEC5ERKS1_,comdat
 5592              		.align 2
 5593              		.weak	_ZNSaISt4pairIiSsEEC2ERKS1_
 5595              	_ZNSaISt4pairIiSsEEC2ERKS1_:
 5596              	.LFB1052:
 115:/usr/include/c++/4.9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 5597              		.loc 10 115 0
 5598              		.cfi_startproc
 5599 0000 55       		pushq	%rbp
 5600              		.cfi_def_cfa_offset 16
 5601              		.cfi_offset 6, -16
 5602 0001 4889E5   		movq	%rsp, %rbp
 5603              		.cfi_def_cfa_register 6
 5604 0004 4883EC10 		subq	$16, %rsp
 5605 0008 48897DF8 		movq	%rdi, -8(%rbp)
 5606 000c 488975F0 		movq	%rsi, -16(%rbp)
 5607              	.LBB57:
 116:/usr/include/c++/4.9/bits/allocator.h **** 
 5608              		.loc 10 116 0
 5609 0010 488B55F0 		movq	-16(%rbp), %rdx
 5610 0014 488B45F8 		movq	-8(%rbp), %rax
 5611 0018 4889D6   		movq	%rdx, %rsi
 5612 001b 4889C7   		movq	%rax, %rdi
 5613 001e E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC2ERKS3_@PLT
 5613      00
 5614              	.LBE57:
 5615 0023 C9       		leave
 5616              		.cfi_def_cfa 7, 8
 5617 0024 C3       		ret
 5618              		.cfi_endproc
 5619              	.LFE1052:
 5621              		.weak	_ZNSaISt4pairIiSsEEC1ERKS1_
 5622              		.set	_ZNSaISt4pairIiSsEEC1ERKS1_,_ZNSaISt4pairIiSsEEC2ERKS1_
 5623              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKS
 5624              		.weak	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiS
 5626              	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6ve
 5627              	.LFB1054:
  68:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 5628              		.loc 13 68 0
 5629              		.cfi_startproc
 5630              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5631              		.cfi_lsda 0x1b,.LLSDA1054
 5632 0000 55       		pushq	%rbp
 5633              		.cfi_def_cfa_offset 16
 5634              		.cfi_offset 6, -16
 5635 0001 4889E5   		movq	%rsp, %rbp
 5636              		.cfi_def_cfa_register 6
 5637 0004 53       		pushq	%rbx
 5638 0005 4883EC38 		subq	$56, %rsp
 5639              		.cfi_offset 3, -24
 5640 0009 48897DD0 		movq	%rdi, -48(%rbp)
 5641 000d 488975C0 		movq	%rsi, -64(%rbp)
 5642 0011 488955C8 		movq	%rdx, -56(%rbp)
 5643              	.LBB58:
  71:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  __try
 5644              		.loc 13 71 0
 5645 0015 488B45C8 		movq	-56(%rbp), %rax
 5646 0019 488945E8 		movq	%rax, -24(%rbp)
  74:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5647              		.loc 13 74 0
 5648 001d EB37     		jmp	.L305
 5649              	.L306:
  75:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      return __cur;
 5650              		.loc 13 75 0
 5651 001f 488D45D0 		leaq	-48(%rbp), %rax
 5652 0023 4889C7   		movq	%rax, %rdi
 5653              	.LEHB57:
 5654 0026 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv@PLT
 5654      00
 5655 002b 4889C3   		movq	%rax, %rbx
 5656 002e 488B45E8 		movq	-24(%rbp), %rax
 5657 0032 4889C7   		movq	%rax, %rdi
 5658 0035 E8000000 		call	_ZSt11__addressofISt4pairIiSsEEPT_RS2_@PLT
 5658      00
 5659 003a 4889DE   		movq	%rbx, %rsi
 5660 003d 4889C7   		movq	%rax, %rdi
 5661 0040 E8000000 		call	_ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_@PLT
 5661      00
  74:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5662              		.loc 13 74 0
 5663 0045 488D45D0 		leaq	-48(%rbp), %rax
 5664 0049 4889C7   		movq	%rax, %rdi
 5665 004c E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv@PLT
 5665      00
  74:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5666              		.loc 13 74 0 is_stmt 0 discriminator 1
 5667 0051 488345E8 		addq	$16, -24(%rbp)
 5667      10
 5668              	.L305:
  74:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5669              		.loc 13 74 0 discriminator 2
 5670 0056 488D55C0 		leaq	-64(%rbp), %rdx
 5671 005a 488D45D0 		leaq	-48(%rbp), %rax
 5672 005e 4889D6   		movq	%rdx, %rsi
 5673 0061 4889C7   		movq	%rax, %rdi
 5674 0064 E8000000 		call	_ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_@PLT
 5674      00
 5675              	.LEHE57:
 5676 0069 84C0     		testb	%al, %al
 5677 006b 75B2     		jne	.L306
  76:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    }
 5678              		.loc 13 76 0 is_stmt 1
 5679 006d 488B45E8 		movq	-24(%rbp), %rax
 5680 0071 EB33     		jmp	.L312
 5681              	.L311:
 5682 0073 4889C3   		movq	%rax, %rbx
  78:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    {
 5683              		.loc 13 78 0
 5684 0076 E8000000 		call	__cxa_end_catch@PLT
 5684      00
 5685 007b 4889D8   		movq	%rbx, %rax
 5686 007e 4889C7   		movq	%rax, %rdi
 5687              	.LEHB58:
 5688 0081 E8000000 		call	_Unwind_Resume@PLT
 5688      00
 5689              	.LEHE58:
 5690              	.L310:
 5691 0086 4889C7   		movq	%rax, %rdi
 5692 0089 E8000000 		call	__cxa_begin_catch@PLT
 5692      00
  80:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 5693              		.loc 13 80 0
 5694 008e 488B55E8 		movq	-24(%rbp), %rdx
 5695 0092 488B45C8 		movq	-56(%rbp), %rax
 5696 0096 4889D6   		movq	%rdx, %rsi
 5697 0099 4889C7   		movq	%rax, %rdi
 5698              	.LEHB59:
 5699 009c E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_@PLT
 5699      00
  81:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    }
 5700              		.loc 13 81 0
 5701 00a1 E8000000 		call	__cxa_rethrow@PLT
 5701      00
 5702              	.LEHE59:
 5703              	.L312:
 5704              	.LBE58:
  83:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     };
 5705              		.loc 13 83 0
 5706 00a6 4883C438 		addq	$56, %rsp
 5707 00aa 5B       		popq	%rbx
 5708 00ab 5D       		popq	%rbp
 5709              		.cfi_def_cfa 7, 8
 5710 00ac C3       		ret
 5711              		.cfi_endproc
 5712              	.LFE1054:
 5713              		.section	.gcc_except_table
 5714              		.align 4
 5715              	.LLSDA1054:
 5716 0144 FF       		.byte	0xff
 5717 0145 9B       		.byte	0x9b
 5718 0146 19       		.uleb128 .LLSDATT1054-.LLSDATTD1054
 5719              	.LLSDATTD1054:
 5720 0147 01       		.byte	0x1
 5721 0148 0F       		.uleb128 .LLSDACSE1054-.LLSDACSB1054
 5722              	.LLSDACSB1054:
 5723 0149 26       		.uleb128 .LEHB57-.LFB1054
 5724 014a 43       		.uleb128 .LEHE57-.LEHB57
 5725 014b 8601     		.uleb128 .L310-.LFB1054
 5726 014d 01       		.uleb128 0x1
 5727 014e 8101     		.uleb128 .LEHB58-.LFB1054
 5728 0150 05       		.uleb128 .LEHE58-.LEHB58
 5729 0151 00       		.uleb128 0
 5730 0152 00       		.uleb128 0
 5731 0153 9C01     		.uleb128 .LEHB59-.LFB1054
 5732 0155 0A       		.uleb128 .LEHE59-.LEHB59
 5733 0156 73       		.uleb128 .L311-.LFB1054
 5734 0157 00       		.uleb128 0
 5735              	.LLSDACSE1054:
 5736 0158 01       		.byte	0x1
 5737 0159 00       		.byte	0
 5738 015a 0000     		.align 4
 5739 015c 00000000 		.long	0
 5740              	
 5741              	.LLSDATT1054:
 5742              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKS
 5744              		.section	.text._ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bI
 5745              		.weak	_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPN8UnitTe
 5747              	_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPN8UnitTest18Def
 5748              	.LFB1055:
 539:/usr/include/c++/4.9/bits/stl_algobase.h ****         {
 5749              		.loc 12 539 0
 5750              		.cfi_startproc
 5751 0000 55       		pushq	%rbp
 5752              		.cfi_def_cfa_offset 16
 5753              		.cfi_offset 6, -16
 5754 0001 4889E5   		movq	%rsp, %rbp
 5755              		.cfi_def_cfa_register 6
 5756 0004 4883EC30 		subq	$48, %rsp
 5757 0008 48897DE8 		movq	%rdi, -24(%rbp)
 5758 000c 488975E0 		movq	%rsi, -32(%rbp)
 5759 0010 488955D8 		movq	%rdx, -40(%rbp)
 5760              	.LBB59:
 542:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    *--__result = *--__last;
 5761              		.loc 12 542 0
 5762 0014 488B55E0 		movq	-32(%rbp), %rdx
 5763 0018 488B45E8 		movq	-24(%rbp), %rax
 5764 001c 4829C2   		subq	%rax, %rdx
 5765 001f 4889D0   		movq	%rdx, %rax
 5766 0022 48C1F803 		sarq	$3, %rax
 5767 0026 4889C2   		movq	%rax, %rdx
 5768 0029 48B8B76D 		movabsq	$7905747460161236407, %rax
 5768      DBB66DDB 
 5768      B66D
 5769 0033 480FAFC2 		imulq	%rdx, %rax
 5770 0037 488945F8 		movq	%rax, -8(%rbp)
 5771 003b EB22     		jmp	.L314
 5772              	.L315:
 543:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  return __result;
 5773              		.loc 12 543 0 discriminator 3
 5774 003d 48836DE0 		subq	$56, -32(%rbp)
 5774      38
 5775 0042 48836DD8 		subq	$56, -40(%rbp)
 5775      38
 5776 0047 488B55E0 		movq	-32(%rbp), %rdx
 5777 004b 488B45D8 		movq	-40(%rbp), %rax
 5778 004f 4889D6   		movq	%rdx, %rsi
 5779 0052 4889C7   		movq	%rax, %rdi
 5780 0055 E8000000 		call	_ZN8UnitTest18DeferredTestResultaSERKS0_@PLT
 5780      00
 542:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    *--__result = *--__last;
 5781              		.loc 12 542 0 discriminator 3
 5782 005a 48836DF8 		subq	$1, -8(%rbp)
 5782      01
 5783              	.L314:
 542:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    *--__result = *--__last;
 5784              		.loc 12 542 0 is_stmt 0 discriminator 1
 5785 005f 48837DF8 		cmpq	$0, -8(%rbp)
 5785      00
 5786 0064 7FD7     		jg	.L315
 544:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
 5787              		.loc 12 544 0 is_stmt 1
 5788 0066 488B45D8 		movq	-40(%rbp), %rax
 5789              	.LBE59:
 545:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 5790              		.loc 12 545 0
 5791 006a C9       		leave
 5792              		.cfi_def_cfa 7, 8
 5793 006b C3       		ret
 5794              		.cfi_endproc
 5795              	.LFE1055:
 5797              		.section	.text._ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_E
 5798              		.weak	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb0EE7
 5800              	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb0EE7_S_base
 5801              	.LFB1056:
 212:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       { return __it; }
 5802              		.loc 15 212 0
 5803              		.cfi_startproc
 5804 0000 55       		pushq	%rbp
 5805              		.cfi_def_cfa_offset 16
 5806              		.cfi_offset 6, -16
 5807 0001 4889E5   		movq	%rsp, %rbp
 5808              		.cfi_def_cfa_register 6
 5809 0004 48897DF0 		movq	%rdi, -16(%rbp)
 5810              		.loc 15 213 0
 5811 0008 488B45F0 		movq	-16(%rbp), %rax
 5812 000c 5D       		popq	%rbp
 5813              		.cfi_def_cfa 7, 8
 5814 000d C3       		ret
 5815              		.cfi_endproc
 5816              	.LFE1056:
 5818              		.section	.text._ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_
 5819              		.weak	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt1
 5821              	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Niter
 5822              	.LFB1057:
 278:/usr/include/c++/4.9/bits/stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 5823              		.loc 12 278 0
 5824              		.cfi_startproc
 5825 0000 55       		pushq	%rbp
 5826              		.cfi_def_cfa_offset 16
 5827              		.cfi_offset 6, -16
 5828 0001 4889E5   		movq	%rsp, %rbp
 5829              		.cfi_def_cfa_register 6
 5830 0004 4883EC10 		subq	$16, %rsp
 5831 0008 48897DF0 		movq	%rdi, -16(%rbp)
 279:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5832              		.loc 12 279 0
 5833 000c 488B45F0 		movq	-16(%rbp), %rax
 5834 0010 4889C7   		movq	%rax, %rdi
 5835 0013 E8000000 		call	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_
 5835      00
 5836 0018 C9       		leave
 5837              		.cfi_def_cfa 7, 8
 5838 0019 C3       		ret
 5839              		.cfi_endproc
 5840              	.LFE1057:
 5842              		.section	.text._ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_E
 5843              		.weak	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11
 5845              	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Niter_
 5846              	.LFB1058:
 278:/usr/include/c++/4.9/bits/stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 5847              		.loc 12 278 0
 5848              		.cfi_startproc
 5849 0000 55       		pushq	%rbp
 5850              		.cfi_def_cfa_offset 16
 5851              		.cfi_offset 6, -16
 5852 0001 4889E5   		movq	%rsp, %rbp
 5853              		.cfi_def_cfa_register 6
 5854 0004 4883EC10 		subq	$16, %rsp
 5855 0008 48897DF0 		movq	%rdi, -16(%rbp)
 279:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5856              		.loc 12 279 0
 5857 000c 488B45F0 		movq	-16(%rbp), %rax
 5858 0010 4889C7   		movq	%rax, %rdi
 5859 0013 E8000000 		call	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_S
 5859      00
 5860 0018 C9       		leave
 5861              		.cfi_def_cfa 7, 8
 5862 0019 C3       		ret
 5863              		.cfi_endproc
 5864              	.LFE1058:
 5866              		.section	.text._ZSt13__copy_move_aILb0EPKSt4pairIiSsEPS1_ET1_T0_S6_S5_,"axG",@progbits,_ZSt13__cop
 5867              		.weak	_ZSt13__copy_move_aILb0EPKSt4pairIiSsEPS1_ET1_T0_S6_S5_
 5869              	_ZSt13__copy_move_aILb0EPKSt4pairIiSsEPS1_ET1_T0_S6_S5_:
 5870              	.LFB1059:
 385:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 5871              		.loc 12 385 0
 5872              		.cfi_startproc
 5873 0000 55       		pushq	%rbp
 5874              		.cfi_def_cfa_offset 16
 5875              		.cfi_offset 6, -16
 5876 0001 4889E5   		movq	%rsp, %rbp
 5877              		.cfi_def_cfa_register 6
 5878 0004 4883EC30 		subq	$48, %rsp
 5879 0008 48897DE8 		movq	%rdi, -24(%rbp)
 5880 000c 488975E0 		movq	%rsi, -32(%rbp)
 5881 0010 488955D8 		movq	%rdx, -40(%rbp)
 5882              	.LBB60:
 393:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5883              		.loc 12 393 0
 5884 0014 C645FF00 		movb	$0, -1(%rbp)
 396:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 5885              		.loc 12 396 0
 5886 0018 488B55D8 		movq	-40(%rbp), %rdx
 5887 001c 488B4DE0 		movq	-32(%rbp), %rcx
 5888 0020 488B45E8 		movq	-24(%rbp), %rax
 5889 0024 4889CE   		movq	%rcx, %rsi
 5890 0027 4889C7   		movq	%rax, %rdi
 5891 002a E8000000 		call	_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIiSsEPS4_EET0_T_
 5891      00
 5892              	.LBE60:
 397:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5893              		.loc 12 397 0
 5894 002f C9       		leave
 5895              		.cfi_def_cfa 7, 8
 5896 0030 C3       		ret
 5897              		.cfi_endproc
 5898              	.LFE1059:
 5900              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6
 5901              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS5
 5903              	_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS5_SaIS5_
 5904              	.LFB1060:
 100:/usr/include/c++/4.9/bits/stl_construct.h **** 	{
 5905              		.loc 6 100 0
 5906              		.cfi_startproc
 5907 0000 55       		pushq	%rbp
 5908              		.cfi_def_cfa_offset 16
 5909              		.cfi_offset 6, -16
 5910 0001 4889E5   		movq	%rsp, %rbp
 5911              		.cfi_def_cfa_register 6
 5912 0004 4883EC20 		subq	$32, %rsp
 5913 0008 48897DF0 		movq	%rdi, -16(%rbp)
 5914 000c 488975E0 		movq	%rsi, -32(%rbp)
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 5915              		.loc 6 102 0
 5916 0010 EB28     		jmp	.L326
 5917              	.L327:
 103:/usr/include/c++/4.9/bits/stl_construct.h **** 	}
 5918              		.loc 6 103 0 discriminator 2
 5919 0012 488D45F0 		leaq	-16(%rbp), %rax
 5920 0016 4889C7   		movq	%rax, %rdi
 5921 0019 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv@PLT
 5921      00
 5922 001e 4889C7   		movq	%rax, %rdi
 5923 0021 E8000000 		call	_ZSt11__addressofISt4pairIiSsEEPT_RS2_@PLT
 5923      00
 5924 0026 4889C7   		movq	%rax, %rdi
 5925 0029 E8000000 		call	_ZSt8_DestroyISt4pairIiSsEEvPT_@PLT
 5925      00
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 5926              		.loc 6 102 0 discriminator 2
 5927 002e 488D45F0 		leaq	-16(%rbp), %rax
 5928 0032 4889C7   		movq	%rax, %rdi
 5929 0035 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv@PLT
 5929      00
 5930              	.L326:
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 5931              		.loc 6 102 0 is_stmt 0 discriminator 1
 5932 003a 488D55E0 		leaq	-32(%rbp), %rdx
 5933 003e 488D45F0 		leaq	-16(%rbp), %rax
 5934 0042 4889D6   		movq	%rdx, %rsi
 5935 0045 4889C7   		movq	%rax, %rdi
 5936 0048 E8000000 		call	_ZN9__gnu_cxxneIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_@PLT
 5936      00
 5937 004d 84C0     		testb	%al, %al
 5938 004f 75C1     		jne	.L327
 104:/usr/include/c++/4.9/bits/stl_construct.h ****     };
 5939              		.loc 6 104 0 is_stmt 1
 5940 0051 C9       		leave
 5941              		.cfi_def_cfa 7, 8
 5942 0052 C3       		ret
 5943              		.cfi_endproc
 5944              	.LFE1060:
 5946              		.section	.text._ZSt13__copy_move_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_,"axG",@progbits,_ZSt13__copy_
 5947              		.weak	_ZSt13__copy_move_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
 5949              	_ZSt13__copy_move_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:
 5950              	.LFB1061:
 385:/usr/include/c++/4.9/bits/stl_algobase.h ****     {
 5951              		.loc 12 385 0
 5952              		.cfi_startproc
 5953 0000 55       		pushq	%rbp
 5954              		.cfi_def_cfa_offset 16
 5955              		.cfi_offset 6, -16
 5956 0001 4889E5   		movq	%rsp, %rbp
 5957              		.cfi_def_cfa_register 6
 5958 0004 4883EC30 		subq	$48, %rsp
 5959 0008 48897DE8 		movq	%rdi, -24(%rbp)
 5960 000c 488975E0 		movq	%rsi, -32(%rbp)
 5961 0010 488955D8 		movq	%rdx, -40(%rbp)
 5962              	.LBB61:
 393:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5963              		.loc 12 393 0
 5964 0014 C645FF00 		movb	$0, -1(%rbp)
 396:/usr/include/c++/4.9/bits/stl_algobase.h ****     }
 5965              		.loc 12 396 0
 5966 0018 488B55D8 		movq	-40(%rbp), %rdx
 5967 001c 488B4DE0 		movq	-32(%rbp), %rcx
 5968 0020 488B45E8 		movq	-24(%rbp), %rax
 5969 0024 4889CE   		movq	%rcx, %rsi
 5970 0027 4889C7   		movq	%rax, %rdi
 5971 002a E8000000 		call	_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIiSsES5_EET0_T_S7
 5971      00
 5972              	.LBE61:
 397:/usr/include/c++/4.9/bits/stl_algobase.h **** 
 5973              		.loc 12 397 0
 5974 002f C9       		leave
 5975              		.cfi_def_cfa 7, 8
 5976 0030 C3       		ret
 5977              		.cfi_endproc
 5978              	.LFE1061:
 5980              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiSsES4_EET0_T_S6_S5_,"axG
 5981              		.weak	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiSsES4_EET0_T_S6_S5_
 5983              	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiSsES4_EET0_T_S6_S5_:
 5984              	.LFB1062:
  68:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 5985              		.loc 13 68 0
 5986              		.cfi_startproc
 5987              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5988              		.cfi_lsda 0x1b,.LLSDA1062
 5989 0000 55       		pushq	%rbp
 5990              		.cfi_def_cfa_offset 16
 5991              		.cfi_offset 6, -16
 5992 0001 4889E5   		movq	%rsp, %rbp
 5993              		.cfi_def_cfa_register 6
 5994 0004 53       		pushq	%rbx
 5995 0005 4883EC38 		subq	$56, %rsp
 5996              		.cfi_offset 3, -24
 5997 0009 48897DD8 		movq	%rdi, -40(%rbp)
 5998 000d 488975D0 		movq	%rsi, -48(%rbp)
 5999 0011 488955C8 		movq	%rdx, -56(%rbp)
 6000              	.LBB62:
  71:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  __try
 6001              		.loc 13 71 0
 6002 0015 488B45C8 		movq	-56(%rbp), %rax
 6003 0019 488945E8 		movq	%rax, -24(%rbp)
  74:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 6004              		.loc 13 74 0
 6005 001d EB28     		jmp	.L331
 6006              	.L332:
  75:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      return __cur;
 6007              		.loc 13 75 0
 6008 001f 488B45E8 		movq	-24(%rbp), %rax
 6009 0023 4889C7   		movq	%rax, %rdi
 6010 0026 E8000000 		call	_ZSt11__addressofISt4pairIiSsEEPT_RS2_@PLT
 6010      00
 6011 002b 4889C2   		movq	%rax, %rdx
 6012 002e 488B45D8 		movq	-40(%rbp), %rax
 6013 0032 4889C6   		movq	%rax, %rsi
 6014 0035 4889D7   		movq	%rdx, %rdi
 6015              	.LEHB60:
 6016 0038 E8000000 		call	_ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_@PLT
 6016      00
 6017              	.LEHE60:
  74:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 6018              		.loc 13 74 0
 6019 003d 488345D8 		addq	$16, -40(%rbp)
 6019      10
 6020 0042 488345E8 		addq	$16, -24(%rbp)
 6020      10
 6021              	.L331:
  74:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 6022              		.loc 13 74 0 is_stmt 0 discriminator 1
 6023 0047 488B45D8 		movq	-40(%rbp), %rax
 6024 004b 483B45D0 		cmpq	-48(%rbp), %rax
 6025 004f 75CE     		jne	.L332
  76:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    }
 6026              		.loc 13 76 0 is_stmt 1
 6027 0051 488B45E8 		movq	-24(%rbp), %rax
 6028 0055 EB33     		jmp	.L338
 6029              	.L337:
 6030 0057 4889C3   		movq	%rax, %rbx
  78:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    {
 6031              		.loc 13 78 0
 6032 005a E8000000 		call	__cxa_end_catch@PLT
 6032      00
 6033 005f 4889D8   		movq	%rbx, %rax
 6034 0062 4889C7   		movq	%rax, %rdi
 6035              	.LEHB61:
 6036 0065 E8000000 		call	_Unwind_Resume@PLT
 6036      00
 6037              	.LEHE61:
 6038              	.L336:
 6039 006a 4889C7   		movq	%rax, %rdi
 6040 006d E8000000 		call	__cxa_begin_catch@PLT
 6040      00
  80:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 6041              		.loc 13 80 0
 6042 0072 488B55E8 		movq	-24(%rbp), %rdx
 6043 0076 488B45C8 		movq	-56(%rbp), %rax
 6044 007a 4889D6   		movq	%rdx, %rsi
 6045 007d 4889C7   		movq	%rax, %rdi
 6046              	.LEHB62:
 6047 0080 E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_@PLT
 6047      00
  81:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    }
 6048              		.loc 13 81 0
 6049 0085 E8000000 		call	__cxa_rethrow@PLT
 6049      00
 6050              	.LEHE62:
 6051              	.L338:
 6052              	.LBE62:
  83:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     };
 6053              		.loc 13 83 0
 6054 008a 4883C438 		addq	$56, %rsp
 6055 008e 5B       		popq	%rbx
 6056 008f 5D       		popq	%rbp
 6057              		.cfi_def_cfa 7, 8
 6058 0090 C3       		ret
 6059              		.cfi_endproc
 6060              	.LFE1062:
 6061              		.section	.gcc_except_table
 6062              		.align 4
 6063              	.LLSDA1062:
 6064 0160 FF       		.byte	0xff
 6065 0161 9B       		.byte	0x9b
 6066 0162 15       		.uleb128 .LLSDATT1062-.LLSDATTD1062
 6067              	.LLSDATTD1062:
 6068 0163 01       		.byte	0x1
 6069 0164 0D       		.uleb128 .LLSDACSE1062-.LLSDACSB1062
 6070              	.LLSDACSB1062:
 6071 0165 38       		.uleb128 .LEHB60-.LFB1062
 6072 0166 05       		.uleb128 .LEHE60-.LEHB60
 6073 0167 6A       		.uleb128 .L336-.LFB1062
 6074 0168 01       		.uleb128 0x1
 6075 0169 65       		.uleb128 .LEHB61-.LFB1062
 6076 016a 05       		.uleb128 .LEHE61-.LEHB61
 6077 016b 00       		.uleb128 0
 6078 016c 00       		.uleb128 0
 6079 016d 8001     		.uleb128 .LEHB62-.LFB1062
 6080 016f 0A       		.uleb128 .LEHE62-.LEHB62
 6081 0170 57       		.uleb128 .L337-.LFB1062
 6082 0171 00       		.uleb128 0
 6083              	.LLSDACSE1062:
 6084 0172 01       		.byte	0x1
 6085 0173 00       		.byte	0
 6086              		.align 4
 6087 0174 00000000 		.long	0
 6088              	
 6089              	.LLSDATT1062:
 6090              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiSsES4_EET0_T_S6_S5_,"axG
 6092              		.section	.text._ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv,"axG",@pr
 6093              		.align 2
 6094              		.weak	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv
 6096              	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv:
 6097              	.LFB1063:
 113:/usr/include/c++/4.9/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 6098              		.loc 11 113 0
 6099              		.cfi_startproc
 6100 0000 55       		pushq	%rbp
 6101              		.cfi_def_cfa_offset 16
 6102              		.cfi_offset 6, -16
 6103 0001 4889E5   		movq	%rsp, %rbp
 6104              		.cfi_def_cfa_register 6
 6105 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/4.9/ext/new_allocator.h **** 
 6106              		.loc 11 114 0
 6107 0008 48B89224 		movabsq	$329406144173384850, %rax
 6107      49922449 
 6107      9204
 6108 0012 5D       		popq	%rbp
 6109              		.cfi_def_cfa 7, 8
 6110 0013 C3       		ret
 6111              		.cfi_endproc
 6112              	.LFE1063:
 6114              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4
 6115              		.weak	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S
 6117              	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6_S5_:
 6118              	.LFB1064:
  68:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 6119              		.loc 13 68 0
 6120              		.cfi_startproc
 6121              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6122              		.cfi_lsda 0x1b,.LLSDA1064
 6123 0000 55       		pushq	%rbp
 6124              		.cfi_def_cfa_offset 16
 6125              		.cfi_offset 6, -16
 6126 0001 4889E5   		movq	%rsp, %rbp
 6127              		.cfi_def_cfa_register 6
 6128 0004 53       		pushq	%rbx
 6129 0005 4883EC38 		subq	$56, %rsp
 6130              		.cfi_offset 3, -24
 6131 0009 48897DD8 		movq	%rdi, -40(%rbp)
 6132 000d 488975D0 		movq	%rsi, -48(%rbp)
 6133 0011 488955C8 		movq	%rdx, -56(%rbp)
 6134              	.LBB63:
  71:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	  __try
 6135              		.loc 13 71 0
 6136 0015 488B45C8 		movq	-56(%rbp), %rax
 6137 0019 488945E8 		movq	%rax, -24(%rbp)
  74:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 6138              		.loc 13 74 0
 6139 001d EB28     		jmp	.L342
 6140              	.L343:
  75:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      return __cur;
 6141              		.loc 13 75 0
 6142 001f 488B45E8 		movq	-24(%rbp), %rax
 6143 0023 4889C7   		movq	%rax, %rdi
 6144              	.LEHB63:
 6145 0026 E8000000 		call	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_@PLT
 6145      00
 6146 002b 4889C2   		movq	%rax, %rdx
 6147 002e 488B45D8 		movq	-40(%rbp), %rax
 6148 0032 4889C6   		movq	%rax, %rsi
 6149 0035 4889D7   		movq	%rdx, %rdi
 6150 0038 E8000000 		call	_ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_@PLT
 6150      00
 6151              	.LEHE63:
  74:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 6152              		.loc 13 74 0
 6153 003d 488345D8 		addq	$56, -40(%rbp)
 6153      38
 6154 0042 488345E8 		addq	$56, -24(%rbp)
 6154      38
 6155              	.L342:
  74:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 6156              		.loc 13 74 0 is_stmt 0 discriminator 1
 6157 0047 488B45D8 		movq	-40(%rbp), %rax
 6158 004b 483B45D0 		cmpq	-48(%rbp), %rax
 6159 004f 75CE     		jne	.L343
  76:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    }
 6160              		.loc 13 76 0 is_stmt 1
 6161 0051 488B45E8 		movq	-24(%rbp), %rax
 6162 0055 EB33     		jmp	.L349
 6163              	.L348:
 6164 0057 4889C3   		movq	%rax, %rbx
  78:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    {
 6165              		.loc 13 78 0
 6166 005a E8000000 		call	__cxa_end_catch@PLT
 6166      00
 6167 005f 4889D8   		movq	%rbx, %rax
 6168 0062 4889C7   		movq	%rax, %rdi
 6169              	.LEHB64:
 6170 0065 E8000000 		call	_Unwind_Resume@PLT
 6170      00
 6171              	.LEHE64:
 6172              	.L347:
 6173 006a 4889C7   		movq	%rax, %rdi
 6174 006d E8000000 		call	__cxa_begin_catch@PLT
 6174      00
  80:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 6175              		.loc 13 80 0
 6176 0072 488B55E8 		movq	-24(%rbp), %rdx
 6177 0076 488B45C8 		movq	-56(%rbp), %rax
 6178 007a 4889D6   		movq	%rdx, %rsi
 6179 007d 4889C7   		movq	%rax, %rdi
 6180              	.LEHB65:
 6181 0080 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_@PLT
 6181      00
  81:/usr/include/c++/4.9/bits/stl_uninitialized.h **** 	    }
 6182              		.loc 13 81 0
 6183 0085 E8000000 		call	__cxa_rethrow@PLT
 6183      00
 6184              	.LEHE65:
 6185              	.L349:
 6186              	.LBE63:
  83:/usr/include/c++/4.9/bits/stl_uninitialized.h ****     };
 6187              		.loc 13 83 0
 6188 008a 4883C438 		addq	$56, %rsp
 6189 008e 5B       		popq	%rbx
 6190 008f 5D       		popq	%rbp
 6191              		.cfi_def_cfa 7, 8
 6192 0090 C3       		ret
 6193              		.cfi_endproc
 6194              	.LFE1064:
 6195              		.section	.gcc_except_table
 6196              		.align 4
 6197              	.LLSDA1064:
 6198 0178 FF       		.byte	0xff
 6199 0179 9B       		.byte	0x9b
 6200 017a 15       		.uleb128 .LLSDATT1064-.LLSDATTD1064
 6201              	.LLSDATTD1064:
 6202 017b 01       		.byte	0x1
 6203 017c 0D       		.uleb128 .LLSDACSE1064-.LLSDACSB1064
 6204              	.LLSDACSB1064:
 6205 017d 26       		.uleb128 .LEHB63-.LFB1064
 6206 017e 17       		.uleb128 .LEHE63-.LEHB63
 6207 017f 6A       		.uleb128 .L347-.LFB1064
 6208 0180 01       		.uleb128 0x1
 6209 0181 65       		.uleb128 .LEHB64-.LFB1064
 6210 0182 05       		.uleb128 .LEHE64-.LEHB64
 6211 0183 00       		.uleb128 0
 6212 0184 00       		.uleb128 0
 6213 0185 8001     		.uleb128 .LEHB65-.LFB1064
 6214 0187 0A       		.uleb128 .LEHE65-.LEHB65
 6215 0188 57       		.uleb128 .L348-.LFB1064
 6216 0189 00       		.uleb128 0
 6217              	.LLSDACSE1064:
 6218 018a 01       		.byte	0x1
 6219 018b 00       		.byte	0
 6220              		.align 4
 6221 018c 00000000 		.long	0
 6222              	
 6223              	.LLSDATT1064:
 6224              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4
 6226              		.section	.text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_,"axG",@progbits,_ZSt11__a
 6227              		.weak	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
 6229              	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:
 6230              	.LFB1065:
  47:/usr/include/c++/4.9/bits/move.h ****     {
 6231              		.loc 14 47 0
 6232              		.cfi_startproc
 6233 0000 55       		pushq	%rbp
 6234              		.cfi_def_cfa_offset 16
 6235              		.cfi_offset 6, -16
 6236 0001 4889E5   		movq	%rsp, %rbp
 6237              		.cfi_def_cfa_register 6
 6238 0004 48897DF8 		movq	%rdi, -8(%rbp)
  50:/usr/include/c++/4.9/bits/move.h ****     }
 6239              		.loc 14 50 0
 6240 0008 488B45F8 		movq	-8(%rbp), %rax
 6241              		.loc 14 51 0
 6242 000c 5D       		popq	%rbp
 6243              		.cfi_def_cfa 7, 8
 6244 000d C3       		ret
 6245              		.cfi_endproc
 6246              	.LFE1065:
 6248              		.section	.text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_,"axG",@progbits,_ZSt8_DestroyIN8
 6249              		.weak	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
 6251              	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:
 6252              	.LFB1066:
  92:/usr/include/c++/4.9/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 6253              		.loc 6 92 0
 6254              		.cfi_startproc
 6255 0000 55       		pushq	%rbp
 6256              		.cfi_def_cfa_offset 16
 6257              		.cfi_offset 6, -16
 6258 0001 4889E5   		movq	%rsp, %rbp
 6259              		.cfi_def_cfa_register 6
 6260 0004 4883EC10 		subq	$16, %rsp
 6261 0008 48897DF8 		movq	%rdi, -8(%rbp)
  93:/usr/include/c++/4.9/bits/stl_construct.h **** 
 6262              		.loc 6 93 0
 6263 000c 488B45F8 		movq	-8(%rbp), %rax
 6264 0010 4889C7   		movq	%rax, %rdi
 6265 0013 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 6265      00
 6266 0018 C9       		leave
 6267              		.cfi_def_cfa 7, 8
 6268 0019 C3       		ret
 6269              		.cfi_endproc
 6270              	.LFE1066:
 6272              		.section	.text._ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bI
 6273              		.weak	_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt4pairI
 6275              	_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt4pairIiSsES5_
 6276              	.LFB1067:
 539:/usr/include/c++/4.9/bits/stl_algobase.h ****         {
 6277              		.loc 12 539 0
 6278              		.cfi_startproc
 6279 0000 55       		pushq	%rbp
 6280              		.cfi_def_cfa_offset 16
 6281              		.cfi_offset 6, -16
 6282 0001 4889E5   		movq	%rsp, %rbp
 6283              		.cfi_def_cfa_register 6
 6284 0004 4883EC30 		subq	$48, %rsp
 6285 0008 48897DE8 		movq	%rdi, -24(%rbp)
 6286 000c 488975E0 		movq	%rsi, -32(%rbp)
 6287 0010 488955D8 		movq	%rdx, -40(%rbp)
 6288              	.LBB64:
 542:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    *--__result = *--__last;
 6289              		.loc 12 542 0
 6290 0014 488B55E0 		movq	-32(%rbp), %rdx
 6291 0018 488B45E8 		movq	-24(%rbp), %rax
 6292 001c 4829C2   		subq	%rax, %rdx
 6293 001f 4889D0   		movq	%rdx, %rax
 6294 0022 48C1F804 		sarq	$4, %rax
 6295 0026 488945F8 		movq	%rax, -8(%rbp)
 6296 002a EB22     		jmp	.L354
 6297              	.L355:
 543:/usr/include/c++/4.9/bits/stl_algobase.h **** 	  return __result;
 6298              		.loc 12 543 0 discriminator 3
 6299 002c 48836DE0 		subq	$16, -32(%rbp)
 6299      10
 6300 0031 48836DD8 		subq	$16, -40(%rbp)
 6300      10
 6301 0036 488B55E0 		movq	-32(%rbp), %rdx
 6302 003a 488B45D8 		movq	-40(%rbp), %rax
 6303 003e 4889D6   		movq	%rdx, %rsi
 6304 0041 4889C7   		movq	%rax, %rdi
 6305 0044 E8000000 		call	_ZNSt4pairIiSsEaSERKS0_@PLT
 6305      00
 542:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    *--__result = *--__last;
 6306              		.loc 12 542 0 discriminator 3
 6307 0049 48836DF8 		subq	$1, -8(%rbp)
 6307      01
 6308              	.L354:
 542:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    *--__result = *--__last;
 6309              		.loc 12 542 0 is_stmt 0 discriminator 1
 6310 004e 48837DF8 		cmpq	$0, -8(%rbp)
 6310      00
 6311 0053 7FD7     		jg	.L355
 544:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
 6312              		.loc 12 544 0 is_stmt 1
 6313 0055 488B45D8 		movq	-40(%rbp), %rax
 6314              	.LBE64:
 545:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 6315              		.loc 12 545 0
 6316 0059 C9       		leave
 6317              		.cfi_def_cfa 7, 8
 6318 005a C3       		ret
 6319              		.cfi_endproc
 6320              	.LFE1067:
 6322              		.section	.text._ZNK9__gnu_cxx13new_allocatorISt4pairIiSsEE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_c
 6323              		.align 2
 6324              		.weak	_ZNK9__gnu_cxx13new_allocatorISt4pairIiSsEE8max_sizeEv
 6326              	_ZNK9__gnu_cxx13new_allocatorISt4pairIiSsEE8max_sizeEv:
 6327              	.LFB1068:
 113:/usr/include/c++/4.9/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 6328              		.loc 11 113 0
 6329              		.cfi_startproc
 6330 0000 55       		pushq	%rbp
 6331              		.cfi_def_cfa_offset 16
 6332              		.cfi_offset 6, -16
 6333 0001 4889E5   		movq	%rsp, %rbp
 6334              		.cfi_def_cfa_register 6
 6335 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/4.9/ext/new_allocator.h **** 
 6336              		.loc 11 114 0
 6337 0008 48B8FFFF 		movabsq	$1152921504606846975, %rax
 6337      FFFFFFFF 
 6337      FF0F
 6338 0012 5D       		popq	%rbp
 6339              		.cfi_def_cfa 7, 8
 6340 0013 C3       		ret
 6341              		.cfi_endproc
 6342              	.LFE1068:
 6344              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC2ERKS3_,"axG",@progbits,_ZN9__gnu_cxx13n
 6345              		.align 2
 6346              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC2ERKS3_
 6348              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC2ERKS3_:
 6349              	.LFB1070:
  81:/usr/include/c++/4.9/ext/new_allocator.h **** 
 6350              		.loc 11 81 0
 6351              		.cfi_startproc
 6352 0000 55       		pushq	%rbp
 6353              		.cfi_def_cfa_offset 16
 6354              		.cfi_offset 6, -16
 6355 0001 4889E5   		movq	%rsp, %rbp
 6356              		.cfi_def_cfa_register 6
 6357 0004 48897DF8 		movq	%rdi, -8(%rbp)
 6358 0008 488975F0 		movq	%rsi, -16(%rbp)
  81:/usr/include/c++/4.9/ext/new_allocator.h **** 
 6359              		.loc 11 81 0
 6360 000c 5D       		popq	%rbp
 6361              		.cfi_def_cfa 7, 8
 6362 000d C3       		ret
 6363              		.cfi_endproc
 6364              	.LFE1070:
 6366              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC1ERKS3_
 6367              		.set	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC1ERKS3_,_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE
 6368              		.section	.text._ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0
 6369              		.weak	_ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
 6371              	_ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:
 6372              	.LFB1072:
 829:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 6373              		.loc 9 829 0
 6374              		.cfi_startproc
 6375 0000 55       		pushq	%rbp
 6376              		.cfi_def_cfa_offset 16
 6377              		.cfi_offset 6, -16
 6378 0001 4889E5   		movq	%rsp, %rbp
 6379              		.cfi_def_cfa_register 6
 6380 0004 53       		pushq	%rbx
 6381 0005 4883EC18 		subq	$24, %rsp
 6382              		.cfi_offset 3, -24
 6383 0009 48897DE8 		movq	%rdi, -24(%rbp)
 6384 000d 488975E0 		movq	%rsi, -32(%rbp)
 832:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 6385              		.loc 9 832 0
 6386 0011 488B45E8 		movq	-24(%rbp), %rax
 6387 0015 4889C7   		movq	%rax, %rdi
 6388 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 6388      00
 6389 001d 488B18   		movq	(%rax), %rbx
 6390 0020 488B45E0 		movq	-32(%rbp), %rax
 6391 0024 4889C7   		movq	%rax, %rdi
 6392 0027 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 6392      00
 6393 002c 488B00   		movq	(%rax), %rax
 6394 002f 4839C3   		cmpq	%rax, %rbx
 6395 0032 0F95C0   		setne	%al
 6396 0035 4883C418 		addq	$24, %rsp
 6397 0039 5B       		popq	%rbx
 6398 003a 5D       		popq	%rbp
 6399              		.cfi_def_cfa 7, 8
 6400 003b C3       		ret
 6401              		.cfi_endproc
 6402              	.LFE1072:
 6404              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv,"axG",@pr
 6405              		.align 2
 6406              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv
 6408              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv:
 6409              	.LFB1073:
 749:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 6410              		.loc 9 749 0
 6411              		.cfi_startproc
 6412 0000 55       		pushq	%rbp
 6413              		.cfi_def_cfa_offset 16
 6414              		.cfi_offset 6, -16
 6415 0001 4889E5   		movq	%rsp, %rbp
 6416              		.cfi_def_cfa_register 6
 6417 0004 48897DF8 		movq	%rdi, -8(%rbp)
 751:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 6418              		.loc 9 751 0
 6419 0008 488B45F8 		movq	-8(%rbp), %rax
 6420 000c 488B00   		movq	(%rax), %rax
 6421 000f 488D5010 		leaq	16(%rax), %rdx
 6422 0013 488B45F8 		movq	-8(%rbp), %rax
 6423 0017 488910   		movq	%rdx, (%rax)
 752:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 6424              		.loc 9 752 0
 6425 001a 488B45F8 		movq	-8(%rbp), %rax
 753:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 6426              		.loc 9 753 0
 6427 001e 5D       		popq	%rbp
 6428              		.cfi_def_cfa 7, 8
 6429 001f C3       		ret
 6430              		.cfi_endproc
 6431              	.LFE1073:
 6433              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv,"axG",@p
 6434              		.align 2
 6435              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv
 6437              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv:
 6438              	.LFB1074:
 741:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *_M_current; }
 6439              		.loc 9 741 0
 6440              		.cfi_startproc
 6441 0000 55       		pushq	%rbp
 6442              		.cfi_def_cfa_offset 16
 6443              		.cfi_offset 6, -16
 6444 0001 4889E5   		movq	%rsp, %rbp
 6445              		.cfi_def_cfa_register 6
 6446 0004 48897DF8 		movq	%rdi, -8(%rbp)
 742:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 6447              		.loc 9 742 0
 6448 0008 488B45F8 		movq	-8(%rbp), %rax
 6449 000c 488B00   		movq	(%rax), %rax
 6450 000f 5D       		popq	%rbp
 6451              		.cfi_def_cfa 7, 8
 6452 0010 C3       		ret
 6453              		.cfi_endproc
 6454              	.LFE1074:
 6456              		.section	.text._ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_,"axG",@progbits,_ZSt10_ConstructISt4pair
 6457              		.weak	_ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_
 6459              	_ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_:
 6460              	.LFB1075:
  79:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 6461              		.loc 6 79 0
 6462              		.cfi_startproc
 6463              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6464              		.cfi_lsda 0x1b,.LLSDA1075
 6465 0000 55       		pushq	%rbp
 6466              		.cfi_def_cfa_offset 16
 6467              		.cfi_offset 6, -16
 6468 0001 4889E5   		movq	%rsp, %rbp
 6469              		.cfi_def_cfa_register 6
 6470 0004 4155     		pushq	%r13
 6471 0006 4154     		pushq	%r12
 6472 0008 53       		pushq	%rbx
 6473 0009 4883EC18 		subq	$24, %rsp
 6474              		.cfi_offset 13, -24
 6475              		.cfi_offset 12, -32
 6476              		.cfi_offset 3, -40
 6477 000d 48897DD8 		movq	%rdi, -40(%rbp)
 6478 0011 488975D0 		movq	%rsi, -48(%rbp)
  83:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 6479              		.loc 6 83 0
 6480 0015 4C8B65D8 		movq	-40(%rbp), %r12
 6481 0019 4C89E6   		movq	%r12, %rsi
 6482 001c BF100000 		movl	$16, %edi
 6482      00
 6483 0021 E8000000 		call	_ZnwmPv@PLT
 6483      00
 6484 0026 4889C3   		movq	%rax, %rbx
 6485 0029 4885DB   		testq	%rbx, %rbx
 6486 002c 7411     		je	.L367
  83:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 6487              		.loc 6 83 0 is_stmt 0 discriminator 1
 6488 002e 488B45D0 		movq	-48(%rbp), %rax
 6489 0032 4889C6   		movq	%rax, %rsi
 6490 0035 4889DF   		movq	%rbx, %rdi
 6491              	.LEHB66:
 6492 0038 E8000000 		call	_ZNSt4pairIiSsEC1ERKS0_@PLT
 6492      00
 6493              	.LEHE66:
 6494 003d EB1B     		jmp	.L366
 6495              	.L367:
  84:/usr/include/c++/4.9/bits/stl_construct.h **** #endif
 6496              		.loc 6 84 0 is_stmt 1 discriminator 2
 6497 003f EB19     		jmp	.L366
 6498              	.L370:
 6499 0041 4989C5   		movq	%rax, %r13
  83:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 6500              		.loc 6 83 0
 6501 0044 4C89E6   		movq	%r12, %rsi
 6502 0047 4889DF   		movq	%rbx, %rdi
 6503 004a E8000000 		call	_ZdlPvS_@PLT
 6503      00
 6504 004f 4C89E8   		movq	%r13, %rax
 6505 0052 4889C7   		movq	%rax, %rdi
 6506              	.LEHB67:
 6507 0055 E8000000 		call	_Unwind_Resume@PLT
 6507      00
 6508              	.LEHE67:
 6509              	.L366:
  84:/usr/include/c++/4.9/bits/stl_construct.h **** #endif
 6510              		.loc 6 84 0
 6511 005a 4883C418 		addq	$24, %rsp
 6512 005e 5B       		popq	%rbx
 6513 005f 415C     		popq	%r12
 6514 0061 415D     		popq	%r13
 6515 0063 5D       		popq	%rbp
 6516              		.cfi_def_cfa 7, 8
 6517 0064 C3       		ret
 6518              		.cfi_endproc
 6519              	.LFE1075:
 6520              		.section	.gcc_except_table
 6521              	.LLSDA1075:
 6522 0190 FF       		.byte	0xff
 6523 0191 FF       		.byte	0xff
 6524 0192 01       		.byte	0x1
 6525 0193 08       		.uleb128 .LLSDACSE1075-.LLSDACSB1075
 6526              	.LLSDACSB1075:
 6527 0194 38       		.uleb128 .LEHB66-.LFB1075
 6528 0195 05       		.uleb128 .LEHE66-.LEHB66
 6529 0196 41       		.uleb128 .L370-.LFB1075
 6530 0197 00       		.uleb128 0
 6531 0198 55       		.uleb128 .LEHB67-.LFB1075
 6532 0199 05       		.uleb128 .LEHE67-.LEHB67
 6533 019a 00       		.uleb128 0
 6534 019b 00       		.uleb128 0
 6535              	.LLSDACSE1075:
 6536              		.section	.text._ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_,"axG",@progbits,_ZSt10_ConstructISt4pair
 6538              		.section	.text._ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_E
 6539              		.weak	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7
 6541              	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_S_base
 6542              	.LFB1076:
 214:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     };
 215:/usr/include/c++/4.9/bits/stl_iterator_base_types.h **** 
 216:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 217:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     struct _Iter_base<_Iterator, true>
 218:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****     {
 219:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_type iterator_type;
 220:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       static iterator_type _S_base(_Iterator __it)
 6543              		.loc 15 220 0
 6544              		.cfi_startproc
 6545 0000 55       		pushq	%rbp
 6546              		.cfi_def_cfa_offset 16
 6547              		.cfi_offset 6, -16
 6548 0001 4889E5   		movq	%rsp, %rbp
 6549              		.cfi_def_cfa_register 6
 6550 0004 4883EC10 		subq	$16, %rsp
 6551 0008 48897DF0 		movq	%rdi, -16(%rbp)
 221:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       { return __it.base(); }
 6552              		.loc 15 221 0
 6553 000c 488D45F0 		leaq	-16(%rbp), %rax
 6554 0010 4889C7   		movq	%rax, %rdi
 6555 0013 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 6555      00
 6556 0018 488B00   		movq	(%rax), %rax
 6557 001b C9       		leave
 6558              		.cfi_def_cfa 7, 8
 6559 001c C3       		ret
 6560              		.cfi_endproc
 6561              	.LFE1076:
 6563              		.section	.text._ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EE
 6564              		.weak	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_
 6566              	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_S_baseE
 6567              	.LFB1077:
 220:/usr/include/c++/4.9/bits/stl_iterator_base_types.h ****       { return __it.base(); }
 6568              		.loc 15 220 0
 6569              		.cfi_startproc
 6570 0000 55       		pushq	%rbp
 6571              		.cfi_def_cfa_offset 16
 6572              		.cfi_offset 6, -16
 6573 0001 4889E5   		movq	%rsp, %rbp
 6574              		.cfi_def_cfa_register 6
 6575 0004 4883EC10 		subq	$16, %rsp
 6576 0008 48897DF0 		movq	%rdi, -16(%rbp)
 6577              		.loc 15 221 0
 6578 000c 488D45F0 		leaq	-16(%rbp), %rax
 6579 0010 4889C7   		movq	%rax, %rdi
 6580 0013 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 6580      00
 6581 0018 488B00   		movq	(%rax), %rax
 6582 001b C9       		leave
 6583              		.cfi_def_cfa 7, 8
 6584 001c C3       		ret
 6585              		.cfi_endproc
 6586              	.LFE1077:
 6588              		.section	.text._ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIiSsEP
 6589              		.weak	_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIiSsEPS4_EET0_T
 6591              	_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIiSsEPS4_EET0_T_S9_S8_
 6592              	.LFB1078:
 331:/usr/include/c++/4.9/bits/stl_algobase.h ****         { 
 6593              		.loc 12 331 0
 6594              		.cfi_startproc
 6595 0000 55       		pushq	%rbp
 6596              		.cfi_def_cfa_offset 16
 6597              		.cfi_offset 6, -16
 6598 0001 4889E5   		movq	%rsp, %rbp
 6599              		.cfi_def_cfa_register 6
 6600 0004 4883EC30 		subq	$48, %rsp
 6601 0008 48897DE8 		movq	%rdi, -24(%rbp)
 6602 000c 488975E0 		movq	%rsi, -32(%rbp)
 6603 0010 488955D8 		movq	%rdx, -40(%rbp)
 6604              	.LBB65:
 6605              	.LBB66:
 334:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    {
 6606              		.loc 12 334 0
 6607 0014 488B55E0 		movq	-32(%rbp), %rdx
 6608 0018 488B45E8 		movq	-24(%rbp), %rax
 6609 001c 4829C2   		subq	%rax, %rdx
 6610 001f 4889D0   		movq	%rdx, %rax
 6611 0022 48C1F804 		sarq	$4, %rax
 6612 0026 488945F8 		movq	%rax, -8(%rbp)
 6613 002a EB22     		jmp	.L376
 6614              	.L377:
 336:/usr/include/c++/4.9/bits/stl_algobase.h **** 	      ++__first;
 6615              		.loc 12 336 0 discriminator 3
 6616 002c 488B55E8 		movq	-24(%rbp), %rdx
 6617 0030 488B45D8 		movq	-40(%rbp), %rax
 6618 0034 4889D6   		movq	%rdx, %rsi
 6619 0037 4889C7   		movq	%rax, %rdi
 6620 003a E8000000 		call	_ZNSt4pairIiSsEaSERKS0_@PLT
 6620      00
 337:/usr/include/c++/4.9/bits/stl_algobase.h **** 	      ++__result;
 6621              		.loc 12 337 0 discriminator 3
 6622 003f 488345E8 		addq	$16, -24(%rbp)
 6622      10
 338:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    }
 6623              		.loc 12 338 0 discriminator 3
 6624 0044 488345D8 		addq	$16, -40(%rbp)
 6624      10
 334:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    {
 6625              		.loc 12 334 0 discriminator 3
 6626 0049 48836DF8 		subq	$1, -8(%rbp)
 6626      01
 6627              	.L376:
 334:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    {
 6628              		.loc 12 334 0 is_stmt 0 discriminator 1
 6629 004e 48837DF8 		cmpq	$0, -8(%rbp)
 6629      00
 6630 0053 7FD7     		jg	.L377
 6631              	.LBE66:
 340:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
 6632              		.loc 12 340 0 is_stmt 1
 6633 0055 488B45D8 		movq	-40(%rbp), %rax
 6634              	.LBE65:
 341:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 6635              		.loc 12 341 0
 6636 0059 C9       		leave
 6637              		.cfi_def_cfa 7, 8
 6638 005a C3       		ret
 6639              		.cfi_endproc
 6640              	.LFE1078:
 6642              		.section	.text._ZN9__gnu_cxxneIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_
 6643              		.weak	_ZN9__gnu_cxxneIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
 6645              	_ZN9__gnu_cxxneIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_:
 6646              	.LFB1079:
 829:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 6647              		.loc 9 829 0
 6648              		.cfi_startproc
 6649 0000 55       		pushq	%rbp
 6650              		.cfi_def_cfa_offset 16
 6651              		.cfi_offset 6, -16
 6652 0001 4889E5   		movq	%rsp, %rbp
 6653              		.cfi_def_cfa_register 6
 6654 0004 53       		pushq	%rbx
 6655 0005 4883EC18 		subq	$24, %rsp
 6656              		.cfi_offset 3, -24
 6657 0009 48897DE8 		movq	%rdi, -24(%rbp)
 6658 000d 488975E0 		movq	%rsi, -32(%rbp)
 832:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 6659              		.loc 9 832 0
 6660 0011 488B45E8 		movq	-24(%rbp), %rax
 6661 0015 4889C7   		movq	%rax, %rdi
 6662 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 6662      00
 6663 001d 488B18   		movq	(%rax), %rbx
 6664 0020 488B45E0 		movq	-32(%rbp), %rax
 6665 0024 4889C7   		movq	%rax, %rdi
 6666 0027 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 6666      00
 6667 002c 488B00   		movq	(%rax), %rax
 6668 002f 4839C3   		cmpq	%rax, %rbx
 6669 0032 0F95C0   		setne	%al
 6670 0035 4883C418 		addq	$24, %rsp
 6671 0039 5B       		popq	%rbx
 6672 003a 5D       		popq	%rbp
 6673              		.cfi_def_cfa 7, 8
 6674 003b C3       		ret
 6675              		.cfi_endproc
 6676              	.LFE1079:
 6678              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv,"axG",@pro
 6679              		.align 2
 6680              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv
 6682              	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv:
 6683              	.LFB1080:
 749:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 6684              		.loc 9 749 0
 6685              		.cfi_startproc
 6686 0000 55       		pushq	%rbp
 6687              		.cfi_def_cfa_offset 16
 6688              		.cfi_offset 6, -16
 6689 0001 4889E5   		movq	%rsp, %rbp
 6690              		.cfi_def_cfa_register 6
 6691 0004 48897DF8 		movq	%rdi, -8(%rbp)
 751:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 6692              		.loc 9 751 0
 6693 0008 488B45F8 		movq	-8(%rbp), %rax
 6694 000c 488B00   		movq	(%rax), %rax
 6695 000f 488D5010 		leaq	16(%rax), %rdx
 6696 0013 488B45F8 		movq	-8(%rbp), %rax
 6697 0017 488910   		movq	%rdx, (%rax)
 752:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 6698              		.loc 9 752 0
 6699 001a 488B45F8 		movq	-8(%rbp), %rax
 753:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 6700              		.loc 9 753 0
 6701 001e 5D       		popq	%rbp
 6702              		.cfi_def_cfa 7, 8
 6703 001f C3       		ret
 6704              		.cfi_endproc
 6705              	.LFE1080:
 6707              		.section	.text._ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIiSsES5
 6708              		.weak	_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIiSsES5_EET0_T_S
 6710              	_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIiSsES5_EET0_T_S7_S6_:
 6711              	.LFB1081:
 331:/usr/include/c++/4.9/bits/stl_algobase.h ****         { 
 6712              		.loc 12 331 0
 6713              		.cfi_startproc
 6714 0000 55       		pushq	%rbp
 6715              		.cfi_def_cfa_offset 16
 6716              		.cfi_offset 6, -16
 6717 0001 4889E5   		movq	%rsp, %rbp
 6718              		.cfi_def_cfa_register 6
 6719 0004 4883EC30 		subq	$48, %rsp
 6720 0008 48897DE8 		movq	%rdi, -24(%rbp)
 6721 000c 488975E0 		movq	%rsi, -32(%rbp)
 6722 0010 488955D8 		movq	%rdx, -40(%rbp)
 6723              	.LBB67:
 6724              	.LBB68:
 334:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    {
 6725              		.loc 12 334 0
 6726 0014 488B55E0 		movq	-32(%rbp), %rdx
 6727 0018 488B45E8 		movq	-24(%rbp), %rax
 6728 001c 4829C2   		subq	%rax, %rdx
 6729 001f 4889D0   		movq	%rdx, %rax
 6730 0022 48C1F804 		sarq	$4, %rax
 6731 0026 488945F8 		movq	%rax, -8(%rbp)
 6732 002a EB22     		jmp	.L384
 6733              	.L385:
 336:/usr/include/c++/4.9/bits/stl_algobase.h **** 	      ++__first;
 6734              		.loc 12 336 0 discriminator 3
 6735 002c 488B55E8 		movq	-24(%rbp), %rdx
 6736 0030 488B45D8 		movq	-40(%rbp), %rax
 6737 0034 4889D6   		movq	%rdx, %rsi
 6738 0037 4889C7   		movq	%rax, %rdi
 6739 003a E8000000 		call	_ZNSt4pairIiSsEaSERKS0_@PLT
 6739      00
 337:/usr/include/c++/4.9/bits/stl_algobase.h **** 	      ++__result;
 6740              		.loc 12 337 0 discriminator 3
 6741 003f 488345E8 		addq	$16, -24(%rbp)
 6741      10
 338:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    }
 6742              		.loc 12 338 0 discriminator 3
 6743 0044 488345D8 		addq	$16, -40(%rbp)
 6743      10
 334:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    {
 6744              		.loc 12 334 0 discriminator 3
 6745 0049 48836DF8 		subq	$1, -8(%rbp)
 6745      01
 6746              	.L384:
 334:/usr/include/c++/4.9/bits/stl_algobase.h **** 	    {
 6747              		.loc 12 334 0 is_stmt 0 discriminator 1
 6748 004e 48837DF8 		cmpq	$0, -8(%rbp)
 6748      00
 6749 0053 7FD7     		jg	.L385
 6750              	.LBE68:
 340:/usr/include/c++/4.9/bits/stl_algobase.h **** 	}
 6751              		.loc 12 340 0 is_stmt 1
 6752 0055 488B45D8 		movq	-40(%rbp), %rax
 6753              	.LBE67:
 341:/usr/include/c++/4.9/bits/stl_algobase.h ****     };
 6754              		.loc 12 341 0
 6755 0059 C9       		leave
 6756              		.cfi_def_cfa 7, 8
 6757 005a C3       		ret
 6758              		.cfi_endproc
 6759              	.LFE1081:
 6761              		.section	.text._ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_,"axG",@progbits,_ZSt1
 6762              		.weak	_ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_
 6764              	_ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_:
 6765              	.LFB1082:
  79:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 6766              		.loc 6 79 0
 6767              		.cfi_startproc
 6768              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6769              		.cfi_lsda 0x1b,.LLSDA1082
 6770 0000 55       		pushq	%rbp
 6771              		.cfi_def_cfa_offset 16
 6772              		.cfi_offset 6, -16
 6773 0001 4889E5   		movq	%rsp, %rbp
 6774              		.cfi_def_cfa_register 6
 6775 0004 4155     		pushq	%r13
 6776 0006 4154     		pushq	%r12
 6777 0008 53       		pushq	%rbx
 6778 0009 4883EC18 		subq	$24, %rsp
 6779              		.cfi_offset 13, -24
 6780              		.cfi_offset 12, -32
 6781              		.cfi_offset 3, -40
 6782 000d 48897DD8 		movq	%rdi, -40(%rbp)
 6783 0011 488975D0 		movq	%rsi, -48(%rbp)
  83:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 6784              		.loc 6 83 0
 6785 0015 4C8B65D8 		movq	-40(%rbp), %r12
 6786 0019 4C89E6   		movq	%r12, %rsi
 6787 001c BF380000 		movl	$56, %edi
 6787      00
 6788 0021 E8000000 		call	_ZnwmPv@PLT
 6788      00
 6789 0026 4889C3   		movq	%rax, %rbx
 6790 0029 4885DB   		testq	%rbx, %rbx
 6791 002c 7411     		je	.L388
  83:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 6792              		.loc 6 83 0 is_stmt 0 discriminator 1
 6793 002e 488B45D0 		movq	-48(%rbp), %rax
 6794 0032 4889C6   		movq	%rax, %rsi
 6795 0035 4889DF   		movq	%rbx, %rdi
 6796              	.LEHB68:
 6797 0038 E8000000 		call	_ZN8UnitTest18DeferredTestResultC1ERKS0_@PLT
 6797      00
 6798              	.LEHE68:
 6799 003d EB1B     		jmp	.L387
 6800              	.L388:
  84:/usr/include/c++/4.9/bits/stl_construct.h **** #endif
 6801              		.loc 6 84 0 is_stmt 1 discriminator 2
 6802 003f EB19     		jmp	.L387
 6803              	.L391:
 6804 0041 4989C5   		movq	%rax, %r13
  83:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 6805              		.loc 6 83 0
 6806 0044 4C89E6   		movq	%r12, %rsi
 6807 0047 4889DF   		movq	%rbx, %rdi
 6808 004a E8000000 		call	_ZdlPvS_@PLT
 6808      00
 6809 004f 4C89E8   		movq	%r13, %rax
 6810 0052 4889C7   		movq	%rax, %rdi
 6811              	.LEHB69:
 6812 0055 E8000000 		call	_Unwind_Resume@PLT
 6812      00
 6813              	.LEHE69:
 6814              	.L387:
  84:/usr/include/c++/4.9/bits/stl_construct.h **** #endif
 6815              		.loc 6 84 0
 6816 005a 4883C418 		addq	$24, %rsp
 6817 005e 5B       		popq	%rbx
 6818 005f 415C     		popq	%r12
 6819 0061 415D     		popq	%r13
 6820 0063 5D       		popq	%rbp
 6821              		.cfi_def_cfa 7, 8
 6822 0064 C3       		ret
 6823              		.cfi_endproc
 6824              	.LFE1082:
 6825              		.section	.gcc_except_table
 6826              	.LLSDA1082:
 6827 019c FF       		.byte	0xff
 6828 019d FF       		.byte	0xff
 6829 019e 01       		.byte	0x1
 6830 019f 08       		.uleb128 .LLSDACSE1082-.LLSDACSB1082
 6831              	.LLSDACSB1082:
 6832 01a0 38       		.uleb128 .LEHB68-.LFB1082
 6833 01a1 05       		.uleb128 .LEHE68-.LEHB68
 6834 01a2 41       		.uleb128 .L391-.LFB1082
 6835 01a3 00       		.uleb128 0
 6836 01a4 55       		.uleb128 .LEHB69-.LFB1082
 6837 01a5 05       		.uleb128 .LEHE69-.LEHB69
 6838 01a6 00       		.uleb128 0
 6839 01a7 00       		.uleb128 0
 6840              	.LLSDACSE1082:
 6841              		.section	.text._ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_,"axG",@progbits,_ZSt1
 6843              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv,"axG"
 6844              		.align 2
 6845              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv
 6847              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv:
 6848              	.LFB1083:
 793:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return _M_current; }
 6849              		.loc 9 793 0
 6850              		.cfi_startproc
 6851 0000 55       		pushq	%rbp
 6852              		.cfi_def_cfa_offset 16
 6853              		.cfi_offset 6, -16
 6854 0001 4889E5   		movq	%rsp, %rbp
 6855              		.cfi_def_cfa_register 6
 6856 0004 48897DF8 		movq	%rdi, -8(%rbp)
 794:/usr/include/c++/4.9/bits/stl_iterator.h ****     };
 6857              		.loc 9 794 0
 6858 0008 488B45F8 		movq	-8(%rbp), %rax
 6859 000c 5D       		popq	%rbp
 6860              		.cfi_def_cfa 7, 8
 6861 000d C3       		ret
 6862              		.cfi_endproc
 6863              	.LFE1083:
 6865              		.weak	_ZTVN8UnitTest20DeferredTestReporterE
 6866              		.section	.data.rel.ro._ZTVN8UnitTest20DeferredTestReporterE,"awG",@progbits,_ZTVN8UnitTest20Deferr
 6867              		.align 64
 6870              	_ZTVN8UnitTest20DeferredTestReporterE:
 6871 0000 00000000 		.quad	0
 6871      00000000 
 6872 0008 00000000 		.quad	_ZTIN8UnitTest20DeferredTestReporterE
 6872      00000000 
 6873 0010 00000000 		.quad	0
 6873      00000000 
 6874 0018 00000000 		.quad	0
 6874      00000000 
 6875 0020 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
 6875      00000000 
 6876 0028 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
 6876      00000000 
 6877 0030 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
 6877      00000000 
 6878 0038 00000000 		.quad	__cxa_pure_virtual
 6878      00000000 
 6879              		.weak	_ZTIN8UnitTest20DeferredTestReporterE
 6880              		.section	.data.rel.ro._ZTIN8UnitTest20DeferredTestReporterE,"awG",@progbits,_ZTIN8UnitTest20Deferr
 6881              		.align 16
 6884              	_ZTIN8UnitTest20DeferredTestReporterE:
 6885 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 6885      00000000 
 6886 0008 00000000 		.quad	_ZTSN8UnitTest20DeferredTestReporterE
 6886      00000000 
 6887 0010 00000000 		.quad	_ZTIN8UnitTest12TestReporterE
 6887      00000000 
 6888              		.weak	_ZTSN8UnitTest20DeferredTestReporterE
 6889              		.section	.rodata._ZTSN8UnitTest20DeferredTestReporterE,"aG",@progbits,_ZTSN8UnitTest20DeferredTest
 6890              		.align 32
 6893              	_ZTSN8UnitTest20DeferredTestReporterE:
 6894 0000 4E38556E 		.string	"N8UnitTest20DeferredTestReporterE"
 6894      69745465 
 6894      73743230 
 6894      44656665 
 6894      72726564 
 6895              		.section	.data.rel.ro,"aw",@progbits
 6896              		.align 8
 6899              	_ZZL18__gthread_active_pvE20__gthread_active_ptr:
 6900 0000 00000000 		.quad	_ZL28__gthrw___pthread_key_createPjPFvPvE
 6900      00000000 
 6901              		.weakref	_ZL28__gthrw___pthread_key_createPjPFvPvE,__pthread_key_create
 6902              		.text
 6903              	.Letext0:
 6904              		.file 16 "/usr/include/c++/4.9/bits/cpp_type_traits.h"
 6905              		.file 17 "/usr/include/c++/4.9/cwchar"
 6906              		.file 18 "/usr/include/c++/4.9/bits/char_traits.h"
 6907              		.file 19 "/usr/include/x86_64-linux-gnu/c++/4.9/bits/c++config.h"
 6908              		.file 20 "/usr/include/c++/4.9/clocale"
 6909              		.file 21 "/usr/include/c++/4.9/bits/basic_string.h"
 6910              		.file 22 "/usr/include/c++/4.9/bits/basic_string.tcc"
 6911              		.file 23 "/usr/include/c++/4.9/bits/stringfwd.h"
 6912              		.file 24 "/usr/include/c++/4.9/debug/debug.h"
 6913              		.file 25 "/usr/include/c++/4.9/bits/predefined_ops.h"
 6914              		.file 26 "/usr/include/c++/4.9/ext/numeric_traits.h"
 6915              		.file 27 "/usr/include/stdio.h"
 6916              		.file 28 "<built-in>"
 6917              		.file 29 "/usr/lib/gcc/x86_64-linux-gnu/4.9/include/stddef.h"
 6918              		.file 30 "/usr/include/wchar.h"
 6919              		.file 31 "/usr/include/time.h"
 6920              		.file 32 "/usr/include/locale.h"
 6921              		.file 33 "/usr/include/x86_64-linux-gnu/c++/4.9/bits/atomic_word.h"
 6922              		.file 34 "TestReporter.h"
 6923              		.file 35 "TestDetails.h"
 6924              		.file 36 "DeferredTestReporter.h"
 25652              		.align 8
 25655              	DW.ref.__gxx_personality_v0:
 25656 0000 00000000 		.quad	__gxx_personality_v0
 25656      00000000 
 25657              		.ident	"GCC: (Ubuntu 4.9.2-10ubuntu13) 4.9.2"
 25658              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 DeferredTestReporter.cpp
     /tmp/ccwIX8qK.s:7      .text._ZnwmPv:0000000000000000 _ZnwmPv
     /tmp/ccwIX8qK.s:30     .text._ZdlPvS_:0000000000000000 _ZdlPvS_
     /tmp/ccwIX8qK.s:52     .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD2Ev
     /tmp/ccwIX8qK.s:25655  .data.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccwIX8qK.s:547    .text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev
     /tmp/ccwIX8qK.s:52     .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD1Ev
     /tmp/ccwIX8qK.s:173    .text:0000000000000000 _ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
     /tmp/ccwIX8qK.s:633    .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_
     /tmp/ccwIX8qK.s:276    .text._ZNSt4pairIiSsED2Ev:0000000000000000 _ZNSt4pairIiSsED2Ev
     /tmp/ccwIX8qK.s:276    .text._ZNSt4pairIiSsED2Ev:0000000000000000 _ZNSt4pairIiSsED1Ev
     /tmp/ccwIX8qK.s:307    .text:0000000000000098 _ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
     /tmp/ccwIX8qK.s:691    .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv
     /tmp/ccwIX8qK.s:734    .text._ZNSt4pairIiSsEC2ERKiRKSs:0000000000000000 _ZNSt4pairIiSsEC1ERKiRKSs
     /tmp/ccwIX8qK.s:772    .text._ZNSt6vectorISt4pairIiSsESaIS1_EE9push_backERKS1_:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EE9push_backERKS1_
     /tmp/ccwIX8qK.s:488    .text:00000000000001c6 _ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
     /tmp/ccwIX8qK.s:523    .text:00000000000001fc _ZN8UnitTest20DeferredTestReporter10GetResultsEv
     /tmp/ccwIX8qK.s:547    .text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev
     /tmp/ccwIX8qK.s:942    .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccwIX8qK.s:963    .text._ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E
     /tmp/ccwIX8qK.s:859    .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev
     /tmp/ccwIX8qK.s:993    .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RKT_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RKT_
     /tmp/ccwIX8qK.s:1602   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
     /tmp/ccwIX8qK.s:1224   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
     /tmp/ccwIX8qK.s:1640   .text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl
     /tmp/ccwIX8qK.s:1689   .text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
     /tmp/ccwIX8qK.s:734    .text._ZNSt4pairIiSsEC2ERKiRKSs:0000000000000000 _ZNSt4pairIiSsEC2ERKiRKSs
     /tmp/ccwIX8qK.s:1711   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_
     /tmp/ccwIX8qK.s:2184   .text._ZNSt6vectorISt4pairIiSsESaIS1_EE3endEv:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EE3endEv
     /tmp/ccwIX8qK.s:1814   .text._ZNSt6vectorISt4pairIiSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
     /tmp/ccwIX8qK.s:830    .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev
     /tmp/ccwIX8qK.s:2222   .text._ZNSaISt4pairIiSsEED2Ev:0000000000000000 _ZNSaISt4pairIiSsEED2Ev
     /tmp/ccwIX8qK.s:830    .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev
     /tmp/ccwIX8qK.s:2252   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m
     /tmp/ccwIX8qK.s:859    .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED1Ev
     /tmp/ccwIX8qK.s:2288   .text._ZSt8_DestroyIPSt4pairIiSsEEvT_S3_:0000000000000000 _ZSt8_DestroyIPSt4pairIiSsEEvT_S3_
     /tmp/ccwIX8qK.s:2319   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_
     /tmp/ccwIX8qK.s:1024   .text._ZN8UnitTest18DeferredTestResultC2ERKS0_:0000000000000000 _ZN8UnitTest18DeferredTestResultC2ERKS0_
     /tmp/ccwIX8qK.s:2403   .text._ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EEC1ERKS3_
     /tmp/ccwIX8qK.s:1024   .text._ZN8UnitTest18DeferredTestResultC2ERKS0_:0000000000000000 _ZN8UnitTest18DeferredTestResultC1ERKS0_
     /tmp/ccwIX8qK.s:1163   .text._ZN8UnitTest18DeferredTestResultaSERKS0_:0000000000000000 _ZN8UnitTest18DeferredTestResultaSERKS0_
     /tmp/ccwIX8qK.s:2585   .text._ZNSt6vectorISt4pairIiSsESaIS1_EEaSERKS3_:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EEaSERKS3_
     /tmp/ccwIX8qK.s:2521   .text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccwIX8qK.s:2542   .text._ZSt13copy_backwardIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_:0000000000000000 _ZSt13copy_backwardIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_
     /tmp/ccwIX8qK.s:2801   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc
     /tmp/ccwIX8qK.s:2900   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
     /tmp/ccwIX8qK.s:2936   .text._ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_:0000000000000000 _ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_
     /tmp/ccwIX8qK.s:2978   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm
     /tmp/ccwIX8qK.s:3017   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccwIX8qK.s:3038   .text._ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S4_RT1_:0000000000000000 _ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S4_RT1_
     /tmp/ccwIX8qK.s:3097   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
     /tmp/ccwIX8qK.s:3127   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
     /tmp/ccwIX8qK.s:3070   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_
     /tmp/ccwIX8qK.s:3164   .text._ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS3_
     /tmp/ccwIX8qK.s:3194   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE9constructEPS2_RKS2_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE9constructEPS2_RKS2_
     /tmp/ccwIX8qK.s:1741   .text._ZNSt4pairIiSsEC2ERKS0_:0000000000000000 _ZNSt4pairIiSsEC2ERKS0_
     /tmp/ccwIX8qK.s:1741   .text._ZNSt4pairIiSsEC2ERKS0_:0000000000000000 _ZNSt4pairIiSsEC1ERKS0_
     /tmp/ccwIX8qK.s:1779   .text._ZNSt4pairIiSsEaSERKS0_:0000000000000000 _ZNSt4pairIiSsEaSERKS0_
     /tmp/ccwIX8qK.s:3277   .text._ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccwIX8qK.s:3298   .text._ZSt13copy_backwardIPSt4pairIiSsES2_ET0_T_S4_S3_:0000000000000000 _ZSt13copy_backwardIPSt4pairIiSsES2_ET0_T_S4_S3_
     /tmp/ccwIX8qK.s:3340   .text._ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv
     /tmp/ccwIX8qK.s:3363   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE12_M_check_lenEmPKc:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE12_M_check_lenEmPKc
     /tmp/ccwIX8qK.s:3462   .text._ZNSt6vectorISt4pairIiSsESaIS1_EE5beginEv:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EE5beginEv
     /tmp/ccwIX8qK.s:3498   .text._ZN9__gnu_cxxmiIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_:0000000000000000 _ZN9__gnu_cxxmiIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_
     /tmp/ccwIX8qK.s:3537   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm
     /tmp/ccwIX8qK.s:3575   .text._ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiSsES2_SaIS1_EET0_T_S5_S4_RT1_:0000000000000000 _ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiSsES2_SaIS1_EET0_T_S5_S4_RT1_
     /tmp/ccwIX8qK.s:3606   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE7destroyERS3_PS2_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE7destroyERS3_PS2_
     /tmp/ccwIX8qK.s:3634   .text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS3_
     /tmp/ccwIX8qK.s:3664   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev
     /tmp/ccwIX8qK.s:2222   .text._ZNSaISt4pairIiSsEED2Ev:0000000000000000 _ZNSaISt4pairIiSsEED1Ev
     /tmp/ccwIX8qK.s:3686   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE10deallocateERS3_PS2_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE10deallocateERS3_PS2_m
     /tmp/ccwIX8qK.s:3715   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_
     /tmp/ccwIX8qK.s:2403   .text._ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_
     /tmp/ccwIX8qK.s:3804   .text._ZNKSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNKSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccwIX8qK.s:3782   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE17_S_select_on_copyERKS3_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE17_S_select_on_copyERKS3_
     /tmp/ccwIX8qK.s:3754   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv
     /tmp/ccwIX8qK.s:3826   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_
     /tmp/ccwIX8qK.s:3952   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv
     /tmp/ccwIX8qK.s:3912   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv
     /tmp/ccwIX8qK.s:3991   .text._ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E:0000000000000000 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E
     /tmp/ccwIX8qK.s:4021   .text._ZSt12__miter_baseIPN8UnitTest18DeferredTestResultEENSt11_Miter_baseIT_E13iterator_typeES4_:0000000000000000 _ZSt12__miter_baseIPN8UnitTest18DeferredTestResultEENSt11_Miter_baseIT_E13iterator_typeES4_
     /tmp/ccwIX8qK.s:4045   .text._ZSt23__copy_move_backward_a2ILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_:0000000000000000 _ZSt23__copy_move_backward_a2ILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_
     /tmp/ccwIX8qK.s:4092   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE8capacityEv:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE8capacityEv
     /tmp/ccwIX8qK.s:4121   .text._ZNSt6vectorISt4pairIiSsESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_
     /tmp/ccwIX8qK.s:4236   .text._ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_:0000000000000000 _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_
     /tmp/ccwIX8qK.s:4277   .text._ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E:0000000000000000 _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E
     /tmp/ccwIX8qK.s:4306   .text._ZSt4copyIPSt4pairIiSsES2_ET0_T_S4_S3_:0000000000000000 _ZSt4copyIPSt4pairIiSsES2_ET0_T_S4_S3_
     /tmp/ccwIX8qK.s:4347   .text._ZSt22__uninitialized_copy_aIPSt4pairIiSsES2_S1_ET0_T_S4_S3_RSaIT1_E:0000000000000000 _ZSt22__uninitialized_copy_aIPSt4pairIiSsES2_S1_ET0_T_S4_S3_RSaIT1_E
     /tmp/ccwIX8qK.s:4410   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv
     /tmp/ccwIX8qK.s:4378   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv
     /tmp/ccwIX8qK.s:4436   .text._ZSt3maxImERKT_S2_S2_:0000000000000000 _ZSt3maxImERKT_S2_S2_
     /tmp/ccwIX8qK.s:4471   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8allocateERS3_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8allocateERS3_m
     /tmp/ccwIX8qK.s:4499   .text._ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E:0000000000000000 _ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E
     /tmp/ccwIX8qK.s:4530   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_
     /tmp/ccwIX8qK.s:4555   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
     /tmp/ccwIX8qK.s:4585   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m
     /tmp/ccwIX8qK.s:3164   .text._ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_
     /tmp/ccwIX8qK.s:4614   .text._ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_:0000000000000000 _ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_
     /tmp/ccwIX8qK.s:4638   .text._ZSt23__copy_move_backward_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:0000000000000000 _ZSt23__copy_move_backward_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
     /tmp/ccwIX8qK.s:4685   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv
     /tmp/ccwIX8qK.s:4711   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8allocateERS3_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8allocateERS3_m
     /tmp/ccwIX8qK.s:4740   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE7destroyEPS2_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE7destroyEPS2_
     /tmp/ccwIX8qK.s:3634   .text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS3_
     /tmp/ccwIX8qK.s:3664   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED1Ev
     /tmp/ccwIX8qK.s:4766   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m
     /tmp/ccwIX8qK.s:4792   .text._ZSt11__addressofISt4pairIiSsEEPT_RS2_:0000000000000000 _ZSt11__addressofISt4pairIiSsEEPT_RS2_
     /tmp/ccwIX8qK.s:4815   .text._ZSt8_DestroyISt4pairIiSsEEvPT_:0000000000000000 _ZSt8_DestroyISt4pairIiSsEEvPT_
     /tmp/ccwIX8qK.s:4840   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC2ERKS2_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC1ERKS2_
     /tmp/ccwIX8qK.s:4879   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE17_M_create_storageEm:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE17_M_create_storageEm
     /tmp/ccwIX8qK.s:3826   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC1EmRKS2_
     /tmp/ccwIX8qK.s:4924   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_
     /tmp/ccwIX8qK.s:4953   .text._ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_:0000000000000000 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_
     /tmp/ccwIX8qK.s:4987   .text._ZNSt10_Iter_baseIPN8UnitTest18DeferredTestResultELb0EE7_S_baseES2_:0000000000000000 _ZNSt10_Iter_baseIPN8UnitTest18DeferredTestResultELb0EE7_S_baseES2_
     /tmp/ccwIX8qK.s:5009   .text._ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_typeES4_:0000000000000000 _ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_typeES4_
     /tmp/ccwIX8qK.s:5033   .text._ZSt22__copy_move_backward_aILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_:0000000000000000 _ZSt22__copy_move_backward_aILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_
     /tmp/ccwIX8qK.s:5067   .text._ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Miter_baseIT_E13iterator_typeESB_:0000000000000000 _ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Miter_baseIT_E13iterator_typeESB_
     /tmp/ccwIX8qK.s:5091   .text._ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_:0000000000000000 _ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_
     /tmp/ccwIX8qK.s:5153   .text._ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEEvT_S9_:0000000000000000 _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEEvT_S9_
     /tmp/ccwIX8qK.s:5183   .text._ZSt14__copy_move_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:0000000000000000 _ZSt14__copy_move_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
     /tmp/ccwIX8qK.s:5229   .text._ZSt18uninitialized_copyIPSt4pairIiSsES2_ET0_T_S4_S3_:0000000000000000 _ZSt18uninitialized_copyIPSt4pairIiSsES2_ET0_T_S4_S3_
     /tmp/ccwIX8qK.s:5288   .text._ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccwIX8qK.s:5263   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_
     /tmp/ccwIX8qK.s:5310   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv
     /tmp/ccwIX8qK.s:5352   .text._ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_:0000000000000000 _ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_
     /tmp/ccwIX8qK.s:5386   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
     /tmp/ccwIX8qK.s:5425   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
     /tmp/ccwIX8qK.s:5451   .text._ZNSt10_Iter_baseIPSt4pairIiSsELb0EE7_S_baseES2_:0000000000000000 _ZNSt10_Iter_baseIPSt4pairIiSsELb0EE7_S_baseES2_
     /tmp/ccwIX8qK.s:5472   .text._ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_:0000000000000000 _ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_
     /tmp/ccwIX8qK.s:5496   .text._ZSt22__copy_move_backward_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:0000000000000000 _ZSt22__copy_move_backward_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
     /tmp/ccwIX8qK.s:5530   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8max_sizeERKS3_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8max_sizeERKS3_
     /tmp/ccwIX8qK.s:5555   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE8allocateEmPKv:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE8allocateEmPKv
     /tmp/ccwIX8qK.s:4840   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC2ERKS2_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC2ERKS2_
     /tmp/ccwIX8qK.s:5595   .text._ZNSaISt4pairIiSsEEC2ERKS1_:0000000000000000 _ZNSaISt4pairIiSsEEC2ERKS1_
     /tmp/ccwIX8qK.s:4924   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_
     /tmp/ccwIX8qK.s:5626   .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_:0000000000000000 _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_
     /tmp/ccwIX8qK.s:5747   .text._ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPN8UnitTest18DeferredTestResultES5_EET0_T_S7_S6_:0000000000000000 _ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPN8UnitTest18DeferredTestResultES5_EET0_T_S7_S6_
     /tmp/ccwIX8qK.s:5800   .text._ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb0EE7_S_baseES9_:0000000000000000 _ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb0EE7_S_baseES9_
     /tmp/ccwIX8qK.s:5845   .text._ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Niter_baseIT_E13iterator_typeESA_:0000000000000000 _ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Niter_baseIT_E13iterator_typeESA_
     /tmp/ccwIX8qK.s:5821   .text._ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Niter_baseIT_E13iterator_typeESB_:0000000000000000 _ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Niter_baseIT_E13iterator_typeESB_
     /tmp/ccwIX8qK.s:5869   .text._ZSt13__copy_move_aILb0EPKSt4pairIiSsEPS1_ET1_T0_S6_S5_:0000000000000000 _ZSt13__copy_move_aILb0EPKSt4pairIiSsEPS1_ET1_T0_S6_S5_
     /tmp/ccwIX8qK.s:5903   .text._ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS5_SaIS5_EEEEEEvT_SB_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS5_SaIS5_EEEEEEvT_SB_
     /tmp/ccwIX8qK.s:5949   .text._ZSt13__copy_move_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:0000000000000000 _ZSt13__copy_move_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
     /tmp/ccwIX8qK.s:5983   .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiSsES4_EET0_T_S6_S5_:0000000000000000 _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiSsES4_EET0_T_S6_S5_
     /tmp/ccwIX8qK.s:6096   .text._ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv:0000000000000000 _ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv
     /tmp/ccwIX8qK.s:6117   .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6_S5_:0000000000000000 _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6_S5_
     /tmp/ccwIX8qK.s:6229   .text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:0000000000000000 _ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
     /tmp/ccwIX8qK.s:6251   .text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:0000000000000000 _ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
     /tmp/ccwIX8qK.s:6275   .text._ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt4pairIiSsES5_EET0_T_S7_S6_:0000000000000000 _ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt4pairIiSsES5_EET0_T_S7_S6_
     /tmp/ccwIX8qK.s:6326   .text._ZNK9__gnu_cxx13new_allocatorISt4pairIiSsEE8max_sizeEv:0000000000000000 _ZNK9__gnu_cxx13new_allocatorISt4pairIiSsEE8max_sizeEv
     /tmp/ccwIX8qK.s:6348   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC2ERKS3_
     /tmp/ccwIX8qK.s:5595   .text._ZNSaISt4pairIiSsEEC2ERKS1_:0000000000000000 _ZNSaISt4pairIiSsEEC1ERKS1_
     /tmp/ccwIX8qK.s:6437   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv
     /tmp/ccwIX8qK.s:6459   .text._ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_:0000000000000000 _ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_
     /tmp/ccwIX8qK.s:6408   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv
     /tmp/ccwIX8qK.s:6371   .text._ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:0000000000000000 _ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
     /tmp/ccwIX8qK.s:6541   .text._ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_S_baseES9_:0000000000000000 _ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_S_baseES9_
     /tmp/ccwIX8qK.s:6566   .text._ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_S_baseES8_:0000000000000000 _ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_S_baseES8_
     /tmp/ccwIX8qK.s:6591   .text._ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIiSsEPS4_EET0_T_S9_S8_:0000000000000000 _ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIiSsEPS4_EET0_T_S9_S8_
     /tmp/ccwIX8qK.s:6682   .text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv
     /tmp/ccwIX8qK.s:6645   .text._ZN9__gnu_cxxneIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_:0000000000000000 _ZN9__gnu_cxxneIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
     /tmp/ccwIX8qK.s:6710   .text._ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIiSsES5_EET0_T_S7_S6_:0000000000000000 _ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIiSsES5_EET0_T_S7_S6_
     /tmp/ccwIX8qK.s:6764   .text._ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_:0000000000000000 _ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_
     /tmp/ccwIX8qK.s:6348   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC1ERKS3_
     /tmp/ccwIX8qK.s:6847   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccwIX8qK.s:6870   .data.rel.ro._ZTVN8UnitTest20DeferredTestReporterE:0000000000000000 _ZTVN8UnitTest20DeferredTestReporterE
     /tmp/ccwIX8qK.s:6884   .data.rel.ro._ZTIN8UnitTest20DeferredTestReporterE:0000000000000000 _ZTIN8UnitTest20DeferredTestReporterE
     /tmp/ccwIX8qK.s:6893   .rodata._ZTSN8UnitTest20DeferredTestReporterE:0000000000000000 _ZTSN8UnitTest20DeferredTestReporterE
     /tmp/ccwIX8qK.s:6899   .data.rel.ro:0000000000000000 _ZZL18__gthread_active_pvE20__gthread_active_ptr
                           .group:0000000000000000 _ZN8UnitTest18DeferredTestResultD5Ev
                           .group:0000000000000000 _ZNSt4pairIiSsED5Ev
                           .group:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSt4pairIiSsEC5ERKiRKSs
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED5Ev
                           .group:0000000000000000 _ZN8UnitTest18DeferredTestResultC5ERKS0_
                           .group:0000000000000000 _ZNSt4pairIiSsEC5ERKS0_
                           .group:0000000000000000 _ZNSaISt4pairIiSsEED5Ev
                           .group:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EEC5ERKS3_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC5ERKS3_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC5ERKS3_
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC5EmRKS2_
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC5ERKS2_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC5ERKS4_
                           .group:0000000000000000 _ZNSaISt4pairIiSsEEC5ERKS1_
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC5ERKS3_

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
_ZNSsD1Ev
_Unwind_Resume
__gxx_personality_v0
_ZN8UnitTest18DeferredTestResultC1EPKcS2_
__stack_chk_fail
_ZNSaIcEC1Ev
_ZNSsC1EPKcRKSaIcE
_ZNSaIcED1Ev
_ZNSsaSEPKc
_ZNSsC1ERKSs
_ZNSsaSERKSs
__cxa_end_catch
__cxa_begin_catch
__cxa_rethrow
_ZSt20__throw_length_errorPKc
_ZdlPv
_ZSt17__throw_bad_allocv
_Znwm
__cxa_pure_virtual
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTIN8UnitTest12TestReporterE
__pthread_key_create
