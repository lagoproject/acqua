   1              		.file	"XmlTestReporter.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.local	_ZStL8__ioinit
   5              		.comm	_ZStL8__ioinit,1,1
   7              	_ZN12_GLOBAL__N_111ReplaceCharERSscRKSs:
   8              	.LFB1318:
   9              		.file 1 "XmlTestReporter.cpp"
   1:XmlTestReporter.cpp **** #include "XmlTestReporter.h"
   2:XmlTestReporter.cpp **** #include "Config.h"
   3:XmlTestReporter.cpp **** 
   4:XmlTestReporter.cpp **** #include <iostream>
   5:XmlTestReporter.cpp **** #include <sstream>
   6:XmlTestReporter.cpp **** #include <string>
   7:XmlTestReporter.cpp **** 
   8:XmlTestReporter.cpp **** using std::string;
   9:XmlTestReporter.cpp **** using std::ostringstream;
  10:XmlTestReporter.cpp **** using std::ostream;
  11:XmlTestReporter.cpp **** 
  12:XmlTestReporter.cpp **** namespace {
  13:XmlTestReporter.cpp **** 
  14:XmlTestReporter.cpp **** void ReplaceChar(string& str, char c, string const& replacement)
  15:XmlTestReporter.cpp **** {
  10              		.loc 1 15 0
  11              		.cfi_startproc
  12 0000 55       		pushq	%rbp
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 6, -16
  15 0001 4889E5   		movq	%rsp, %rbp
  16              		.cfi_def_cfa_register 6
  17 0004 4883EC30 		subq	$48, %rsp
  18 0008 48897DE8 		movq	%rdi, -24(%rbp)
  19 000c 89F0     		movl	%esi, %eax
  20 000e 488955D8 		movq	%rdx, -40(%rbp)
  21 0012 8845E4   		movb	%al, -28(%rbp)
  22              	.LBB2:
  23              	.LBB3:
  16:XmlTestReporter.cpp ****     for (size_t pos = str.find(c); pos != string::npos; pos = str.find(c, pos + 1))
  24              		.loc 1 16 0
  25 0015 0FBE4DE4 		movsbl	-28(%rbp), %ecx
  26 0019 488B45E8 		movq	-24(%rbp), %rax
  27 001d BA000000 		movl	$0, %edx
  27      00
  28 0022 89CE     		movl	%ecx, %esi
  29 0024 4889C7   		movq	%rax, %rdi
  30 0027 E8000000 		call	_ZNKSs4findEcm@PLT
  30      00
  31 002c 488945F8 		movq	%rax, -8(%rbp)
  32 0030 EB3A     		jmp	.L2
  33              	.L3:
  17:XmlTestReporter.cpp ****         str.replace(pos, 1, replacement);
  34              		.loc 1 17 0 discriminator 3
  35 0032 488B55D8 		movq	-40(%rbp), %rdx
  36 0036 488B75F8 		movq	-8(%rbp), %rsi
  37 003a 488B45E8 		movq	-24(%rbp), %rax
  38 003e 4889D1   		movq	%rdx, %rcx
  39 0041 BA010000 		movl	$1, %edx
  39      00
  40 0046 4889C7   		movq	%rax, %rdi
  41 0049 E8000000 		call	_ZNSs7replaceEmmRKSs@PLT
  41      00
  16:XmlTestReporter.cpp ****     for (size_t pos = str.find(c); pos != string::npos; pos = str.find(c, pos + 1))
  42              		.loc 1 16 0 discriminator 3
  43 004e 488B45F8 		movq	-8(%rbp), %rax
  44 0052 488D5001 		leaq	1(%rax), %rdx
  45 0056 0FBE4DE4 		movsbl	-28(%rbp), %ecx
  46 005a 488B45E8 		movq	-24(%rbp), %rax
  47 005e 89CE     		movl	%ecx, %esi
  48 0060 4889C7   		movq	%rax, %rdi
  49 0063 E8000000 		call	_ZNKSs4findEcm@PLT
  49      00
  50 0068 488945F8 		movq	%rax, -8(%rbp)
  51              	.L2:
  16:XmlTestReporter.cpp ****     for (size_t pos = str.find(c); pos != string::npos; pos = str.find(c, pos + 1))
  52              		.loc 1 16 0 is_stmt 0 discriminator 1
  53 006c 48837DF8 		cmpq	$-1, -8(%rbp)
  53      FF
  54 0071 75BF     		jne	.L3
  55              	.LBE3:
  56              	.LBE2:
  18:XmlTestReporter.cpp **** }
  57              		.loc 1 18 0 is_stmt 1
  58 0073 C9       		leave
  59              		.cfi_def_cfa 7, 8
  60 0074 C3       		ret
  61              		.cfi_endproc
  62              	.LFE1318:
  64              		.section	.rodata
  65              	.LC0:
  66 0000 26616D70 		.string	"&amp;"
  66      3B00
  67              	.LC1:
  68 0006 266C743B 		.string	"&lt;"
  68      00
  69              	.LC2:
  70 000b 2667743B 		.string	"&gt;"
  70      00
  71              	.LC3:
  72 0010 2661706F 		.string	"&apos;"
  72      733B00
  73              	.LC4:
  74 0017 2671756F 		.string	"&quot;"
  74      743B00
  75              		.text
  77              	_ZN12_GLOBAL__N_19XmlEscapeERKSs:
  78              	.LFB1319:
  19:XmlTestReporter.cpp **** 
  20:XmlTestReporter.cpp **** string XmlEscape(string const& value)
  21:XmlTestReporter.cpp **** {
  79              		.loc 1 21 0
  80              		.cfi_startproc
  81              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
  82              		.cfi_lsda 0x1b,.LLSDA1319
  83 0075 55       		pushq	%rbp
  84              		.cfi_def_cfa_offset 16
  85              		.cfi_offset 6, -16
  86 0076 4889E5   		movq	%rsp, %rbp
  87              		.cfi_def_cfa_register 6
  88 0079 53       		pushq	%rbx
  89 007a 4883EC68 		subq	$104, %rsp
  90              		.cfi_offset 3, -24
  91 007e 48897D98 		movq	%rdi, -104(%rbp)
  92 0082 48897590 		movq	%rsi, -112(%rbp)
  93              		.loc 1 21 0
  94 0086 64488B04 		movq	%fs:40, %rax
  94      25280000 
  94      00
  95 008f 488945E8 		movq	%rax, -24(%rbp)
  96 0093 31C0     		xorl	%eax, %eax
  97              	.LBB4:
  22:XmlTestReporter.cpp ****     string escaped = value;
  98              		.loc 1 22 0
  99 0095 488B5590 		movq	-112(%rbp), %rdx
 100 0099 488B4598 		movq	-104(%rbp), %rax
 101 009d 4889D6   		movq	%rdx, %rsi
 102 00a0 4889C7   		movq	%rax, %rdi
 103              	.LEHB0:
 104 00a3 E8000000 		call	_ZNSsC1ERKSs@PLT
 104      00
 105              	.LEHE0:
  23:XmlTestReporter.cpp **** 
  24:XmlTestReporter.cpp ****     ReplaceChar(escaped, '&', "&amp;");
 106              		.loc 1 24 0
 107 00a8 488D45E0 		leaq	-32(%rbp), %rax
 108 00ac 4889C7   		movq	%rax, %rdi
 109 00af E8000000 		call	_ZNSaIcEC1Ev@PLT
 109      00
 110 00b4 488D55E0 		leaq	-32(%rbp), %rdx
 111 00b8 488D45A0 		leaq	-96(%rbp), %rax
 112 00bc 488D3500 		leaq	.LC0(%rip), %rsi
 112      000000
 113 00c3 4889C7   		movq	%rax, %rdi
 114              	.LEHB1:
 115 00c6 E8000000 		call	_ZNSsC1EPKcRKSaIcE@PLT
 115      00
 116              	.LEHE1:
 117              		.loc 1 24 0 is_stmt 0 discriminator 2
 118 00cb 488D55A0 		leaq	-96(%rbp), %rdx
 119 00cf 488B4598 		movq	-104(%rbp), %rax
 120 00d3 BE260000 		movl	$38, %esi
 120      00
 121 00d8 4889C7   		movq	%rax, %rdi
 122              	.LEHB2:
 123 00db E820FFFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERSscRKSs
 123      FF
 124              	.LEHE2:
 125              		.loc 1 24 0 discriminator 4
 126 00e0 488D45A0 		leaq	-96(%rbp), %rax
 127 00e4 4889C7   		movq	%rax, %rdi
 128              	.LEHB3:
 129 00e7 E8000000 		call	_ZNSsD1Ev@PLT
 129      00
 130              	.LEHE3:
 131              		.loc 1 24 0 discriminator 6
 132 00ec 488D45E0 		leaq	-32(%rbp), %rax
 133 00f0 4889C7   		movq	%rax, %rdi
 134 00f3 E8000000 		call	_ZNSaIcED1Ev@PLT
 134      00
  25:XmlTestReporter.cpp ****     ReplaceChar(escaped, '<', "&lt;");
 135              		.loc 1 25 0 is_stmt 1 discriminator 6
 136 00f8 488D45E0 		leaq	-32(%rbp), %rax
 137 00fc 4889C7   		movq	%rax, %rdi
 138 00ff E8000000 		call	_ZNSaIcEC1Ev@PLT
 138      00
 139 0104 488D55E0 		leaq	-32(%rbp), %rdx
 140 0108 488D45B0 		leaq	-80(%rbp), %rax
 141 010c 488D3500 		leaq	.LC1(%rip), %rsi
 141      000000
 142 0113 4889C7   		movq	%rax, %rdi
 143              	.LEHB4:
 144 0116 E8000000 		call	_ZNSsC1EPKcRKSaIcE@PLT
 144      00
 145              	.LEHE4:
 146              		.loc 1 25 0 is_stmt 0 discriminator 2
 147 011b 488D55B0 		leaq	-80(%rbp), %rdx
 148 011f 488B4598 		movq	-104(%rbp), %rax
 149 0123 BE3C0000 		movl	$60, %esi
 149      00
 150 0128 4889C7   		movq	%rax, %rdi
 151              	.LEHB5:
 152 012b E8D0FEFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERSscRKSs
 152      FF
 153              	.LEHE5:
 154              		.loc 1 25 0 discriminator 4
 155 0130 488D45B0 		leaq	-80(%rbp), %rax
 156 0134 4889C7   		movq	%rax, %rdi
 157              	.LEHB6:
 158 0137 E8000000 		call	_ZNSsD1Ev@PLT
 158      00
 159              	.LEHE6:
 160              		.loc 1 25 0 discriminator 6
 161 013c 488D45E0 		leaq	-32(%rbp), %rax
 162 0140 4889C7   		movq	%rax, %rdi
 163 0143 E8000000 		call	_ZNSaIcED1Ev@PLT
 163      00
  26:XmlTestReporter.cpp ****     ReplaceChar(escaped, '>', "&gt;");
 164              		.loc 1 26 0 is_stmt 1 discriminator 6
 165 0148 488D45E0 		leaq	-32(%rbp), %rax
 166 014c 4889C7   		movq	%rax, %rdi
 167 014f E8000000 		call	_ZNSaIcEC1Ev@PLT
 167      00
 168 0154 488D55E0 		leaq	-32(%rbp), %rdx
 169 0158 488D45C0 		leaq	-64(%rbp), %rax
 170 015c 488D3500 		leaq	.LC2(%rip), %rsi
 170      000000
 171 0163 4889C7   		movq	%rax, %rdi
 172              	.LEHB7:
 173 0166 E8000000 		call	_ZNSsC1EPKcRKSaIcE@PLT
 173      00
 174              	.LEHE7:
 175              		.loc 1 26 0 is_stmt 0 discriminator 2
 176 016b 488D55C0 		leaq	-64(%rbp), %rdx
 177 016f 488B4598 		movq	-104(%rbp), %rax
 178 0173 BE3E0000 		movl	$62, %esi
 178      00
 179 0178 4889C7   		movq	%rax, %rdi
 180              	.LEHB8:
 181 017b E880FEFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERSscRKSs
 181      FF
 182              	.LEHE8:
 183              		.loc 1 26 0 discriminator 4
 184 0180 488D45C0 		leaq	-64(%rbp), %rax
 185 0184 4889C7   		movq	%rax, %rdi
 186              	.LEHB9:
 187 0187 E8000000 		call	_ZNSsD1Ev@PLT
 187      00
 188              	.LEHE9:
 189              		.loc 1 26 0 discriminator 6
 190 018c 488D45E0 		leaq	-32(%rbp), %rax
 191 0190 4889C7   		movq	%rax, %rdi
 192 0193 E8000000 		call	_ZNSaIcED1Ev@PLT
 192      00
  27:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\'', "&apos;");
 193              		.loc 1 27 0 is_stmt 1 discriminator 6
 194 0198 488D45E0 		leaq	-32(%rbp), %rax
 195 019c 4889C7   		movq	%rax, %rdi
 196 019f E8000000 		call	_ZNSaIcEC1Ev@PLT
 196      00
 197 01a4 488D55E0 		leaq	-32(%rbp), %rdx
 198 01a8 488D45D0 		leaq	-48(%rbp), %rax
 199 01ac 488D3500 		leaq	.LC3(%rip), %rsi
 199      000000
 200 01b3 4889C7   		movq	%rax, %rdi
 201              	.LEHB10:
 202 01b6 E8000000 		call	_ZNSsC1EPKcRKSaIcE@PLT
 202      00
 203              	.LEHE10:
 204              		.loc 1 27 0 is_stmt 0 discriminator 2
 205 01bb 488D55D0 		leaq	-48(%rbp), %rdx
 206 01bf 488B4598 		movq	-104(%rbp), %rax
 207 01c3 BE270000 		movl	$39, %esi
 207      00
 208 01c8 4889C7   		movq	%rax, %rdi
 209              	.LEHB11:
 210 01cb E830FEFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERSscRKSs
 210      FF
 211              	.LEHE11:
 212              		.loc 1 27 0 discriminator 4
 213 01d0 488D45D0 		leaq	-48(%rbp), %rax
 214 01d4 4889C7   		movq	%rax, %rdi
 215              	.LEHB12:
 216 01d7 E8000000 		call	_ZNSsD1Ev@PLT
 216      00
 217              	.LEHE12:
 218              		.loc 1 27 0 discriminator 6
 219 01dc 488D45E0 		leaq	-32(%rbp), %rax
 220 01e0 4889C7   		movq	%rax, %rdi
 221 01e3 E8000000 		call	_ZNSaIcED1Ev@PLT
 221      00
  28:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\"', "&quot;");
 222              		.loc 1 28 0 is_stmt 1 discriminator 6
 223 01e8 488D45D0 		leaq	-48(%rbp), %rax
 224 01ec 4889C7   		movq	%rax, %rdi
 225 01ef E8000000 		call	_ZNSaIcEC1Ev@PLT
 225      00
 226 01f4 488D55D0 		leaq	-48(%rbp), %rdx
 227 01f8 488D45E0 		leaq	-32(%rbp), %rax
 228 01fc 488D3500 		leaq	.LC4(%rip), %rsi
 228      000000
 229 0203 4889C7   		movq	%rax, %rdi
 230              	.LEHB13:
 231 0206 E8000000 		call	_ZNSsC1EPKcRKSaIcE@PLT
 231      00
 232              	.LEHE13:
 233              		.loc 1 28 0 is_stmt 0 discriminator 2
 234 020b 488D55E0 		leaq	-32(%rbp), %rdx
 235 020f 488B4598 		movq	-104(%rbp), %rax
 236 0213 BE220000 		movl	$34, %esi
 236      00
 237 0218 4889C7   		movq	%rax, %rdi
 238              	.LEHB14:
 239 021b E8E0FDFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERSscRKSs
 239      FF
 240              	.LEHE14:
 241              		.loc 1 28 0 discriminator 4
 242 0220 488D45E0 		leaq	-32(%rbp), %rax
 243 0224 4889C7   		movq	%rax, %rdi
 244              	.LEHB15:
 245 0227 E8000000 		call	_ZNSsD1Ev@PLT
 245      00
 246              	.LEHE15:
 247              		.loc 1 28 0 discriminator 6
 248 022c 488D45D0 		leaq	-48(%rbp), %rax
 249 0230 4889C7   		movq	%rax, %rdi
 250 0233 E8000000 		call	_ZNSaIcED1Ev@PLT
 250      00
  29:XmlTestReporter.cpp ****  
  30:XmlTestReporter.cpp ****     return escaped;
 251              		.loc 1 30 0 is_stmt 1 discriminator 6
 252 0238 90       		nop
 253              	.LBE4:
  31:XmlTestReporter.cpp **** }
 254              		.loc 1 31 0 discriminator 6
 255 0239 488B4598 		movq	-104(%rbp), %rax
 256 023d 488B4DE8 		movq	-24(%rbp), %rcx
 257 0241 6448330C 		xorq	%fs:40, %rcx
 257      25280000 
 257      00
 258 024a 0F84CC00 		je	.L17
 258      0000
 259 0250 E9C20000 		jmp	.L28
 259      00
 260              	.L19:
 261 0255 4889C3   		movq	%rax, %rbx
 262              	.LBB5:
  24:XmlTestReporter.cpp ****     ReplaceChar(escaped, '<', "&lt;");
 263              		.loc 1 24 0
 264 0258 488D45A0 		leaq	-96(%rbp), %rax
 265 025c 4889C7   		movq	%rax, %rdi
 266 025f E8000000 		call	_ZNSsD1Ev@PLT
 266      00
 267 0264 EB03     		jmp	.L7
 268              	.L18:
 269 0266 4889C3   		movq	%rax, %rbx
 270              	.L7:
  24:XmlTestReporter.cpp ****     ReplaceChar(escaped, '<', "&lt;");
 271              		.loc 1 24 0 is_stmt 0 discriminator 5
 272 0269 488D45E0 		leaq	-32(%rbp), %rax
 273 026d 4889C7   		movq	%rax, %rdi
 274 0270 E8000000 		call	_ZNSaIcED1Ev@PLT
 274      00
 275 0275 E9860000 		jmp	.L8
 275      00
 276              	.L21:
 277 027a 4889C3   		movq	%rax, %rbx
  25:XmlTestReporter.cpp ****     ReplaceChar(escaped, '>', "&gt;");
 278              		.loc 1 25 0 is_stmt 1
 279 027d 488D45B0 		leaq	-80(%rbp), %rax
 280 0281 4889C7   		movq	%rax, %rdi
 281 0284 E8000000 		call	_ZNSsD1Ev@PLT
 281      00
 282 0289 EB03     		jmp	.L10
 283              	.L20:
 284 028b 4889C3   		movq	%rax, %rbx
 285              	.L10:
  25:XmlTestReporter.cpp ****     ReplaceChar(escaped, '>', "&gt;");
 286              		.loc 1 25 0 is_stmt 0 discriminator 5
 287 028e 488D45E0 		leaq	-32(%rbp), %rax
 288 0292 4889C7   		movq	%rax, %rdi
 289 0295 E8000000 		call	_ZNSaIcED1Ev@PLT
 289      00
 290 029a EB64     		jmp	.L8
 291              	.L23:
 292 029c 4889C3   		movq	%rax, %rbx
  26:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\'', "&apos;");
 293              		.loc 1 26 0 is_stmt 1
 294 029f 488D45C0 		leaq	-64(%rbp), %rax
 295 02a3 4889C7   		movq	%rax, %rdi
 296 02a6 E8000000 		call	_ZNSsD1Ev@PLT
 296      00
 297 02ab EB03     		jmp	.L12
 298              	.L22:
 299 02ad 4889C3   		movq	%rax, %rbx
 300              	.L12:
  26:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\'', "&apos;");
 301              		.loc 1 26 0 is_stmt 0 discriminator 5
 302 02b0 488D45E0 		leaq	-32(%rbp), %rax
 303 02b4 4889C7   		movq	%rax, %rdi
 304 02b7 E8000000 		call	_ZNSaIcED1Ev@PLT
 304      00
 305 02bc EB42     		jmp	.L8
 306              	.L25:
 307 02be 4889C3   		movq	%rax, %rbx
  27:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\"', "&quot;");
 308              		.loc 1 27 0 is_stmt 1
 309 02c1 488D45D0 		leaq	-48(%rbp), %rax
 310 02c5 4889C7   		movq	%rax, %rdi
 311 02c8 E8000000 		call	_ZNSsD1Ev@PLT
 311      00
 312 02cd EB03     		jmp	.L14
 313              	.L24:
 314 02cf 4889C3   		movq	%rax, %rbx
 315              	.L14:
  27:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\"', "&quot;");
 316              		.loc 1 27 0 is_stmt 0 discriminator 5
 317 02d2 488D45E0 		leaq	-32(%rbp), %rax
 318 02d6 4889C7   		movq	%rax, %rdi
 319 02d9 E8000000 		call	_ZNSaIcED1Ev@PLT
 319      00
 320 02de EB20     		jmp	.L8
 321              	.L27:
 322 02e0 4889C3   		movq	%rax, %rbx
  28:XmlTestReporter.cpp ****  
 323              		.loc 1 28 0 is_stmt 1
 324 02e3 488D45E0 		leaq	-32(%rbp), %rax
 325 02e7 4889C7   		movq	%rax, %rdi
 326 02ea E8000000 		call	_ZNSsD1Ev@PLT
 326      00
 327 02ef EB03     		jmp	.L16
 328              	.L26:
 329 02f1 4889C3   		movq	%rax, %rbx
 330              	.L16:
  28:XmlTestReporter.cpp ****  
 331              		.loc 1 28 0 is_stmt 0 discriminator 5
 332 02f4 488D45D0 		leaq	-48(%rbp), %rax
 333 02f8 4889C7   		movq	%rax, %rdi
 334 02fb E8000000 		call	_ZNSaIcED1Ev@PLT
 334      00
 335              	.L8:
 336 0300 488B4598 		movq	-104(%rbp), %rax
 337 0304 4889C7   		movq	%rax, %rdi
 338 0307 E8000000 		call	_ZNSsD1Ev@PLT
 338      00
 339 030c 4889D8   		movq	%rbx, %rax
 340 030f 4889C7   		movq	%rax, %rdi
 341              	.LEHB16:
 342 0312 E8000000 		call	_Unwind_Resume@PLT
 342      00
 343              	.LEHE16:
 344              	.L28:
 345              	.LBE5:
 346              		.loc 1 31 0 is_stmt 1
 347 0317 E8000000 		call	__stack_chk_fail@PLT
 347      00
 348              	.L17:
 349 031c 4883C468 		addq	$104, %rsp
 350 0320 5B       		popq	%rbx
 351 0321 5D       		popq	%rbp
 352              		.cfi_def_cfa 7, 8
 353 0322 C3       		ret
 354              		.cfi_endproc
 355              	.LFE1319:
 356              		.globl	__gxx_personality_v0
 357              		.section	.gcc_except_table,"a",@progbits
 358              	.LLSDA1319:
 359 0000 FF       		.byte	0xff
 360 0001 FF       		.byte	0xff
 361 0002 01       		.byte	0x1
 362 0003 60       		.uleb128 .LLSDACSE1319-.LLSDACSB1319
 363              	.LLSDACSB1319:
 364 0004 2E       		.uleb128 .LEHB0-.LFB1319
 365 0005 05       		.uleb128 .LEHE0-.LEHB0
 366 0006 00       		.uleb128 0
 367 0007 00       		.uleb128 0
 368 0008 51       		.uleb128 .LEHB1-.LFB1319
 369 0009 05       		.uleb128 .LEHE1-.LEHB1
 370 000a F103     		.uleb128 .L18-.LFB1319
 371 000c 00       		.uleb128 0
 372 000d 66       		.uleb128 .LEHB2-.LFB1319
 373 000e 05       		.uleb128 .LEHE2-.LEHB2
 374 000f E003     		.uleb128 .L19-.LFB1319
 375 0011 00       		.uleb128 0
 376 0012 72       		.uleb128 .LEHB3-.LFB1319
 377 0013 05       		.uleb128 .LEHE3-.LEHB3
 378 0014 F103     		.uleb128 .L18-.LFB1319
 379 0016 00       		.uleb128 0
 380 0017 A101     		.uleb128 .LEHB4-.LFB1319
 381 0019 05       		.uleb128 .LEHE4-.LEHB4
 382 001a 9604     		.uleb128 .L20-.LFB1319
 383 001c 00       		.uleb128 0
 384 001d B601     		.uleb128 .LEHB5-.LFB1319
 385 001f 05       		.uleb128 .LEHE5-.LEHB5
 386 0020 8504     		.uleb128 .L21-.LFB1319
 387 0022 00       		.uleb128 0
 388 0023 C201     		.uleb128 .LEHB6-.LFB1319
 389 0025 05       		.uleb128 .LEHE6-.LEHB6
 390 0026 9604     		.uleb128 .L20-.LFB1319
 391 0028 00       		.uleb128 0
 392 0029 F101     		.uleb128 .LEHB7-.LFB1319
 393 002b 05       		.uleb128 .LEHE7-.LEHB7
 394 002c B804     		.uleb128 .L22-.LFB1319
 395 002e 00       		.uleb128 0
 396 002f 8602     		.uleb128 .LEHB8-.LFB1319
 397 0031 05       		.uleb128 .LEHE8-.LEHB8
 398 0032 A704     		.uleb128 .L23-.LFB1319
 399 0034 00       		.uleb128 0
 400 0035 9202     		.uleb128 .LEHB9-.LFB1319
 401 0037 05       		.uleb128 .LEHE9-.LEHB9
 402 0038 B804     		.uleb128 .L22-.LFB1319
 403 003a 00       		.uleb128 0
 404 003b C102     		.uleb128 .LEHB10-.LFB1319
 405 003d 05       		.uleb128 .LEHE10-.LEHB10
 406 003e DA04     		.uleb128 .L24-.LFB1319
 407 0040 00       		.uleb128 0
 408 0041 D602     		.uleb128 .LEHB11-.LFB1319
 409 0043 05       		.uleb128 .LEHE11-.LEHB11
 410 0044 C904     		.uleb128 .L25-.LFB1319
 411 0046 00       		.uleb128 0
 412 0047 E202     		.uleb128 .LEHB12-.LFB1319
 413 0049 05       		.uleb128 .LEHE12-.LEHB12
 414 004a DA04     		.uleb128 .L24-.LFB1319
 415 004c 00       		.uleb128 0
 416 004d 9103     		.uleb128 .LEHB13-.LFB1319
 417 004f 05       		.uleb128 .LEHE13-.LEHB13
 418 0050 FC04     		.uleb128 .L26-.LFB1319
 419 0052 00       		.uleb128 0
 420 0053 A603     		.uleb128 .LEHB14-.LFB1319
 421 0055 05       		.uleb128 .LEHE14-.LEHB14
 422 0056 EB04     		.uleb128 .L27-.LFB1319
 423 0058 00       		.uleb128 0
 424 0059 B203     		.uleb128 .LEHB15-.LFB1319
 425 005b 05       		.uleb128 .LEHE15-.LEHB15
 426 005c FC04     		.uleb128 .L26-.LFB1319
 427 005e 00       		.uleb128 0
 428 005f 9D05     		.uleb128 .LEHB16-.LFB1319
 429 0061 05       		.uleb128 .LEHE16-.LEHB16
 430 0062 00       		.uleb128 0
 431 0063 00       		.uleb128 0
 432              	.LLSDACSE1319:
 433              		.text
 435              		.section	.rodata
 436              	.LC5:
 437 001e 2800     		.string	"("
 438              	.LC6:
 439 0020 29203A20 		.string	") : "
 439      00
 440              		.text
 442              	_ZN12_GLOBAL__N_119BuildFailureMessageERKSsiS1_:
 443              	.LFB1320:
  32:XmlTestReporter.cpp **** 
  33:XmlTestReporter.cpp **** string BuildFailureMessage(string const& file, int line, string const& message)
  34:XmlTestReporter.cpp **** {
 444              		.loc 1 34 0
 445              		.cfi_startproc
 446              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 447              		.cfi_lsda 0x1b,.LLSDA1320
 448 0323 55       		pushq	%rbp
 449              		.cfi_def_cfa_offset 16
 450              		.cfi_offset 6, -16
 451 0324 4889E5   		movq	%rsp, %rbp
 452              		.cfi_def_cfa_register 6
 453 0327 53       		pushq	%rbx
 454 0328 4881EC98 		subq	$408, %rsp
 454      010000
 455              		.cfi_offset 3, -24
 456 032f 4889BD78 		movq	%rdi, -392(%rbp)
 456      FEFFFF
 457 0336 4889B570 		movq	%rsi, -400(%rbp)
 457      FEFFFF
 458 033d 89956CFE 		movl	%edx, -404(%rbp)
 458      FFFF
 459 0343 48898D60 		movq	%rcx, -416(%rbp)
 459      FEFFFF
 460              		.loc 1 34 0
 461 034a 64488B04 		movq	%fs:40, %rax
 461      25280000 
 461      00
 462 0353 488945E8 		movq	%rax, -24(%rbp)
 463 0357 31C0     		xorl	%eax, %eax
 464              	.LBB6:
  35:XmlTestReporter.cpp ****     ostringstream failureMessage;
 465              		.loc 1 35 0
 466 0359 488D8580 		leaq	-384(%rbp), %rax
 466      FEFFFF
 467 0360 BE100000 		movl	$16, %esi
 467      00
 468 0365 4889C7   		movq	%rax, %rdi
 469              	.LEHB17:
 470 0368 E8000000 		call	_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode@PLT
 470      00
 471              	.LEHE17:
  36:XmlTestReporter.cpp ****     failureMessage << file << "(" << line << ") : " << message;
 472              		.loc 1 36 0
 473 036d 488B9570 		movq	-400(%rbp), %rdx
 473      FEFFFF
 474 0374 488D8580 		leaq	-384(%rbp), %rax
 474      FEFFFF
 475 037b 4889D6   		movq	%rdx, %rsi
 476 037e 4889C7   		movq	%rax, %rdi
 477              	.LEHB18:
 478 0381 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@PLT
 478      00
 479 0386 488D3500 		leaq	.LC5(%rip), %rsi
 479      000000
 480 038d 4889C7   		movq	%rax, %rdi
 481 0390 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 481      00
 482              		.loc 1 36 0 is_stmt 0 discriminator 1
 483 0395 4889C2   		movq	%rax, %rdx
 484 0398 8B856CFE 		movl	-404(%rbp), %eax
 484      FFFF
 485 039e 89C6     		movl	%eax, %esi
 486 03a0 4889D7   		movq	%rdx, %rdi
 487 03a3 E8000000 		call	_ZNSolsEi@PLT
 487      00
 488              		.loc 1 36 0 discriminator 2
 489 03a8 488D3500 		leaq	.LC6(%rip), %rsi
 489      000000
 490 03af 4889C7   		movq	%rax, %rdi
 491 03b2 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 491      00
 492              		.loc 1 36 0 discriminator 3
 493 03b7 4889C2   		movq	%rax, %rdx
 494 03ba 488B8560 		movq	-416(%rbp), %rax
 494      FEFFFF
 495 03c1 4889C6   		movq	%rax, %rsi
 496 03c4 4889D7   		movq	%rdx, %rdi
 497 03c7 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@PLT
 497      00
  37:XmlTestReporter.cpp ****     return failureMessage.str();
 498              		.loc 1 37 0 is_stmt 1
 499 03cc 488B8578 		movq	-392(%rbp), %rax
 499      FEFFFF
 500 03d3 488D9580 		leaq	-384(%rbp), %rdx
 500      FEFFFF
 501 03da 4889D6   		movq	%rdx, %rsi
 502 03dd 4889C7   		movq	%rax, %rdi
 503 03e0 E8000000 		call	_ZNKSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv@PLT
 503      00
 504              	.LEHE18:
 505 03e5 90       		nop
 506 03e6 488D8580 		leaq	-384(%rbp), %rax
 506      FEFFFF
 507 03ed 4889C7   		movq	%rax, %rdi
 508              	.LEHB19:
 509 03f0 E8000000 		call	_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 509      00
 510              	.LEHE19:
 511              	.LBE6:
  38:XmlTestReporter.cpp **** }
 512              		.loc 1 38 0
 513 03f5 488B8578 		movq	-392(%rbp), %rax
 513      FEFFFF
 514 03fc 488B4DE8 		movq	-24(%rbp), %rcx
 515 0400 6448330C 		xorq	%fs:40, %rcx
 515      25280000 
 515      00
 516 0409 7424     		je	.L32
 517 040b EB1D     		jmp	.L34
 518              	.L33:
 519 040d 4889C3   		movq	%rax, %rbx
 520              	.LBB7:
  37:XmlTestReporter.cpp ****     return failureMessage.str();
 521              		.loc 1 37 0
 522 0410 488D8580 		leaq	-384(%rbp), %rax
 522      FEFFFF
 523 0417 4889C7   		movq	%rax, %rdi
 524 041a E8000000 		call	_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 524      00
 525 041f 4889D8   		movq	%rbx, %rax
 526 0422 4889C7   		movq	%rax, %rdi
 527              	.LEHB20:
 528 0425 E8000000 		call	_Unwind_Resume@PLT
 528      00
 529              	.LEHE20:
 530              	.L34:
 531              	.LBE7:
 532              		.loc 1 38 0
 533 042a E8000000 		call	__stack_chk_fail@PLT
 533      00
 534              	.L32:
 535 042f 4881C498 		addq	$408, %rsp
 535      010000
 536 0436 5B       		popq	%rbx
 537 0437 5D       		popq	%rbp
 538              		.cfi_def_cfa 7, 8
 539 0438 C3       		ret
 540              		.cfi_endproc
 541              	.LFE1320:
 542              		.section	.gcc_except_table
 543              	.LLSDA1320:
 544 0064 FF       		.byte	0xff
 545 0065 FF       		.byte	0xff
 546 0066 01       		.byte	0x1
 547 0067 13       		.uleb128 .LLSDACSE1320-.LLSDACSB1320
 548              	.LLSDACSB1320:
 549 0068 45       		.uleb128 .LEHB17-.LFB1320
 550 0069 05       		.uleb128 .LEHE17-.LEHB17
 551 006a 00       		.uleb128 0
 552 006b 00       		.uleb128 0
 553 006c 5E       		.uleb128 .LEHB18-.LFB1320
 554 006d 64       		.uleb128 .LEHE18-.LEHB18
 555 006e EA01     		.uleb128 .L33-.LFB1320
 556 0070 00       		.uleb128 0
 557 0071 CD01     		.uleb128 .LEHB19-.LFB1320
 558 0073 05       		.uleb128 .LEHE19-.LEHB19
 559 0074 00       		.uleb128 0
 560 0075 00       		.uleb128 0
 561 0076 8202     		.uleb128 .LEHB20-.LFB1320
 562 0078 05       		.uleb128 .LEHE20-.LEHB20
 563 0079 00       		.uleb128 0
 564 007a 00       		.uleb128 0
 565              	.LLSDACSE1320:
 566              		.text
 568              		.section	.text._ZN8UnitTest12TestReporterC2Ev,"axG",@progbits,_ZN8UnitTest12TestReporterC5Ev,comda
 569              		.align 2
 570              		.weak	_ZN8UnitTest12TestReporterC2Ev
 572              	_ZN8UnitTest12TestReporterC2Ev:
 573              	.LFB1324:
 574              		.file 2 "TestReporter.h"
   1:TestReporter.h **** #ifndef UNITTEST_TESTREPORTER_H
   2:TestReporter.h **** #define UNITTEST_TESTREPORTER_H
   3:TestReporter.h **** 
   4:TestReporter.h **** namespace UnitTest {
   5:TestReporter.h **** 
   6:TestReporter.h **** class TestDetails;
   7:TestReporter.h **** 
   8:TestReporter.h **** class TestReporter
 575              		.loc 2 8 0
 576              		.cfi_startproc
 577 0000 55       		pushq	%rbp
 578              		.cfi_def_cfa_offset 16
 579              		.cfi_offset 6, -16
 580 0001 4889E5   		movq	%rsp, %rbp
 581              		.cfi_def_cfa_register 6
 582 0004 48897DF8 		movq	%rdi, -8(%rbp)
 583              	.LBB8:
 584              		.loc 2 8 0
 585 0008 488B45F8 		movq	-8(%rbp), %rax
 586 000c 488B1500 		movq	_ZTVN8UnitTest12TestReporterE@GOTPCREL(%rip), %rdx
 586      000000
 587 0013 488D5210 		leaq	16(%rdx), %rdx
 588 0017 488910   		movq	%rdx, (%rax)
 589              	.LBE8:
 590 001a 5D       		popq	%rbp
 591              		.cfi_def_cfa 7, 8
 592 001b C3       		ret
 593              		.cfi_endproc
 594              	.LFE1324:
 596              		.weak	_ZN8UnitTest12TestReporterC1Ev
 597              		.set	_ZN8UnitTest12TestReporterC1Ev,_ZN8UnitTest12TestReporterC2Ev
 598              		.section	.text._ZN8UnitTest20DeferredTestReporterC2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 599              		.align 2
 600              		.weak	_ZN8UnitTest20DeferredTestReporterC2Ev
 602              	_ZN8UnitTest20DeferredTestReporterC2Ev:
 603              	.LFB1326:
 604              		.file 3 "DeferredTestReporter.h"
   1:DeferredTestReporter.h **** #ifndef UNITTEST_DEFERREDTESTREPORTER_H
   2:DeferredTestReporter.h **** #define UNITTEST_DEFERREDTESTREPORTER_H
   3:DeferredTestReporter.h **** 
   4:DeferredTestReporter.h **** #include "TestReporter.h"
   5:DeferredTestReporter.h **** #include "DeferredTestResult.h"
   6:DeferredTestReporter.h **** 
   7:DeferredTestReporter.h **** #include <vector>
   8:DeferredTestReporter.h **** 
   9:DeferredTestReporter.h **** namespace UnitTest
  10:DeferredTestReporter.h **** {
  11:DeferredTestReporter.h **** 
  12:DeferredTestReporter.h **** class DeferredTestReporter : public TestReporter
 605              		.loc 3 12 0
 606              		.cfi_startproc
 607              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 608              		.cfi_lsda 0x1b,.LLSDA1326
 609 0000 55       		pushq	%rbp
 610              		.cfi_def_cfa_offset 16
 611              		.cfi_offset 6, -16
 612 0001 4889E5   		movq	%rsp, %rbp
 613              		.cfi_def_cfa_register 6
 614 0004 53       		pushq	%rbx
 615 0005 4883EC18 		subq	$24, %rsp
 616              		.cfi_offset 3, -24
 617 0009 48897DE8 		movq	%rdi, -24(%rbp)
 618              	.LBB9:
 619              		.loc 3 12 0
 620 000d 488B45E8 		movq	-24(%rbp), %rax
 621 0011 4889C7   		movq	%rax, %rdi
 622 0014 E8000000 		call	_ZN8UnitTest12TestReporterC2Ev@PLT
 622      00
 623 0019 488B45E8 		movq	-24(%rbp), %rax
 624 001d 488B1500 		movq	_ZTVN8UnitTest20DeferredTestReporterE@GOTPCREL(%rip), %rdx
 624      000000
 625 0024 488D5210 		leaq	16(%rdx), %rdx
 626 0028 488910   		movq	%rdx, (%rax)
 627 002b 488B45E8 		movq	-24(%rbp), %rax
 628 002f 4883C008 		addq	$8, %rax
 629 0033 4889C7   		movq	%rax, %rdi
 630              	.LEHB21:
 631 0036 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev@PLT
 631      00
 632              	.LEHE21:
 633              	.LBE9:
 634 003b EB1A     		jmp	.L39
 635              	.L38:
 636 003d 4889C3   		movq	%rax, %rbx
 637              	.LBB10:
 638 0040 488B45E8 		movq	-24(%rbp), %rax
 639 0044 4889C7   		movq	%rax, %rdi
 640 0047 E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 640      00
 641 004c 4889D8   		movq	%rbx, %rax
 642 004f 4889C7   		movq	%rax, %rdi
 643              	.LEHB22:
 644 0052 E8000000 		call	_Unwind_Resume@PLT
 644      00
 645              	.LEHE22:
 646              	.L39:
 647              	.LBE10:
 648 0057 4883C418 		addq	$24, %rsp
 649 005b 5B       		popq	%rbx
 650 005c 5D       		popq	%rbp
 651              		.cfi_def_cfa 7, 8
 652 005d C3       		ret
 653              		.cfi_endproc
 654              	.LFE1326:
 655              		.section	.gcc_except_table
 656              	.LLSDA1326:
 657 007b FF       		.byte	0xff
 658 007c FF       		.byte	0xff
 659 007d 01       		.byte	0x1
 660 007e 08       		.uleb128 .LLSDACSE1326-.LLSDACSB1326
 661              	.LLSDACSB1326:
 662 007f 36       		.uleb128 .LEHB21-.LFB1326
 663 0080 05       		.uleb128 .LEHE21-.LEHB21
 664 0081 3D       		.uleb128 .L38-.LFB1326
 665 0082 00       		.uleb128 0
 666 0083 52       		.uleb128 .LEHB22-.LFB1326
 667 0084 05       		.uleb128 .LEHE22-.LEHB22
 668 0085 00       		.uleb128 0
 669 0086 00       		.uleb128 0
 670              	.LLSDACSE1326:
 671              		.section	.text._ZN8UnitTest20DeferredTestReporterC2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 673              		.weak	_ZN8UnitTest20DeferredTestReporterC1Ev
 674              		.set	_ZN8UnitTest20DeferredTestReporterC1Ev,_ZN8UnitTest20DeferredTestReporterC2Ev
 675              		.section	.text._ZN8UnitTest20DeferredTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 676              		.align 2
 677              		.weak	_ZN8UnitTest20DeferredTestReporterD2Ev
 679              	_ZN8UnitTest20DeferredTestReporterD2Ev:
 680              	.LFB1329:
 681              		.loc 3 12 0
 682              		.cfi_startproc
 683              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 684              		.cfi_lsda 0x1b,.LLSDA1329
 685 0000 55       		pushq	%rbp
 686              		.cfi_def_cfa_offset 16
 687              		.cfi_offset 6, -16
 688 0001 4889E5   		movq	%rsp, %rbp
 689              		.cfi_def_cfa_register 6
 690 0004 53       		pushq	%rbx
 691 0005 4883EC18 		subq	$24, %rsp
 692              		.cfi_offset 3, -24
 693 0009 48897DE8 		movq	%rdi, -24(%rbp)
 694              	.LBB11:
 695              		.loc 3 12 0
 696 000d 488B45E8 		movq	-24(%rbp), %rax
 697 0011 488B1500 		movq	_ZTVN8UnitTest20DeferredTestReporterE@GOTPCREL(%rip), %rdx
 697      000000
 698 0018 488D5210 		leaq	16(%rdx), %rdx
 699 001c 488910   		movq	%rdx, (%rax)
 700 001f 488B45E8 		movq	-24(%rbp), %rax
 701 0023 4883C008 		addq	$8, %rax
 702 0027 4889C7   		movq	%rax, %rdi
 703              	.LEHB23:
 704 002a E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev@PLT
 704      00
 705              	.LEHE23:
 706              		.loc 3 12 0 is_stmt 0 discriminator 2
 707 002f 488B45E8 		movq	-24(%rbp), %rax
 708 0033 4889C7   		movq	%rax, %rdi
 709              	.LEHB24:
 710 0036 E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 710      00
 711              	.LEHE24:
 712              	.LBE11:
 713 003b B8000000 		movl	$0, %eax
 713      00
 714 0040 85C0     		testl	%eax, %eax
 715 0042 7428     		je	.L45
 716              		.loc 3 12 0 discriminator 6
 717 0044 488B45E8 		movq	-24(%rbp), %rax
 718 0048 4889C7   		movq	%rax, %rdi
 719 004b E8000000 		call	_ZdlPv@PLT
 719      00
 720 0050 EB1A     		jmp	.L45
 721              	.L44:
 722 0052 4889C3   		movq	%rax, %rbx
 723              	.LBB12:
 724              		.loc 3 12 0
 725 0055 488B45E8 		movq	-24(%rbp), %rax
 726 0059 4889C7   		movq	%rax, %rdi
 727 005c E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 727      00
 728 0061 4889D8   		movq	%rbx, %rax
 729 0064 4889C7   		movq	%rax, %rdi
 730              	.LEHB25:
 731 0067 E8000000 		call	_Unwind_Resume@PLT
 731      00
 732              	.LEHE25:
 733              	.L45:
 734              	.LBE12:
 735 006c 4883C418 		addq	$24, %rsp
 736 0070 5B       		popq	%rbx
 737 0071 5D       		popq	%rbp
 738              		.cfi_def_cfa 7, 8
 739 0072 C3       		ret
 740              		.cfi_endproc
 741              	.LFE1329:
 742              		.section	.gcc_except_table
 743              	.LLSDA1329:
 744 0087 FF       		.byte	0xff
 745 0088 FF       		.byte	0xff
 746 0089 01       		.byte	0x1
 747 008a 0C       		.uleb128 .LLSDACSE1329-.LLSDACSB1329
 748              	.LLSDACSB1329:
 749 008b 2A       		.uleb128 .LEHB23-.LFB1329
 750 008c 05       		.uleb128 .LEHE23-.LEHB23
 751 008d 52       		.uleb128 .L44-.LFB1329
 752 008e 00       		.uleb128 0
 753 008f 36       		.uleb128 .LEHB24-.LFB1329
 754 0090 05       		.uleb128 .LEHE24-.LEHB24
 755 0091 00       		.uleb128 0
 756 0092 00       		.uleb128 0
 757 0093 67       		.uleb128 .LEHB25-.LFB1329
 758 0094 05       		.uleb128 .LEHE25-.LEHB25
 759 0095 00       		.uleb128 0
 760 0096 00       		.uleb128 0
 761              	.LLSDACSE1329:
 762              		.section	.text._ZN8UnitTest20DeferredTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 764              		.weak	_ZN8UnitTest20DeferredTestReporterD1Ev
 765              		.set	_ZN8UnitTest20DeferredTestReporterD1Ev,_ZN8UnitTest20DeferredTestReporterD2Ev
 766              		.section	.text._ZN8UnitTest20DeferredTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 767              		.align 2
 768              		.weak	_ZN8UnitTest20DeferredTestReporterD0Ev
 770              	_ZN8UnitTest20DeferredTestReporterD0Ev:
 771              	.LFB1331:
 772              		.loc 3 12 0 is_stmt 1
 773              		.cfi_startproc
 774 0000 55       		pushq	%rbp
 775              		.cfi_def_cfa_offset 16
 776              		.cfi_offset 6, -16
 777 0001 4889E5   		movq	%rsp, %rbp
 778              		.cfi_def_cfa_register 6
 779 0004 4883EC10 		subq	$16, %rsp
 780 0008 48897DF8 		movq	%rdi, -8(%rbp)
 781              		.loc 3 12 0
 782 000c 488B45F8 		movq	-8(%rbp), %rax
 783 0010 4889C7   		movq	%rax, %rdi
 784 0013 E8000000 		call	_ZN8UnitTest20DeferredTestReporterD1Ev@PLT
 784      00
 785 0018 488B45F8 		movq	-8(%rbp), %rax
 786 001c 4889C7   		movq	%rax, %rdi
 787 001f E8000000 		call	_ZdlPv@PLT
 787      00
 788 0024 C9       		leave
 789              		.cfi_def_cfa 7, 8
 790 0025 C3       		ret
 791              		.cfi_endproc
 792              	.LFE1331:
 794              		.text
 795 0439 90       		.align 2
 796              		.globl	_ZN8UnitTest15XmlTestReporterC2ERSo
 798              	_ZN8UnitTest15XmlTestReporterC2ERSo:
 799              	.LFB1332:
  39:XmlTestReporter.cpp **** 
  40:XmlTestReporter.cpp **** }
  41:XmlTestReporter.cpp **** 
  42:XmlTestReporter.cpp **** namespace UnitTest {
  43:XmlTestReporter.cpp **** 
  44:XmlTestReporter.cpp **** XmlTestReporter::XmlTestReporter(ostream& ostream)
 800              		.loc 1 44 0
 801              		.cfi_startproc
 802 043a 55       		pushq	%rbp
 803              		.cfi_def_cfa_offset 16
 804              		.cfi_offset 6, -16
 805 043b 4889E5   		movq	%rsp, %rbp
 806              		.cfi_def_cfa_register 6
 807 043e 4883EC10 		subq	$16, %rsp
 808 0442 48897DF8 		movq	%rdi, -8(%rbp)
 809 0446 488975F0 		movq	%rsi, -16(%rbp)
 810              	.LBB13:
  45:XmlTestReporter.cpp ****     : m_ostream(ostream)
 811              		.loc 1 45 0
 812 044a 488B45F8 		movq	-8(%rbp), %rax
 813 044e 4889C7   		movq	%rax, %rdi
 814 0451 E8000000 		call	_ZN8UnitTest20DeferredTestReporterC2Ev@PLT
 814      00
 815 0456 488B45F8 		movq	-8(%rbp), %rax
 816 045a 488B1500 		movq	_ZTVN8UnitTest15XmlTestReporterE@GOTPCREL(%rip), %rdx
 816      000000
 817 0461 488D5210 		leaq	16(%rdx), %rdx
 818 0465 488910   		movq	%rdx, (%rax)
 819 0468 488B45F8 		movq	-8(%rbp), %rax
 820 046c 488B55F0 		movq	-16(%rbp), %rdx
 821 0470 48895020 		movq	%rdx, 32(%rax)
 822              	.LBE13:
  46:XmlTestReporter.cpp **** {
  47:XmlTestReporter.cpp **** }
 823              		.loc 1 47 0
 824 0474 C9       		leave
 825              		.cfi_def_cfa 7, 8
 826 0475 C3       		ret
 827              		.cfi_endproc
 828              	.LFE1332:
 830              		.globl	_ZN8UnitTest15XmlTestReporterC1ERSo
 831              		.set	_ZN8UnitTest15XmlTestReporterC1ERSo,_ZN8UnitTest15XmlTestReporterC2ERSo
 832              		.align 2
 833              		.globl	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
 835              	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif:
 836              	.LFB1334:
  48:XmlTestReporter.cpp **** 
  49:XmlTestReporter.cpp **** void XmlTestReporter::ReportSummary(int totalTestCount, int failedTestCount,
  50:XmlTestReporter.cpp ****                                     int failureCount, float secondsElapsed)
  51:XmlTestReporter.cpp **** {
 837              		.loc 1 51 0
 838              		.cfi_startproc
 839 0476 55       		pushq	%rbp
 840              		.cfi_def_cfa_offset 16
 841              		.cfi_offset 6, -16
 842 0477 4889E5   		movq	%rsp, %rbp
 843              		.cfi_def_cfa_register 6
 844 047a 4883EC50 		subq	$80, %rsp
 845 047e 48897DC8 		movq	%rdi, -56(%rbp)
 846 0482 8975C4   		movl	%esi, -60(%rbp)
 847 0485 8955C0   		movl	%edx, -64(%rbp)
 848 0488 894DBC   		movl	%ecx, -68(%rbp)
 849 048b F30F1145 		movss	%xmm0, -72(%rbp)
 849      B8
 850              		.loc 1 51 0
 851 0490 64488B04 		movq	%fs:40, %rax
 851      25280000 
 851      00
 852 0499 488945F8 		movq	%rax, -8(%rbp)
 853 049d 31C0     		xorl	%eax, %eax
 854              	.LBB14:
  52:XmlTestReporter.cpp ****     AddXmlElement(m_ostream, NULL);
 855              		.loc 1 52 0
 856 049f 488B45C8 		movq	-56(%rbp), %rax
 857 04a3 488B4820 		movq	32(%rax), %rcx
 858 04a7 488B45C8 		movq	-56(%rbp), %rax
 859 04ab BA000000 		movl	$0, %edx
 859      00
 860 04b0 4889CE   		movq	%rcx, %rsi
 861 04b3 4889C7   		movq	%rax, %rdi
 862 04b6 E8000000 		call	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc@PLT
 862      00
  53:XmlTestReporter.cpp **** 
  54:XmlTestReporter.cpp ****     BeginResults(m_ostream, totalTestCount, failedTestCount, failureCount, secondsElapsed);
 863              		.loc 1 54 0
 864 04bb 488B45C8 		movq	-56(%rbp), %rax
 865 04bf 488B7020 		movq	32(%rax), %rsi
 866 04c3 8B7DB8   		movl	-72(%rbp), %edi
 867 04c6 448B45BC 		movl	-68(%rbp), %r8d
 868 04ca 8B4DC0   		movl	-64(%rbp), %ecx
 869 04cd 8B55C4   		movl	-60(%rbp), %edx
 870 04d0 488B45C8 		movq	-56(%rbp), %rax
 871 04d4 897DB4   		movl	%edi, -76(%rbp)
 872 04d7 F30F1045 		movss	-76(%rbp), %xmm0
 872      B4
 873 04dc 4889C7   		movq	%rax, %rdi
 874 04df E8000000 		call	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif@PLT
 874      00
  55:XmlTestReporter.cpp **** 
  56:XmlTestReporter.cpp ****     DeferredTestResultList const& results = GetResults();
 875              		.loc 1 56 0
 876 04e4 488B45C8 		movq	-56(%rbp), %rax
 877 04e8 4889C7   		movq	%rax, %rdi
 878 04eb E8000000 		call	_ZN8UnitTest20DeferredTestReporter10GetResultsEv@PLT
 878      00
 879 04f0 488945F0 		movq	%rax, -16(%rbp)
 880              	.LBB15:
  57:XmlTestReporter.cpp ****     for (DeferredTestResultList::const_iterator i = results.begin(); i != results.end(); ++i)
 881              		.loc 1 57 0
 882 04f4 488B45F0 		movq	-16(%rbp), %rax
 883 04f8 4889C7   		movq	%rax, %rdi
 884 04fb E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv@PLT
 884      00
 885 0500 488945D0 		movq	%rax, -48(%rbp)
 886 0504 E9920000 		jmp	.L50
 886      00
 887              	.L52:
  58:XmlTestReporter.cpp ****     {
  59:XmlTestReporter.cpp ****         BeginTest(m_ostream, *i);
 888              		.loc 1 59 0
 889 0509 488D45D0 		leaq	-48(%rbp), %rax
 890 050d 4889C7   		movq	%rax, %rdi
 891 0510 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 891      00
 892 0515 4889C2   		movq	%rax, %rdx
 893 0518 488B45C8 		movq	-56(%rbp), %rax
 894 051c 488B4820 		movq	32(%rax), %rcx
 895 0520 488B45C8 		movq	-56(%rbp), %rax
 896 0524 4889CE   		movq	%rcx, %rsi
 897 0527 4889C7   		movq	%rax, %rdi
 898 052a E8000000 		call	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE@PLT
 898      00
  60:XmlTestReporter.cpp **** 
  61:XmlTestReporter.cpp ****         if (i->failed)
 899              		.loc 1 61 0
 900 052f 488D45D0 		leaq	-48(%rbp), %rax
 901 0533 4889C7   		movq	%rax, %rdi
 902 0536 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv
 902      00
 903 053b 0FB64034 		movzbl	52(%rax), %eax
 904 053f 84C0     		testb	%al, %al
 905 0541 7426     		je	.L51
  62:XmlTestReporter.cpp ****             AddFailure(m_ostream, *i);
 906              		.loc 1 62 0
 907 0543 488D45D0 		leaq	-48(%rbp), %rax
 908 0547 4889C7   		movq	%rax, %rdi
 909 054a E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 909      00
 910 054f 4889C2   		movq	%rax, %rdx
 911 0552 488B45C8 		movq	-56(%rbp), %rax
 912 0556 488B4820 		movq	32(%rax), %rcx
 913 055a 488B45C8 		movq	-56(%rbp), %rax
 914 055e 4889CE   		movq	%rcx, %rsi
 915 0561 4889C7   		movq	%rax, %rdi
 916 0564 E8000000 		call	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE@PLT
 916      00
 917              	.L51:
  63:XmlTestReporter.cpp **** 
  64:XmlTestReporter.cpp ****         EndTest(m_ostream, *i);
 918              		.loc 1 64 0
 919 0569 488D45D0 		leaq	-48(%rbp), %rax
 920 056d 4889C7   		movq	%rax, %rdi
 921 0570 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 921      00
 922 0575 4889C2   		movq	%rax, %rdx
 923 0578 488B45C8 		movq	-56(%rbp), %rax
 924 057c 488B4820 		movq	32(%rax), %rcx
 925 0580 488B45C8 		movq	-56(%rbp), %rax
 926 0584 4889CE   		movq	%rcx, %rsi
 927 0587 4889C7   		movq	%rax, %rdi
 928 058a E8000000 		call	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE@PLT
 928      00
  57:XmlTestReporter.cpp ****     {
 929              		.loc 1 57 0
 930 058f 488D45D0 		leaq	-48(%rbp), %rax
 931 0593 4889C7   		movq	%rax, %rdi
 932 0596 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv@
 932      00
 933              	.L50:
  57:XmlTestReporter.cpp ****     {
 934              		.loc 1 57 0 is_stmt 0 discriminator 1
 935 059b 488B45F0 		movq	-16(%rbp), %rax
 936 059f 4889C7   		movq	%rax, %rdi
 937 05a2 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv@PLT
 937      00
 938 05a7 488945E0 		movq	%rax, -32(%rbp)
 939 05ab 488D55E0 		leaq	-32(%rbp), %rdx
 940 05af 488D45D0 		leaq	-48(%rbp), %rax
 941 05b3 4889D6   		movq	%rdx, %rsi
 942 05b6 4889C7   		movq	%rax, %rdi
 943 05b9 E8000000 		call	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iter
 943      00
 944 05be 84C0     		testb	%al, %al
 945 05c0 0F8543FF 		jne	.L52
 945      FFFF
 946              	.LBE15:
  65:XmlTestReporter.cpp ****     }
  66:XmlTestReporter.cpp **** 
  67:XmlTestReporter.cpp ****     EndResults(m_ostream);
 947              		.loc 1 67 0 is_stmt 1
 948 05c6 488B45C8 		movq	-56(%rbp), %rax
 949 05ca 488B5020 		movq	32(%rax), %rdx
 950 05ce 488B45C8 		movq	-56(%rbp), %rax
 951 05d2 4889D6   		movq	%rdx, %rsi
 952 05d5 4889C7   		movq	%rax, %rdi
 953 05d8 E8000000 		call	_ZN8UnitTest15XmlTestReporter10EndResultsERSo@PLT
 953      00
 954              	.LBE14:
  68:XmlTestReporter.cpp **** }
 955              		.loc 1 68 0
 956 05dd 488B45F8 		movq	-8(%rbp), %rax
 957 05e1 64483304 		xorq	%fs:40, %rax
 957      25280000 
 957      00
 958 05ea 7405     		je	.L53
 959 05ec E8000000 		call	__stack_chk_fail@PLT
 959      00
 960              	.L53:
 961 05f1 C9       		leave
 962              		.cfi_def_cfa 7, 8
 963 05f2 C3       		ret
 964              		.cfi_endproc
 965              	.LFE1334:
 967              		.section	.rodata
 968              	.LC7:
 969 0025 3C3F786D 		.string	"<?xml version=\"1.0\""
 969      6C207665 
 969      7273696F 
 969      6E3D2231 
 969      2E302200 
 970              	.LC8:
 971 0039 20656E63 		.string	" encoding=\""
 971      6F64696E 
 971      673D2200 
 972              	.LC9:
 973 0045 2200     		.string	"\""
 974              	.LC10:
 975 0047 3F3E00   		.string	"?>"
 976              		.text
 977 05f3 90       		.align 2
 978              		.globl	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc
 980              	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc:
 981              	.LFB1335:
  69:XmlTestReporter.cpp **** 
  70:XmlTestReporter.cpp **** void XmlTestReporter::AddXmlElement(ostream& os, char const* encoding)
  71:XmlTestReporter.cpp **** {
 982              		.loc 1 71 0
 983              		.cfi_startproc
 984 05f4 55       		pushq	%rbp
 985              		.cfi_def_cfa_offset 16
 986              		.cfi_offset 6, -16
 987 05f5 4889E5   		movq	%rsp, %rbp
 988              		.cfi_def_cfa_register 6
 989 05f8 4883EC20 		subq	$32, %rsp
 990 05fc 48897DF8 		movq	%rdi, -8(%rbp)
 991 0600 488975F0 		movq	%rsi, -16(%rbp)
 992 0604 488955E8 		movq	%rdx, -24(%rbp)
  72:XmlTestReporter.cpp ****     os << "<?xml version=\"1.0\"";
 993              		.loc 1 72 0
 994 0608 488B45F0 		movq	-16(%rbp), %rax
 995 060c 488D3500 		leaq	.LC7(%rip), %rsi
 995      000000
 996 0613 4889C7   		movq	%rax, %rdi
 997 0616 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 997      00
  73:XmlTestReporter.cpp **** 
  74:XmlTestReporter.cpp ****     if (encoding != NULL)
 998              		.loc 1 74 0
 999 061b 48837DE8 		cmpq	$0, -24(%rbp)
 999      00
 1000 0620 7434     		je	.L55
  75:XmlTestReporter.cpp ****         os << " encoding=\"" << encoding << "\"";
 1001              		.loc 1 75 0
 1002 0622 488B45F0 		movq	-16(%rbp), %rax
 1003 0626 488D3500 		leaq	.LC8(%rip), %rsi
 1003      000000
 1004 062d 4889C7   		movq	%rax, %rdi
 1005 0630 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1005      00
 1006 0635 4889C2   		movq	%rax, %rdx
 1007 0638 488B45E8 		movq	-24(%rbp), %rax
 1008 063c 4889C6   		movq	%rax, %rsi
 1009 063f 4889D7   		movq	%rdx, %rdi
 1010 0642 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1010      00
 1011 0647 488D3500 		leaq	.LC9(%rip), %rsi
 1011      000000
 1012 064e 4889C7   		movq	%rax, %rdi
 1013 0651 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1013      00
 1014              	.L55:
  76:XmlTestReporter.cpp **** 
  77:XmlTestReporter.cpp ****     os << "?>";
 1015              		.loc 1 77 0
 1016 0656 488B45F0 		movq	-16(%rbp), %rax
 1017 065a 488D3500 		leaq	.LC10(%rip), %rsi
 1017      000000
 1018 0661 4889C7   		movq	%rax, %rdi
 1019 0664 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1019      00
  78:XmlTestReporter.cpp **** }
 1020              		.loc 1 78 0
 1021 0669 C9       		leave
 1022              		.cfi_def_cfa 7, 8
 1023 066a C3       		ret
 1024              		.cfi_endproc
 1025              	.LFE1335:
 1027              		.section	.rodata
 1028              	.LC11:
 1029 004a 3C756E69 		.string	"<unittest-results"
 1029      74746573 
 1029      742D7265 
 1029      73756C74 
 1029      7300
 1030              	.LC12:
 1031 005c 20746573 		.string	" tests=\""
 1031      74733D22 
 1031      00
 1032              	.LC13:
 1033 0065 20666169 		.string	" failedtests=\""
 1033      6C656474 
 1033      65737473 
 1033      3D2200
 1034              	.LC14:
 1035 0074 20666169 		.string	" failures=\""
 1035      6C757265 
 1035      733D2200 
 1036              	.LC15:
 1037 0080 2074696D 		.string	" time=\""
 1037      653D2200 
 1038              	.LC16:
 1039 0088 3E00     		.string	">"
 1040              		.text
 1041 066b 90       		.align 2
 1042              		.globl	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif
 1044              	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif:
 1045              	.LFB1336:
  79:XmlTestReporter.cpp **** 
  80:XmlTestReporter.cpp **** void XmlTestReporter::BeginResults(std::ostream& os, int totalTestCount, int failedTestCount, 
  81:XmlTestReporter.cpp ****                                    int failureCount, float secondsElapsed)
  82:XmlTestReporter.cpp **** {
 1046              		.loc 1 82 0
 1047              		.cfi_startproc
 1048 066c 55       		pushq	%rbp
 1049              		.cfi_def_cfa_offset 16
 1050              		.cfi_offset 6, -16
 1051 066d 4889E5   		movq	%rsp, %rbp
 1052              		.cfi_def_cfa_register 6
 1053 0670 4883EC30 		subq	$48, %rsp
 1054 0674 48897DF8 		movq	%rdi, -8(%rbp)
 1055 0678 488975F0 		movq	%rsi, -16(%rbp)
 1056 067c 8955EC   		movl	%edx, -20(%rbp)
 1057 067f 894DE8   		movl	%ecx, -24(%rbp)
 1058 0682 448945E4 		movl	%r8d, -28(%rbp)
 1059 0686 F30F1145 		movss	%xmm0, -32(%rbp)
 1059      E0
  83:XmlTestReporter.cpp ****    os << "<unittest-results"
 1060              		.loc 1 83 0
 1061 068b 488B45F0 		movq	-16(%rbp), %rax
 1062 068f 488D3500 		leaq	.LC11(%rip), %rsi
 1062      000000
 1063 0696 4889C7   		movq	%rax, %rdi
 1064 0699 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1064      00
  84:XmlTestReporter.cpp ****        << " tests=\"" << totalTestCount << "\"" 
 1065              		.loc 1 84 0
 1066 069e 488D3500 		leaq	.LC12(%rip), %rsi
 1066      000000
 1067 06a5 4889C7   		movq	%rax, %rdi
 1068 06a8 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1068      00
 1069 06ad 4889C2   		movq	%rax, %rdx
 1070 06b0 8B45EC   		movl	-20(%rbp), %eax
 1071 06b3 89C6     		movl	%eax, %esi
 1072 06b5 4889D7   		movq	%rdx, %rdi
 1073 06b8 E8000000 		call	_ZNSolsEi@PLT
 1073      00
 1074 06bd 488D3500 		leaq	.LC9(%rip), %rsi
 1074      000000
 1075 06c4 4889C7   		movq	%rax, %rdi
 1076 06c7 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1076      00
  85:XmlTestReporter.cpp ****        << " failedtests=\"" << failedTestCount << "\"" 
 1077              		.loc 1 85 0
 1078 06cc 488D3500 		leaq	.LC13(%rip), %rsi
 1078      000000
 1079 06d3 4889C7   		movq	%rax, %rdi
 1080 06d6 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1080      00
 1081 06db 4889C2   		movq	%rax, %rdx
 1082 06de 8B45E8   		movl	-24(%rbp), %eax
 1083 06e1 89C6     		movl	%eax, %esi
 1084 06e3 4889D7   		movq	%rdx, %rdi
 1085 06e6 E8000000 		call	_ZNSolsEi@PLT
 1085      00
 1086 06eb 488D3500 		leaq	.LC9(%rip), %rsi
 1086      000000
 1087 06f2 4889C7   		movq	%rax, %rdi
 1088 06f5 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1088      00
  86:XmlTestReporter.cpp ****        << " failures=\"" << failureCount << "\"" 
 1089              		.loc 1 86 0
 1090 06fa 488D3500 		leaq	.LC14(%rip), %rsi
 1090      000000
 1091 0701 4889C7   		movq	%rax, %rdi
 1092 0704 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1092      00
 1093 0709 4889C2   		movq	%rax, %rdx
 1094 070c 8B45E4   		movl	-28(%rbp), %eax
 1095 070f 89C6     		movl	%eax, %esi
 1096 0711 4889D7   		movq	%rdx, %rdi
 1097 0714 E8000000 		call	_ZNSolsEi@PLT
 1097      00
 1098 0719 488D3500 		leaq	.LC9(%rip), %rsi
 1098      000000
 1099 0720 4889C7   		movq	%rax, %rdi
 1100 0723 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1100      00
  87:XmlTestReporter.cpp ****        << " time=\"" << secondsElapsed << "\""
 1101              		.loc 1 87 0
 1102 0728 488D3500 		leaq	.LC15(%rip), %rsi
 1102      000000
 1103 072f 4889C7   		movq	%rax, %rdi
 1104 0732 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1104      00
 1105 0737 4889C2   		movq	%rax, %rdx
 1106 073a 8B45E0   		movl	-32(%rbp), %eax
 1107 073d 8945DC   		movl	%eax, -36(%rbp)
 1108 0740 F30F1045 		movss	-36(%rbp), %xmm0
 1108      DC
 1109 0745 4889D7   		movq	%rdx, %rdi
 1110 0748 E8000000 		call	_ZNSolsEf@PLT
 1110      00
 1111 074d 488D3500 		leaq	.LC9(%rip), %rsi
 1111      000000
 1112 0754 4889C7   		movq	%rax, %rdi
 1113 0757 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1113      00
  88:XmlTestReporter.cpp ****        << ">";
 1114              		.loc 1 88 0
 1115 075c 488D3500 		leaq	.LC16(%rip), %rsi
 1115      000000
 1116 0763 4889C7   		movq	%rax, %rdi
 1117 0766 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1117      00
  89:XmlTestReporter.cpp **** }
 1118              		.loc 1 89 0
 1119 076b C9       		leave
 1120              		.cfi_def_cfa 7, 8
 1121 076c C3       		ret
 1122              		.cfi_endproc
 1123              	.LFE1336:
 1125              		.section	.rodata
 1126              	.LC17:
 1127 008a 3C2F756E 		.string	"</unittest-results>"
 1127      69747465 
 1127      73742D72 
 1127      6573756C 
 1127      74733E00 
 1128              		.text
 1129 076d 90       		.align 2
 1130              		.globl	_ZN8UnitTest15XmlTestReporter10EndResultsERSo
 1132              	_ZN8UnitTest15XmlTestReporter10EndResultsERSo:
 1133              	.LFB1337:
  90:XmlTestReporter.cpp **** 
  91:XmlTestReporter.cpp **** void XmlTestReporter::EndResults(std::ostream& os)
  92:XmlTestReporter.cpp **** {
 1134              		.loc 1 92 0
 1135              		.cfi_startproc
 1136 076e 55       		pushq	%rbp
 1137              		.cfi_def_cfa_offset 16
 1138              		.cfi_offset 6, -16
 1139 076f 4889E5   		movq	%rsp, %rbp
 1140              		.cfi_def_cfa_register 6
 1141 0772 4883EC10 		subq	$16, %rsp
 1142 0776 48897DF8 		movq	%rdi, -8(%rbp)
 1143 077a 488975F0 		movq	%rsi, -16(%rbp)
  93:XmlTestReporter.cpp ****     os << "</unittest-results>";
 1144              		.loc 1 93 0
 1145 077e 488B45F0 		movq	-16(%rbp), %rax
 1146 0782 488D3500 		leaq	.LC17(%rip), %rsi
 1146      000000
 1147 0789 4889C7   		movq	%rax, %rdi
 1148 078c E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1148      00
  94:XmlTestReporter.cpp **** }
 1149              		.loc 1 94 0
 1150 0791 C9       		leave
 1151              		.cfi_def_cfa 7, 8
 1152 0792 C3       		ret
 1153              		.cfi_endproc
 1154              	.LFE1337:
 1156              		.section	.rodata
 1157              	.LC18:
 1158 009e 3C746573 		.string	"<test"
 1158      7400
 1159              	.LC19:
 1160 00a4 20737569 		.string	" suite=\""
 1160      74653D22 
 1160      00
 1161              	.LC20:
 1162 00ad 206E616D 		.string	" name=\""
 1162      653D2200 
 1163              		.text
 1164 0793 90       		.align 2
 1165              		.globl	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE
 1167              	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE:
 1168              	.LFB1338:
  95:XmlTestReporter.cpp **** 
  96:XmlTestReporter.cpp **** void XmlTestReporter::BeginTest(std::ostream& os, DeferredTestResult const& result)
  97:XmlTestReporter.cpp **** {
 1169              		.loc 1 97 0
 1170              		.cfi_startproc
 1171 0794 55       		pushq	%rbp
 1172              		.cfi_def_cfa_offset 16
 1173              		.cfi_offset 6, -16
 1174 0795 4889E5   		movq	%rsp, %rbp
 1175              		.cfi_def_cfa_register 6
 1176 0798 4155     		pushq	%r13
 1177 079a 4154     		pushq	%r12
 1178 079c 53       		pushq	%rbx
 1179 079d 4883EC28 		subq	$40, %rsp
 1180              		.cfi_offset 13, -24
 1181              		.cfi_offset 12, -32
 1182              		.cfi_offset 3, -40
 1183 07a1 48897DD8 		movq	%rdi, -40(%rbp)
 1184 07a5 488975D0 		movq	%rsi, -48(%rbp)
 1185 07a9 488955C8 		movq	%rdx, -56(%rbp)
  98:XmlTestReporter.cpp ****     os << "<test"
  99:XmlTestReporter.cpp ****         << " suite=\"" << result.suiteName << "\"" 
 100:XmlTestReporter.cpp ****         << " name=\"" << result.testName << "\""
 101:XmlTestReporter.cpp ****         << " time=\"" << result.timeElapsed << "\"";
 1186              		.loc 1 101 0
 1187 07ad 488B45C8 		movq	-56(%rbp), %rax
 1188 07b1 8B5830   		movl	48(%rax), %ebx
 100:XmlTestReporter.cpp ****         << " time=\"" << result.timeElapsed << "\"";
 1189              		.loc 1 100 0
 1190 07b4 488B45C8 		movq	-56(%rbp), %rax
 1191 07b8 4C8D6808 		leaq	8(%rax), %r13
  99:XmlTestReporter.cpp ****         << " name=\"" << result.testName << "\""
 1192              		.loc 1 99 0
 1193 07bc 4C8B65C8 		movq	-56(%rbp), %r12
  98:XmlTestReporter.cpp ****     os << "<test"
 1194              		.loc 1 98 0
 1195 07c0 488B45D0 		movq	-48(%rbp), %rax
 1196 07c4 488D3500 		leaq	.LC18(%rip), %rsi
 1196      000000
 1197 07cb 4889C7   		movq	%rax, %rdi
 1198 07ce E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1198      00
  99:XmlTestReporter.cpp ****         << " name=\"" << result.testName << "\""
 1199              		.loc 1 99 0
 1200 07d3 488D3500 		leaq	.LC19(%rip), %rsi
 1200      000000
 1201 07da 4889C7   		movq	%rax, %rdi
 1202 07dd E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1202      00
 1203 07e2 4C89E6   		movq	%r12, %rsi
 1204 07e5 4889C7   		movq	%rax, %rdi
 1205 07e8 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@PLT
 1205      00
 1206 07ed 488D3500 		leaq	.LC9(%rip), %rsi
 1206      000000
 1207 07f4 4889C7   		movq	%rax, %rdi
 1208 07f7 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1208      00
 100:XmlTestReporter.cpp ****         << " time=\"" << result.timeElapsed << "\"";
 1209              		.loc 1 100 0
 1210 07fc 488D3500 		leaq	.LC20(%rip), %rsi
 1210      000000
 1211 0803 4889C7   		movq	%rax, %rdi
 1212 0806 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1212      00
 1213 080b 4C89EE   		movq	%r13, %rsi
 1214 080e 4889C7   		movq	%rax, %rdi
 1215 0811 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@PLT
 1215      00
 1216 0816 488D3500 		leaq	.LC9(%rip), %rsi
 1216      000000
 1217 081d 4889C7   		movq	%rax, %rdi
 1218 0820 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1218      00
 1219              		.loc 1 101 0
 1220 0825 488D3500 		leaq	.LC15(%rip), %rsi
 1220      000000
 1221 082c 4889C7   		movq	%rax, %rdi
 1222 082f E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1222      00
 1223 0834 895DC4   		movl	%ebx, -60(%rbp)
 1224 0837 F30F1045 		movss	-60(%rbp), %xmm0
 1224      C4
 1225 083c 4889C7   		movq	%rax, %rdi
 1226 083f E8000000 		call	_ZNSolsEf@PLT
 1226      00
 1227 0844 488D3500 		leaq	.LC9(%rip), %rsi
 1227      000000
 1228 084b 4889C7   		movq	%rax, %rdi
 1229 084e E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1229      00
 102:XmlTestReporter.cpp **** }
 1230              		.loc 1 102 0
 1231 0853 4883C428 		addq	$40, %rsp
 1232 0857 5B       		popq	%rbx
 1233 0858 415C     		popq	%r12
 1234 085a 415D     		popq	%r13
 1235 085c 5D       		popq	%rbp
 1236              		.cfi_def_cfa 7, 8
 1237 085d C3       		ret
 1238              		.cfi_endproc
 1239              	.LFE1338:
 1241              		.section	.rodata
 1242              	.LC21:
 1243 00b5 3C2F7465 		.string	"</test>"
 1243      73743E00 
 1244              	.LC22:
 1245 00bd 2F3E00   		.string	"/>"
 1246              		.text
 1247              		.align 2
 1248              		.globl	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE
 1250              	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE:
 1251              	.LFB1339:
 103:XmlTestReporter.cpp **** 
 104:XmlTestReporter.cpp **** void XmlTestReporter::EndTest(std::ostream& os, DeferredTestResult const& result)
 105:XmlTestReporter.cpp **** {
 1252              		.loc 1 105 0
 1253              		.cfi_startproc
 1254 085e 55       		pushq	%rbp
 1255              		.cfi_def_cfa_offset 16
 1256              		.cfi_offset 6, -16
 1257 085f 4889E5   		movq	%rsp, %rbp
 1258              		.cfi_def_cfa_register 6
 1259 0862 4883EC20 		subq	$32, %rsp
 1260 0866 48897DF8 		movq	%rdi, -8(%rbp)
 1261 086a 488975F0 		movq	%rsi, -16(%rbp)
 1262 086e 488955E8 		movq	%rdx, -24(%rbp)
 106:XmlTestReporter.cpp ****     if (result.failed)
 1263              		.loc 1 106 0
 1264 0872 488B45E8 		movq	-24(%rbp), %rax
 1265 0876 0FB64034 		movzbl	52(%rax), %eax
 1266 087a 84C0     		testb	%al, %al
 1267 087c 7415     		je	.L60
 107:XmlTestReporter.cpp ****         os << "</test>";
 1268              		.loc 1 107 0
 1269 087e 488B45F0 		movq	-16(%rbp), %rax
 1270 0882 488D3500 		leaq	.LC21(%rip), %rsi
 1270      000000
 1271 0889 4889C7   		movq	%rax, %rdi
 1272 088c E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1272      00
 1273 0891 EB13     		jmp	.L59
 1274              	.L60:
 108:XmlTestReporter.cpp ****     else
 109:XmlTestReporter.cpp ****         os << "/>";
 1275              		.loc 1 109 0
 1276 0893 488B45F0 		movq	-16(%rbp), %rax
 1277 0897 488D3500 		leaq	.LC22(%rip), %rsi
 1277      000000
 1278 089e 4889C7   		movq	%rax, %rdi
 1279 08a1 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1279      00
 1280              	.L59:
 110:XmlTestReporter.cpp **** }
 1281              		.loc 1 110 0
 1282 08a6 C9       		leave
 1283              		.cfi_def_cfa 7, 8
 1284 08a7 C3       		ret
 1285              		.cfi_endproc
 1286              	.LFE1339:
 1288              		.section	.rodata
 1289              	.LC23:
 1290 00c0 3C666169 		.string	"<failure"
 1290      6C757265 
 1290      00
 1291              	.LC24:
 1292 00c9 206D6573 		.string	" message=\""
 1292      73616765 
 1292      3D2200
 1293              		.text
 1294              		.align 2
 1295              		.globl	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE
 1297              	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE:
 1298              	.LFB1340:
 111:XmlTestReporter.cpp **** 
 112:XmlTestReporter.cpp **** void XmlTestReporter::AddFailure(std::ostream& os, DeferredTestResult const& result)
 113:XmlTestReporter.cpp **** {
 1299              		.loc 1 113 0
 1300              		.cfi_startproc
 1301              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1302              		.cfi_lsda 0x1b,.LLSDA1340
 1303 08a8 55       		pushq	%rbp
 1304              		.cfi_def_cfa_offset 16
 1305              		.cfi_offset 6, -16
 1306 08a9 4889E5   		movq	%rsp, %rbp
 1307              		.cfi_def_cfa_register 6
 1308 08ac 53       		pushq	%rbx
 1309 08ad 4883EC58 		subq	$88, %rsp
 1310              		.cfi_offset 3, -24
 1311 08b1 48897DB8 		movq	%rdi, -72(%rbp)
 1312 08b5 488975B0 		movq	%rsi, -80(%rbp)
 1313 08b9 488955A8 		movq	%rdx, -88(%rbp)
 1314              		.loc 1 113 0
 1315 08bd 64488B04 		movq	%fs:40, %rax
 1315      25280000 
 1315      00
 1316 08c6 488945E8 		movq	%rax, -24(%rbp)
 1317 08ca 31C0     		xorl	%eax, %eax
 1318              	.LBB16:
 114:XmlTestReporter.cpp ****     os << ">"; // close <test> element
 1319              		.loc 1 114 0
 1320 08cc 488B45B0 		movq	-80(%rbp), %rax
 1321 08d0 488D3500 		leaq	.LC16(%rip), %rsi
 1321      000000
 1322 08d7 4889C7   		movq	%rax, %rdi
 1323              	.LEHB26:
 1324 08da E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1324      00
 1325              	.LBB17:
 115:XmlTestReporter.cpp **** 
 116:XmlTestReporter.cpp ****     for (DeferredTestResult::FailureVec::const_iterator it = result.failures.begin(); 
 1326              		.loc 1 116 0
 1327 08df 488B45A8 		movq	-88(%rbp), %rax
 1328 08e3 4883C018 		addq	$24, %rax
 1329 08e7 4889C7   		movq	%rax, %rdi
 1330 08ea E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv@PLT
 1330      00
 1331 08ef 488945C0 		movq	%rax, -64(%rbp)
 1332 08f3 E9BB0000 		jmp	.L63
 1332      00
 1333              	.L64:
 1334              	.LBB18:
 117:XmlTestReporter.cpp ****          it != result.failures.end(); 
 118:XmlTestReporter.cpp ****          ++it)
 119:XmlTestReporter.cpp ****     {
 120:XmlTestReporter.cpp ****         string const escapedMessage = XmlEscape(it->second);
 1335              		.loc 1 120 0
 1336 08f8 488D45C0 		leaq	-64(%rbp), %rax
 1337 08fc 4889C7   		movq	%rax, %rdi
 1338 08ff E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEptEv@PLT
 1338      00
 1339 0904 488D5008 		leaq	8(%rax), %rdx
 1340 0908 488D45D0 		leaq	-48(%rbp), %rax
 1341 090c 4889D6   		movq	%rdx, %rsi
 1342 090f 4889C7   		movq	%rax, %rdi
 1343 0912 E85EF7FF 		call	_ZN12_GLOBAL__N_19XmlEscapeERKSs
 1343      FF
 1344              	.LEHE26:
 121:XmlTestReporter.cpp ****         string const message = BuildFailureMessage(result.failureFile, it->first, escapedMessage);
 1345              		.loc 1 121 0
 1346 0917 488D45C0 		leaq	-64(%rbp), %rax
 1347 091b 4889C7   		movq	%rax, %rdi
 1348              	.LEHB27:
 1349 091e E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEptEv@PLT
 1349      00
 1350 0923 8B10     		movl	(%rax), %edx
 1351 0925 488B45A8 		movq	-88(%rbp), %rax
 1352 0929 488D7010 		leaq	16(%rax), %rsi
 1353 092d 488D45E0 		leaq	-32(%rbp), %rax
 1354 0931 488D4DD0 		leaq	-48(%rbp), %rcx
 1355 0935 4889C7   		movq	%rax, %rdi
 1356 0938 E8E6F9FF 		call	_ZN12_GLOBAL__N_119BuildFailureMessageERKSsiS1_
 1356      FF
 1357              	.LEHE27:
 122:XmlTestReporter.cpp **** 
 123:XmlTestReporter.cpp ****         os << "<failure" << " message=\"" << message << "\"" << "/>";
 1358              		.loc 1 123 0
 1359 093d 488B45B0 		movq	-80(%rbp), %rax
 1360 0941 488D3500 		leaq	.LC23(%rip), %rsi
 1360      000000
 1361 0948 4889C7   		movq	%rax, %rdi
 1362              	.LEHB28:
 1363 094b E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1363      00
 1364 0950 488D3500 		leaq	.LC24(%rip), %rsi
 1364      000000
 1365 0957 4889C7   		movq	%rax, %rdi
 1366 095a E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1366      00
 1367              		.loc 1 123 0 is_stmt 0 discriminator 1
 1368 095f 4889C2   		movq	%rax, %rdx
 1369 0962 488D45E0 		leaq	-32(%rbp), %rax
 1370 0966 4889C6   		movq	%rax, %rsi
 1371 0969 4889D7   		movq	%rdx, %rdi
 1372 096c E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@PLT
 1372      00
 1373              		.loc 1 123 0 discriminator 2
 1374 0971 488D3500 		leaq	.LC9(%rip), %rsi
 1374      000000
 1375 0978 4889C7   		movq	%rax, %rdi
 1376 097b E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1376      00
 1377              		.loc 1 123 0 discriminator 3
 1378 0980 488D3500 		leaq	.LC22(%rip), %rsi
 1378      000000
 1379 0987 4889C7   		movq	%rax, %rdi
 1380 098a E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1380      00
 1381              	.LEHE28:
 121:XmlTestReporter.cpp ****         string const message = BuildFailureMessage(result.failureFile, it->first, escapedMessage);
 1382              		.loc 1 121 0 is_stmt 1
 1383 098f 488D45E0 		leaq	-32(%rbp), %rax
 1384 0993 4889C7   		movq	%rax, %rdi
 1385              	.LEHB29:
 1386 0996 E8000000 		call	_ZNSsD1Ev@PLT
 1386      00
 1387              	.LEHE29:
 124:XmlTestReporter.cpp ****     }
 1388              		.loc 1 124 0
 1389 099b 488D45D0 		leaq	-48(%rbp), %rax
 1390 099f 4889C7   		movq	%rax, %rdi
 1391              	.LEHB30:
 1392 09a2 E8000000 		call	_ZNSsD1Ev@PLT
 1392      00
 1393              	.LBE18:
 116:XmlTestReporter.cpp ****          it != result.failures.end(); 
 1394              		.loc 1 116 0
 1395 09a7 488D45C0 		leaq	-64(%rbp), %rax
 1396 09ab 4889C7   		movq	%rax, %rdi
 1397 09ae E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv@PLT
 1397      00
 1398              	.L63:
 117:XmlTestReporter.cpp ****          ++it)
 1399              		.loc 1 117 0
 1400 09b3 488B45A8 		movq	-88(%rbp), %rax
 1401 09b7 4883C018 		addq	$24, %rax
 1402 09bb 4889C7   		movq	%rax, %rdi
 1403 09be E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv@PLT
 1403      00
 1404 09c3 488945E0 		movq	%rax, -32(%rbp)
 116:XmlTestReporter.cpp ****          it != result.failures.end(); 
 1405              		.loc 1 116 0
 1406 09c7 488D55E0 		leaq	-32(%rbp), %rdx
 1407 09cb 488D45C0 		leaq	-64(%rbp), %rax
 1408 09cf 4889D6   		movq	%rdx, %rsi
 1409 09d2 4889C7   		movq	%rax, %rdi
 1410 09d5 E8000000 		call	_ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_@PLT
 1410      00
 1411              	.LEHE30:
 1412 09da 84C0     		testb	%al, %al
 1413 09dc 0F8516FF 		jne	.L64
 1413      FFFF
 1414              	.LBE17:
 1415              	.LBE16:
 125:XmlTestReporter.cpp **** }
 1416              		.loc 1 125 0
 1417 09e2 488B45E8 		movq	-24(%rbp), %rax
 1418 09e6 64483304 		xorq	%fs:40, %rax
 1418      25280000 
 1418      00
 1419 09ef 7432     		je	.L67
 1420 09f1 EB2B     		jmp	.L70
 1421              	.L69:
 1422 09f3 4889C3   		movq	%rax, %rbx
 1423              	.LBB21:
 1424              	.LBB20:
 1425              	.LBB19:
 121:XmlTestReporter.cpp **** 
 1426              		.loc 1 121 0
 1427 09f6 488D45E0 		leaq	-32(%rbp), %rax
 1428 09fa 4889C7   		movq	%rax, %rdi
 1429 09fd E8000000 		call	_ZNSsD1Ev@PLT
 1429      00
 1430 0a02 EB03     		jmp	.L66
 1431              	.L68:
 1432 0a04 4889C3   		movq	%rax, %rbx
 1433              	.L66:
 124:XmlTestReporter.cpp **** }
 1434              		.loc 1 124 0
 1435 0a07 488D45D0 		leaq	-48(%rbp), %rax
 1436 0a0b 4889C7   		movq	%rax, %rdi
 1437 0a0e E8000000 		call	_ZNSsD1Ev@PLT
 1437      00
 1438 0a13 4889D8   		movq	%rbx, %rax
 1439 0a16 4889C7   		movq	%rax, %rdi
 1440              	.LEHB31:
 1441 0a19 E8000000 		call	_Unwind_Resume@PLT
 1441      00
 1442              	.LEHE31:
 1443              	.L70:
 1444              	.LBE19:
 1445              	.LBE20:
 1446              	.LBE21:
 1447              		.loc 1 125 0
 1448 0a1e E8000000 		call	__stack_chk_fail@PLT
 1448      00
 1449              	.L67:
 1450 0a23 4883C458 		addq	$88, %rsp
 1451 0a27 5B       		popq	%rbx
 1452 0a28 5D       		popq	%rbp
 1453              		.cfi_def_cfa 7, 8
 1454 0a29 C3       		ret
 1455              		.cfi_endproc
 1456              	.LFE1340:
 1457              		.section	.gcc_except_table
 1458              	.LLSDA1340:
 1459 0097 FF       		.byte	0xff
 1460 0098 FF       		.byte	0xff
 1461 0099 01       		.byte	0x1
 1462 009a 1F       		.uleb128 .LLSDACSE1340-.LLSDACSB1340
 1463              	.LLSDACSB1340:
 1464 009b 32       		.uleb128 .LEHB26-.LFB1340
 1465 009c 3D       		.uleb128 .LEHE26-.LEHB26
 1466 009d 00       		.uleb128 0
 1467 009e 00       		.uleb128 0
 1468 009f 76       		.uleb128 .LEHB27-.LFB1340
 1469 00a0 1F       		.uleb128 .LEHE27-.LEHB27
 1470 00a1 DC02     		.uleb128 .L68-.LFB1340
 1471 00a3 00       		.uleb128 0
 1472 00a4 A301     		.uleb128 .LEHB28-.LFB1340
 1473 00a6 44       		.uleb128 .LEHE28-.LEHB28
 1474 00a7 CB02     		.uleb128 .L69-.LFB1340
 1475 00a9 00       		.uleb128 0
 1476 00aa EE01     		.uleb128 .LEHB29-.LFB1340
 1477 00ac 05       		.uleb128 .LEHE29-.LEHB29
 1478 00ad DC02     		.uleb128 .L68-.LFB1340
 1479 00af 00       		.uleb128 0
 1480 00b0 FA01     		.uleb128 .LEHB30-.LFB1340
 1481 00b2 38       		.uleb128 .LEHE30-.LEHB30
 1482 00b3 00       		.uleb128 0
 1483 00b4 00       		.uleb128 0
 1484 00b5 F102     		.uleb128 .LEHB31-.LFB1340
 1485 00b7 05       		.uleb128 .LEHE31-.LEHB31
 1486 00b8 00       		.uleb128 0
 1487 00b9 00       		.uleb128 0
 1488              	.LLSDACSE1340:
 1489              		.text
 1491              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev,"axG",@progbits,_ZNSt6vect
 1492              		.align 2
 1493              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
 1495              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:
 1496              	.LFB1370:
 1497              		.file 4 "/usr/include/c++/4.9/bits/stl_vector.h"
   1:/usr/include/c++/4.9/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/4.9/bits/stl_vector.h **** 
   3:/usr/include/c++/4.9/bits/stl_vector.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/stl_vector.h **** //
   5:/usr/include/c++/4.9/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/4.9/bits/stl_vector.h **** 
  11:/usr/include/c++/4.9/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/stl_vector.h **** 
  16:/usr/include/c++/4.9/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/stl_vector.h **** 
  20:/usr/include/c++/4.9/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/stl_vector.h **** 
  25:/usr/include/c++/4.9/bits/stl_vector.h **** /*
  26:/usr/include/c++/4.9/bits/stl_vector.h ****  *
  27:/usr/include/c++/4.9/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.9/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.9/bits/stl_vector.h ****  *
  30:/usr/include/c++/4.9/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.9/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.9/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.9/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.9/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.9/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.9/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.9/bits/stl_vector.h ****  *
  38:/usr/include/c++/4.9/bits/stl_vector.h ****  *
  39:/usr/include/c++/4.9/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/4.9/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.9/bits/stl_vector.h ****  *
  42:/usr/include/c++/4.9/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.9/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.9/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.9/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.9/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.9/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/4.9/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.9/bits/stl_vector.h ****  */
  50:/usr/include/c++/4.9/bits/stl_vector.h **** 
  51:/usr/include/c++/4.9/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/4.9/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.9/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/4.9/bits/stl_vector.h ****  */
  55:/usr/include/c++/4.9/bits/stl_vector.h **** 
  56:/usr/include/c++/4.9/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/4.9/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/4.9/bits/stl_vector.h **** 
  59:/usr/include/c++/4.9/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/4.9/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/4.9/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/4.9/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
  65:/usr/include/c++/4.9/bits/stl_vector.h **** 
  66:/usr/include/c++/4.9/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:/usr/include/c++/4.9/bits/stl_vector.h **** {
  68:/usr/include/c++/4.9/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  69:/usr/include/c++/4.9/bits/stl_vector.h **** 
  70:/usr/include/c++/4.9/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  71:/usr/include/c++/4.9/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  72:/usr/include/c++/4.9/bits/stl_vector.h ****     struct _Vector_base
  73:/usr/include/c++/4.9/bits/stl_vector.h ****     {
  74:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  75:/usr/include/c++/4.9/bits/stl_vector.h ****         rebind<_Tp>::other _Tp_alloc_type;
  76:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  77:/usr/include/c++/4.9/bits/stl_vector.h ****        	pointer;
  78:/usr/include/c++/4.9/bits/stl_vector.h **** 
  79:/usr/include/c++/4.9/bits/stl_vector.h ****       struct _Vector_impl 
  80:/usr/include/c++/4.9/bits/stl_vector.h ****       : public _Tp_alloc_type
  81:/usr/include/c++/4.9/bits/stl_vector.h ****       {
  82:/usr/include/c++/4.9/bits/stl_vector.h **** 	pointer _M_start;
  83:/usr/include/c++/4.9/bits/stl_vector.h **** 	pointer _M_finish;
  84:/usr/include/c++/4.9/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  85:/usr/include/c++/4.9/bits/stl_vector.h **** 
  86:/usr/include/c++/4.9/bits/stl_vector.h **** 	_Vector_impl()
  87:/usr/include/c++/4.9/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  88:/usr/include/c++/4.9/bits/stl_vector.h **** 	{ }
  89:/usr/include/c++/4.9/bits/stl_vector.h **** 
  90:/usr/include/c++/4.9/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
  91:/usr/include/c++/4.9/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  92:/usr/include/c++/4.9/bits/stl_vector.h **** 	{ }
  93:/usr/include/c++/4.9/bits/stl_vector.h **** 
  94:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
  95:/usr/include/c++/4.9/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
  96:/usr/include/c++/4.9/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)),
  97:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_start(0), _M_finish(0), _M_end_of_storage(0)
  98:/usr/include/c++/4.9/bits/stl_vector.h **** 	{ }
  99:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 100:/usr/include/c++/4.9/bits/stl_vector.h **** 
 101:/usr/include/c++/4.9/bits/stl_vector.h **** 	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 102:/usr/include/c++/4.9/bits/stl_vector.h **** 	{
 103:/usr/include/c++/4.9/bits/stl_vector.h **** 	  std::swap(_M_start, __x._M_start);
 104:/usr/include/c++/4.9/bits/stl_vector.h **** 	  std::swap(_M_finish, __x._M_finish);
 105:/usr/include/c++/4.9/bits/stl_vector.h **** 	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 106:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
 107:/usr/include/c++/4.9/bits/stl_vector.h ****       };
 108:/usr/include/c++/4.9/bits/stl_vector.h ****       
 109:/usr/include/c++/4.9/bits/stl_vector.h ****     public:
 110:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 111:/usr/include/c++/4.9/bits/stl_vector.h **** 
 112:/usr/include/c++/4.9/bits/stl_vector.h ****       _Tp_alloc_type&
 113:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 114:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 115:/usr/include/c++/4.9/bits/stl_vector.h **** 
 116:/usr/include/c++/4.9/bits/stl_vector.h ****       const _Tp_alloc_type&
 117:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 118:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 119:/usr/include/c++/4.9/bits/stl_vector.h **** 
 120:/usr/include/c++/4.9/bits/stl_vector.h ****       allocator_type
 121:/usr/include/c++/4.9/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 122:/usr/include/c++/4.9/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 123:/usr/include/c++/4.9/bits/stl_vector.h **** 
 124:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_base()
 125:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl() { }
 126:/usr/include/c++/4.9/bits/stl_vector.h **** 
 127:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 128:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl(__a) { }
 129:/usr/include/c++/4.9/bits/stl_vector.h **** 
 130:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_base(size_t __n)
 131:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl()
 132:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_create_storage(__n); }
 133:/usr/include/c++/4.9/bits/stl_vector.h **** 
 134:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 135:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl(__a)
 136:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_create_storage(__n); }
 137:/usr/include/c++/4.9/bits/stl_vector.h **** 
 138:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 139:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 140:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 141:/usr/include/c++/4.9/bits/stl_vector.h **** 
 142:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x) noexcept
 143:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 144:/usr/include/c++/4.9/bits/stl_vector.h ****       { this->_M_impl._M_swap_data(__x._M_impl); }
 145:/usr/include/c++/4.9/bits/stl_vector.h **** 
 146:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 147:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl(__a)
 148:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 149:/usr/include/c++/4.9/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 150:/usr/include/c++/4.9/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 151:/usr/include/c++/4.9/bits/stl_vector.h **** 	else
 152:/usr/include/c++/4.9/bits/stl_vector.h **** 	  {
 153:/usr/include/c++/4.9/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 154:/usr/include/c++/4.9/bits/stl_vector.h **** 	    _M_create_storage(__n);
 155:/usr/include/c++/4.9/bits/stl_vector.h **** 	  }
 156:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 157:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 158:/usr/include/c++/4.9/bits/stl_vector.h **** 
 159:/usr/include/c++/4.9/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 160:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 161:/usr/include/c++/4.9/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 162:/usr/include/c++/4.9/bits/stl_vector.h **** 
 163:/usr/include/c++/4.9/bits/stl_vector.h ****     public:
 164:/usr/include/c++/4.9/bits/stl_vector.h ****       _Vector_impl _M_impl;
 165:/usr/include/c++/4.9/bits/stl_vector.h **** 
 166:/usr/include/c++/4.9/bits/stl_vector.h ****       pointer
 167:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_allocate(size_t __n)
 168:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 169:/usr/include/c++/4.9/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 170:/usr/include/c++/4.9/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : 0;
 171:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 172:/usr/include/c++/4.9/bits/stl_vector.h **** 
 173:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 174:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 175:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 176:/usr/include/c++/4.9/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 177:/usr/include/c++/4.9/bits/stl_vector.h **** 	if (__p)
 178:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 179:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 180:/usr/include/c++/4.9/bits/stl_vector.h **** 
 181:/usr/include/c++/4.9/bits/stl_vector.h ****     private:
 182:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 183:/usr/include/c++/4.9/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 184:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 185:/usr/include/c++/4.9/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 186:/usr/include/c++/4.9/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 187:/usr/include/c++/4.9/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 188:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 189:/usr/include/c++/4.9/bits/stl_vector.h ****     };
 190:/usr/include/c++/4.9/bits/stl_vector.h **** 
 191:/usr/include/c++/4.9/bits/stl_vector.h **** 
 192:/usr/include/c++/4.9/bits/stl_vector.h ****   /**
 193:/usr/include/c++/4.9/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 194:/usr/include/c++/4.9/bits/stl_vector.h ****    *  individual elements in any order.
 195:/usr/include/c++/4.9/bits/stl_vector.h ****    *
 196:/usr/include/c++/4.9/bits/stl_vector.h ****    *  @ingroup sequences
 197:/usr/include/c++/4.9/bits/stl_vector.h ****    *
 198:/usr/include/c++/4.9/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 199:/usr/include/c++/4.9/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 200:/usr/include/c++/4.9/bits/stl_vector.h ****    *
 201:/usr/include/c++/4.9/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 202:/usr/include/c++/4.9/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 203:/usr/include/c++/4.9/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 204:/usr/include/c++/4.9/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 205:/usr/include/c++/4.9/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 206:/usr/include/c++/4.9/bits/stl_vector.h ****    *
 207:/usr/include/c++/4.9/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 208:/usr/include/c++/4.9/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 209:/usr/include/c++/4.9/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 210:/usr/include/c++/4.9/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 211:/usr/include/c++/4.9/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 212:/usr/include/c++/4.9/bits/stl_vector.h ****   */
 213:/usr/include/c++/4.9/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 214:/usr/include/c++/4.9/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 215:/usr/include/c++/4.9/bits/stl_vector.h ****     {
 216:/usr/include/c++/4.9/bits/stl_vector.h ****       // Concept requirements.
 217:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 218:/usr/include/c++/4.9/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 219:/usr/include/c++/4.9/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 220:/usr/include/c++/4.9/bits/stl_vector.h ****       
 221:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 222:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 223:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>  _Alloc_traits;
 224:/usr/include/c++/4.9/bits/stl_vector.h **** 
 225:/usr/include/c++/4.9/bits/stl_vector.h ****     public:
 226:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef _Tp					 value_type;
 227:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename _Base::pointer                    pointer;
 228:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer      const_pointer;
 229:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference          reference;
 230:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference    const_reference;
 231:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 232:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 233:/usr/include/c++/4.9/bits/stl_vector.h ****       const_iterator;
 234:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 235:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 236:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef size_t					 size_type;
 237:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 238:/usr/include/c++/4.9/bits/stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 239:/usr/include/c++/4.9/bits/stl_vector.h **** 
 240:/usr/include/c++/4.9/bits/stl_vector.h ****     protected:
 241:/usr/include/c++/4.9/bits/stl_vector.h ****       using _Base::_M_allocate;
 242:/usr/include/c++/4.9/bits/stl_vector.h ****       using _Base::_M_deallocate;
 243:/usr/include/c++/4.9/bits/stl_vector.h ****       using _Base::_M_impl;
 244:/usr/include/c++/4.9/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 245:/usr/include/c++/4.9/bits/stl_vector.h **** 
 246:/usr/include/c++/4.9/bits/stl_vector.h ****     public:
 247:/usr/include/c++/4.9/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 248:/usr/include/c++/4.9/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 249:/usr/include/c++/4.9/bits/stl_vector.h **** 
 250:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 251:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 252:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 253:/usr/include/c++/4.9/bits/stl_vector.h ****       vector()
 1498              		.loc 4 253 0
 1499              		.cfi_startproc
 1500 0000 55       		pushq	%rbp
 1501              		.cfi_def_cfa_offset 16
 1502              		.cfi_offset 6, -16
 1503 0001 4889E5   		movq	%rsp, %rbp
 1504              		.cfi_def_cfa_register 6
 1505 0004 4883EC10 		subq	$16, %rsp
 1506 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1507              	.LBB22:
 254:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 255:/usr/include/c++/4.9/bits/stl_vector.h ****       noexcept(is_nothrow_default_constructible<_Alloc>::value)
 256:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 257:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base() { }
 1508              		.loc 4 257 0
 1509 000c 488B45F8 		movq	-8(%rbp), %rax
 1510 0010 4889C7   		movq	%rax, %rdi
 1511 0013 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev@PLT
 1511      00
 1512              	.LBE22:
 1513 0018 C9       		leave
 1514              		.cfi_def_cfa 7, 8
 1515 0019 C3       		ret
 1516              		.cfi_endproc
 1517              	.LFE1370:
 1519              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
 1520              		.set	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev,_ZNSt6vectorIN8UnitTest18DeferredTes
 1521              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vect
 1522              		.align 2
 1523              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
 1525              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:
 1526              	.LFB1373:
 258:/usr/include/c++/4.9/bits/stl_vector.h **** 
 259:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 260:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 261:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 262:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 263:/usr/include/c++/4.9/bits/stl_vector.h ****       explicit
 264:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 265:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__a) { }
 266:/usr/include/c++/4.9/bits/stl_vector.h **** 
 267:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 268:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 269:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 270:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 271:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 272:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 273:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 274:/usr/include/c++/4.9/bits/stl_vector.h ****        *  constructed elements.
 275:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 276:/usr/include/c++/4.9/bits/stl_vector.h ****       explicit
 277:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 278:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__n, __a)
 279:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 280:/usr/include/c++/4.9/bits/stl_vector.h **** 
 281:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 282:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 283:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 284:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 285:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 286:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 287:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 288:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 289:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 290:/usr/include/c++/4.9/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 291:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__n, __a)
 292:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 293:/usr/include/c++/4.9/bits/stl_vector.h **** #else
 294:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 295:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 296:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 297:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 298:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 299:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 300:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 301:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 302:/usr/include/c++/4.9/bits/stl_vector.h ****       explicit
 303:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 304:/usr/include/c++/4.9/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 305:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__n, __a)
 306:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 307:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 308:/usr/include/c++/4.9/bits/stl_vector.h **** 
 309:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 310:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 311:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 312:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 313:/usr/include/c++/4.9/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 314:/usr/include/c++/4.9/bits/stl_vector.h ****        *  object used by @a __x.  All the elements of @a __x are copied,
 315:/usr/include/c++/4.9/bits/stl_vector.h ****        *  but any extra memory in
 316:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.
 317:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 318:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(const vector& __x)
 319:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__x.size(),
 320:/usr/include/c++/4.9/bits/stl_vector.h ****         _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 321:/usr/include/c++/4.9/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 322:/usr/include/c++/4.9/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 323:/usr/include/c++/4.9/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 324:/usr/include/c++/4.9/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 325:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 326:/usr/include/c++/4.9/bits/stl_vector.h **** 
 327:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 328:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 329:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 330:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 331:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 332:/usr/include/c++/4.9/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a __x.
 333:/usr/include/c++/4.9/bits/stl_vector.h ****        *  The contents of @a __x are a valid, but unspecified %vector.
 334:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 335:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(vector&& __x) noexcept
 336:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(std::move(__x)) { }
 337:/usr/include/c++/4.9/bits/stl_vector.h **** 
 338:/usr/include/c++/4.9/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 339:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 340:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 341:/usr/include/c++/4.9/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 342:/usr/include/c++/4.9/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 343:/usr/include/c++/4.9/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 344:/usr/include/c++/4.9/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 345:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 346:/usr/include/c++/4.9/bits/stl_vector.h **** 
 347:/usr/include/c++/4.9/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 348:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 349:/usr/include/c++/4.9/bits/stl_vector.h ****       noexcept(_Alloc_traits::_S_always_equal())
 350:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(std::move(__rv), __m)
 351:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 352:/usr/include/c++/4.9/bits/stl_vector.h **** 	if (__rv.get_allocator() != __m)
 353:/usr/include/c++/4.9/bits/stl_vector.h **** 	  {
 354:/usr/include/c++/4.9/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 355:/usr/include/c++/4.9/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 356:/usr/include/c++/4.9/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 357:/usr/include/c++/4.9/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 358:/usr/include/c++/4.9/bits/stl_vector.h **** 	    __rv.clear();
 359:/usr/include/c++/4.9/bits/stl_vector.h **** 	  }
 360:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 361:/usr/include/c++/4.9/bits/stl_vector.h **** 
 362:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 363:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 364:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 365:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 366:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 367:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 368:/usr/include/c++/4.9/bits/stl_vector.h ****        *  initializer_list @a __l.
 369:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 370:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 371:/usr/include/c++/4.9/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 372:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 373:/usr/include/c++/4.9/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 374:/usr/include/c++/4.9/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 375:/usr/include/c++/4.9/bits/stl_vector.h ****       : _Base(__a)
 376:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 377:/usr/include/c++/4.9/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 378:/usr/include/c++/4.9/bits/stl_vector.h **** 			    random_access_iterator_tag());
 379:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 380:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 381:/usr/include/c++/4.9/bits/stl_vector.h **** 
 382:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 383:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 384:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 385:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 386:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __a  An allocator.
 387:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 388:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 389:/usr/include/c++/4.9/bits/stl_vector.h ****        *  [first,last).
 390:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 391:/usr/include/c++/4.9/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 392:/usr/include/c++/4.9/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 393:/usr/include/c++/4.9/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 394:/usr/include/c++/4.9/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 395:/usr/include/c++/4.9/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 396:/usr/include/c++/4.9/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 397:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 398:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 399:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator,
 400:/usr/include/c++/4.9/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 401:/usr/include/c++/4.9/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 402:/usr/include/c++/4.9/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 403:/usr/include/c++/4.9/bits/stl_vector.h **** 	: _Base(__a)
 404:/usr/include/c++/4.9/bits/stl_vector.h ****         { _M_initialize_dispatch(__first, __last, __false_type()); }
 405:/usr/include/c++/4.9/bits/stl_vector.h **** #else
 406:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator>
 407:/usr/include/c++/4.9/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 408:/usr/include/c++/4.9/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 409:/usr/include/c++/4.9/bits/stl_vector.h **** 	: _Base(__a)
 410:/usr/include/c++/4.9/bits/stl_vector.h ****         {
 411:/usr/include/c++/4.9/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 412:/usr/include/c++/4.9/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 413:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 414:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
 415:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 416:/usr/include/c++/4.9/bits/stl_vector.h **** 
 417:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 418:/usr/include/c++/4.9/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 419:/usr/include/c++/4.9/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 420:/usr/include/c++/4.9/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 421:/usr/include/c++/4.9/bits/stl_vector.h ****        *  responsibility.
 422:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 423:/usr/include/c++/4.9/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 1527              		.loc 4 423 0
 1528              		.cfi_startproc
 1529              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1530              		.cfi_lsda 0x1b,.LLSDA1373
 1531 0000 55       		pushq	%rbp
 1532              		.cfi_def_cfa_offset 16
 1533              		.cfi_offset 6, -16
 1534 0001 4889E5   		movq	%rsp, %rbp
 1535              		.cfi_def_cfa_register 6
 1536 0004 53       		pushq	%rbx
 1537 0005 4883EC18 		subq	$24, %rsp
 1538              		.cfi_offset 3, -24
 1539 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1540              	.LBB23:
 424:/usr/include/c++/4.9/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 425:/usr/include/c++/4.9/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 1541              		.loc 4 425 0
 1542 000d 488B45E8 		movq	-24(%rbp), %rax
 1543 0011 4889C7   		movq	%rax, %rdi
 1544              	.LEHB32:
 1545 0014 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1545      00
 1546 0019 4889C2   		movq	%rax, %rdx
 1547 001c 488B45E8 		movq	-24(%rbp), %rax
 1548 0020 488B4808 		movq	8(%rax), %rcx
 1549 0024 488B45E8 		movq	-24(%rbp), %rax
 1550 0028 488B00   		movq	(%rax), %rax
 424:/usr/include/c++/4.9/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 1551              		.loc 4 424 0
 1552 002b 4889CE   		movq	%rcx, %rsi
 1553 002e 4889C7   		movq	%rax, %rdi
 1554 0031 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E@PLT
 1554      00
 1555              	.LEHE32:
 1556              		.loc 4 425 0
 1557 0036 488B45E8 		movq	-24(%rbp), %rax
 1558 003a 4889C7   		movq	%rax, %rdi
 1559              	.LEHB33:
 1560 003d E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev@PLT
 1560      00
 1561              	.LEHE33:
 1562 0042 EB1A     		jmp	.L76
 1563              	.L75:
 1564 0044 4889C3   		movq	%rax, %rbx
 1565 0047 488B45E8 		movq	-24(%rbp), %rax
 1566 004b 4889C7   		movq	%rax, %rdi
 1567 004e E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev@PLT
 1567      00
 1568 0053 4889D8   		movq	%rbx, %rax
 1569 0056 4889C7   		movq	%rax, %rdi
 1570              	.LEHB34:
 1571 0059 E8000000 		call	_Unwind_Resume@PLT
 1571      00
 1572              	.LEHE34:
 1573              	.L76:
 1574              	.LBE23:
 1575 005e 4883C418 		addq	$24, %rsp
 1576 0062 5B       		popq	%rbx
 1577 0063 5D       		popq	%rbp
 1578              		.cfi_def_cfa 7, 8
 1579 0064 C3       		ret
 1580              		.cfi_endproc
 1581              	.LFE1373:
 1582              		.section	.gcc_except_table
 1583              	.LLSDA1373:
 1584 00ba FF       		.byte	0xff
 1585 00bb FF       		.byte	0xff
 1586 00bc 01       		.byte	0x1
 1587 00bd 0C       		.uleb128 .LLSDACSE1373-.LLSDACSB1373
 1588              	.LLSDACSB1373:
 1589 00be 14       		.uleb128 .LEHB32-.LFB1373
 1590 00bf 22       		.uleb128 .LEHE32-.LEHB32
 1591 00c0 44       		.uleb128 .L75-.LFB1373
 1592 00c1 00       		.uleb128 0
 1593 00c2 3D       		.uleb128 .LEHB33-.LFB1373
 1594 00c3 05       		.uleb128 .LEHE33-.LEHB33
 1595 00c4 00       		.uleb128 0
 1596 00c5 00       		.uleb128 0
 1597 00c6 59       		.uleb128 .LEHB34-.LFB1373
 1598 00c7 05       		.uleb128 .LEHE34-.LEHB34
 1599 00c8 00       		.uleb128 0
 1600 00c9 00       		.uleb128 0
 1601              	.LLSDACSE1373:
 1602              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vect
 1604              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
 1605              		.set	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev,_ZNSt6vectorIN8UnitTest18DeferredTes
 1606              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv,"axG",@progbits,_ZNKS
 1607              		.align 2
 1608              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
 1610              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:
 1611              	.LFB1375:
 426:/usr/include/c++/4.9/bits/stl_vector.h **** 
 427:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 428:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 429:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 430:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 431:/usr/include/c++/4.9/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any extra memory in
 432:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.  Unlike the
 433:/usr/include/c++/4.9/bits/stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 434:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 435:/usr/include/c++/4.9/bits/stl_vector.h ****       vector&
 436:/usr/include/c++/4.9/bits/stl_vector.h ****       operator=(const vector& __x);
 437:/usr/include/c++/4.9/bits/stl_vector.h **** 
 438:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 439:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 440:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 441:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 442:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 443:/usr/include/c++/4.9/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 444:/usr/include/c++/4.9/bits/stl_vector.h ****        *  if the allocators permit it).
 445:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @a __x is a valid, but unspecified %vector.
 446:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 447:/usr/include/c++/4.9/bits/stl_vector.h ****       vector&
 448:/usr/include/c++/4.9/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 449:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 450:/usr/include/c++/4.9/bits/stl_vector.h ****         constexpr bool __move_storage =
 451:/usr/include/c++/4.9/bits/stl_vector.h ****           _Alloc_traits::_S_propagate_on_move_assign()
 452:/usr/include/c++/4.9/bits/stl_vector.h ****           || _Alloc_traits::_S_always_equal();
 453:/usr/include/c++/4.9/bits/stl_vector.h ****         _M_move_assign(std::move(__x),
 454:/usr/include/c++/4.9/bits/stl_vector.h ****                        integral_constant<bool, __move_storage>());
 455:/usr/include/c++/4.9/bits/stl_vector.h **** 	return *this;
 456:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 457:/usr/include/c++/4.9/bits/stl_vector.h **** 
 458:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 459:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 460:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 461:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 462:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 463:/usr/include/c++/4.9/bits/stl_vector.h ****        *  initializer list @a __l.
 464:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 465:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 466:/usr/include/c++/4.9/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 467:/usr/include/c++/4.9/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 468:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 469:/usr/include/c++/4.9/bits/stl_vector.h ****       vector&
 470:/usr/include/c++/4.9/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 471:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 472:/usr/include/c++/4.9/bits/stl_vector.h **** 	this->assign(__l.begin(), __l.end());
 473:/usr/include/c++/4.9/bits/stl_vector.h **** 	return *this;
 474:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 475:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 476:/usr/include/c++/4.9/bits/stl_vector.h **** 
 477:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 478:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 479:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 480:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 481:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 482:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 483:/usr/include/c++/4.9/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 484:/usr/include/c++/4.9/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 485:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 486:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 487:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 488:/usr/include/c++/4.9/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 489:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 490:/usr/include/c++/4.9/bits/stl_vector.h **** 
 491:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 492:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 493:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 494:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 495:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 496:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 497:/usr/include/c++/4.9/bits/stl_vector.h ****        *  range [__first,__last).
 498:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 499:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 500:/usr/include/c++/4.9/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 501:/usr/include/c++/4.9/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 502:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 503:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 504:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator,
 505:/usr/include/c++/4.9/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 506:/usr/include/c++/4.9/bits/stl_vector.h ****         void
 507:/usr/include/c++/4.9/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 508:/usr/include/c++/4.9/bits/stl_vector.h ****         { _M_assign_dispatch(__first, __last, __false_type()); }
 509:/usr/include/c++/4.9/bits/stl_vector.h **** #else
 510:/usr/include/c++/4.9/bits/stl_vector.h ****       template<typename _InputIterator>
 511:/usr/include/c++/4.9/bits/stl_vector.h ****         void
 512:/usr/include/c++/4.9/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 513:/usr/include/c++/4.9/bits/stl_vector.h ****         {
 514:/usr/include/c++/4.9/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 515:/usr/include/c++/4.9/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 516:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 517:/usr/include/c++/4.9/bits/stl_vector.h **** 	}
 518:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 519:/usr/include/c++/4.9/bits/stl_vector.h **** 
 520:/usr/include/c++/4.9/bits/stl_vector.h **** #if __cplusplus >= 201103L
 521:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 522:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 523:/usr/include/c++/4.9/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 524:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 525:/usr/include/c++/4.9/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 526:/usr/include/c++/4.9/bits/stl_vector.h ****        *  initializer list @a __l.
 527:/usr/include/c++/4.9/bits/stl_vector.h ****        *
 528:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 529:/usr/include/c++/4.9/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 530:/usr/include/c++/4.9/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 531:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 532:/usr/include/c++/4.9/bits/stl_vector.h ****       void
 533:/usr/include/c++/4.9/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 534:/usr/include/c++/4.9/bits/stl_vector.h ****       { this->assign(__l.begin(), __l.end()); }
 535:/usr/include/c++/4.9/bits/stl_vector.h **** #endif
 536:/usr/include/c++/4.9/bits/stl_vector.h **** 
 537:/usr/include/c++/4.9/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 538:/usr/include/c++/4.9/bits/stl_vector.h ****       using _Base::get_allocator;
 539:/usr/include/c++/4.9/bits/stl_vector.h **** 
 540:/usr/include/c++/4.9/bits/stl_vector.h ****       // iterators
 541:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 542:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 543:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 544:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element order.
 545:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 546:/usr/include/c++/4.9/bits/stl_vector.h ****       iterator
 547:/usr/include/c++/4.9/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 548:/usr/include/c++/4.9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 549:/usr/include/c++/4.9/bits/stl_vector.h **** 
 550:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 551:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 552:/usr/include/c++/4.9/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 553:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element order.
 554:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 555:/usr/include/c++/4.9/bits/stl_vector.h ****       const_iterator
 556:/usr/include/c++/4.9/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 1612              		.loc 4 556 0
 1613              		.cfi_startproc
 1614 0000 55       		pushq	%rbp
 1615              		.cfi_def_cfa_offset 16
 1616              		.cfi_offset 6, -16
 1617 0001 4889E5   		movq	%rsp, %rbp
 1618              		.cfi_def_cfa_register 6
 1619 0004 4883EC30 		subq	$48, %rsp
 1620 0008 48897DD8 		movq	%rdi, -40(%rbp)
 1621              		.loc 4 556 0
 1622 000c 64488B04 		movq	%fs:40, %rax
 1622      25280000 
 1622      00
 1623 0015 488945F8 		movq	%rax, -8(%rbp)
 1624 0019 31C0     		xorl	%eax, %eax
 557:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1625              		.loc 4 557 0
 1626 001b 488B45D8 		movq	-40(%rbp), %rax
 1627 001f 488B00   		movq	(%rax), %rax
 1628 0022 488945F0 		movq	%rax, -16(%rbp)
 1629 0026 488D55F0 		leaq	-16(%rbp), %rdx
 1630 002a 488D45E0 		leaq	-32(%rbp), %rax
 1631 002e 4889D6   		movq	%rdx, %rsi
 1632 0031 4889C7   		movq	%rax, %rdi
 1633 0034 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 1633      00
 1634 0039 488B45E0 		movq	-32(%rbp), %rax
 1635 003d 488B4DF8 		movq	-8(%rbp), %rcx
 1636 0041 6448330C 		xorq	%fs:40, %rcx
 1636      25280000 
 1636      00
 1637 004a 7405     		je	.L79
 1638 004c E8000000 		call	__stack_chk_fail@PLT
 1638      00
 1639              	.L79:
 1640 0051 C9       		leave
 1641              		.cfi_def_cfa 7, 8
 1642 0052 C3       		ret
 1643              		.cfi_endproc
 1644              	.LFE1375:
 1646              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv,"axG",@progbits,_ZNKSt6
 1647              		.align 2
 1648              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
 1650              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:
 1651              	.LFB1376:
 558:/usr/include/c++/4.9/bits/stl_vector.h **** 
 559:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 560:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 561:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 562:/usr/include/c++/4.9/bits/stl_vector.h ****        *  element order.
 563:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 564:/usr/include/c++/4.9/bits/stl_vector.h ****       iterator
 565:/usr/include/c++/4.9/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 566:/usr/include/c++/4.9/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 567:/usr/include/c++/4.9/bits/stl_vector.h **** 
 568:/usr/include/c++/4.9/bits/stl_vector.h ****       /**
 569:/usr/include/c++/4.9/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 570:/usr/include/c++/4.9/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 571:/usr/include/c++/4.9/bits/stl_vector.h ****        *  ordinary element order.
 572:/usr/include/c++/4.9/bits/stl_vector.h ****        */
 573:/usr/include/c++/4.9/bits/stl_vector.h ****       const_iterator
 574:/usr/include/c++/4.9/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 1652              		.loc 4 574 0
 1653              		.cfi_startproc
 1654 0000 55       		pushq	%rbp
 1655              		.cfi_def_cfa_offset 16
 1656              		.cfi_offset 6, -16
 1657 0001 4889E5   		movq	%rsp, %rbp
 1658              		.cfi_def_cfa_register 6
 1659 0004 4883EC30 		subq	$48, %rsp
 1660 0008 48897DD8 		movq	%rdi, -40(%rbp)
 1661              		.loc 4 574 0
 1662 000c 64488B04 		movq	%fs:40, %rax
 1662      25280000 
 1662      00
 1663 0015 488945F8 		movq	%rax, -8(%rbp)
 1664 0019 31C0     		xorl	%eax, %eax
 575:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 1665              		.loc 4 575 0
 1666 001b 488B45D8 		movq	-40(%rbp), %rax
 1667 001f 488B4008 		movq	8(%rax), %rax
 1668 0023 488945F0 		movq	%rax, -16(%rbp)
 1669 0027 488D55F0 		leaq	-16(%rbp), %rdx
 1670 002b 488D45E0 		leaq	-32(%rbp), %rax
 1671 002f 4889D6   		movq	%rdx, %rsi
 1672 0032 4889C7   		movq	%rax, %rdi
 1673 0035 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 1673      00
 1674 003a 488B45E0 		movq	-32(%rbp), %rax
 1675 003e 488B4DF8 		movq	-8(%rbp), %rcx
 1676 0042 6448330C 		xorq	%fs:40, %rcx
 1676      25280000 
 1676      00
 1677 004b 7405     		je	.L82
 1678 004d E8000000 		call	__stack_chk_fail@PLT
 1678      00
 1679              	.L82:
 1680 0052 C9       		leave
 1681              		.cfi_def_cfa 7, 8
 1682 0053 C3       		ret
 1683              		.cfi_endproc
 1684              	.LFE1376:
 1686              		.section	.text._ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__n
 1687              		.weak	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_ite
 1689              	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT
 1690              	.LFB1377:
 1691              		.file 5 "/usr/include/c++/4.9/bits/stl_iterator.h"
   1:/usr/include/c++/4.9/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/4.9/bits/stl_iterator.h **** 
   3:/usr/include/c++/4.9/bits/stl_iterator.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/stl_iterator.h **** //
   5:/usr/include/c++/4.9/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/stl_iterator.h **** // any later version.
  10:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  11:/usr/include/c++/4.9/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  16:/usr/include/c++/4.9/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  20:/usr/include/c++/4.9/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  25:/usr/include/c++/4.9/bits/stl_iterator.h **** /*
  26:/usr/include/c++/4.9/bits/stl_iterator.h ****  *
  27:/usr/include/c++/4.9/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.9/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.9/bits/stl_iterator.h ****  *
  30:/usr/include/c++/4.9/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.9/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.9/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.9/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.9/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.9/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.9/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.9/bits/stl_iterator.h ****  *
  38:/usr/include/c++/4.9/bits/stl_iterator.h ****  *
  39:/usr/include/c++/4.9/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/4.9/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.9/bits/stl_iterator.h ****  *
  42:/usr/include/c++/4.9/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.9/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.9/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.9/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.9/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.9/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.9/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.9/bits/stl_iterator.h ****  */
  50:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  51:/usr/include/c++/4.9/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/c++/4.9/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.9/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/4.9/bits/stl_iterator.h ****  *
  55:/usr/include/c++/4.9/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/c++/4.9/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/c++/4.9/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/c++/4.9/bits/stl_iterator.h ****  */
  59:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  60:/usr/include/c++/4.9/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/c++/4.9/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  63:/usr/include/c++/4.9/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/c++/4.9/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/usr/include/c++/4.9/bits/stl_iterator.h **** #include <bits/move.h>
  66:/usr/include/c++/4.9/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  67:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  68:/usr/include/c++/4.9/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  69:/usr/include/c++/4.9/bits/stl_iterator.h **** {
  70:/usr/include/c++/4.9/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  71:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  72:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
  73:/usr/include/c++/4.9/bits/stl_iterator.h ****    * @addtogroup iterators
  74:/usr/include/c++/4.9/bits/stl_iterator.h ****    * @{
  75:/usr/include/c++/4.9/bits/stl_iterator.h ****    */
  76:/usr/include/c++/4.9/bits/stl_iterator.h **** 
  77:/usr/include/c++/4.9/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  78:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
  79:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  80:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  81:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  82:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  83:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  84:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @code
  85:/usr/include/c++/4.9/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  86:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @endcode
  87:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
  88:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  89:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  90:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  91:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
  92:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
  93:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
  94:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
  95:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
  96:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
  97:/usr/include/c++/4.9/bits/stl_iterator.h ****     class reverse_iterator
  98:/usr/include/c++/4.9/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
  99:/usr/include/c++/4.9/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 100:/usr/include/c++/4.9/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 101:/usr/include/c++/4.9/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 102:/usr/include/c++/4.9/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 103:/usr/include/c++/4.9/bits/stl_iterator.h ****     {
 104:/usr/include/c++/4.9/bits/stl_iterator.h ****     protected:
 105:/usr/include/c++/4.9/bits/stl_iterator.h ****       _Iterator current;
 106:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 107:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 108:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 109:/usr/include/c++/4.9/bits/stl_iterator.h ****     public:
 110:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 111:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 112:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 113:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 114:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 115:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 116:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 117:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 118:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 119:/usr/include/c++/4.9/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 120:/usr/include/c++/4.9/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 121:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 122:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 123:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 124:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 125:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 126:/usr/include/c++/4.9/bits/stl_iterator.h ****       explicit
 127:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 128:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 129:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 130:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The copy constructor is normal.
 131:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 132:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 133:/usr/include/c++/4.9/bits/stl_iterator.h ****       : current(__x.current) { }
 134:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 135:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 136:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 137:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 138:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 139:/usr/include/c++/4.9/bits/stl_iterator.h ****       template<typename _Iter>
 140:/usr/include/c++/4.9/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 141:/usr/include/c++/4.9/bits/stl_iterator.h **** 	: current(__x.base()) { }
 142:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 143:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 144:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 145:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 146:/usr/include/c++/4.9/bits/stl_iterator.h ****       iterator_type
 147:/usr/include/c++/4.9/bits/stl_iterator.h ****       base() const
 148:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return current; }
 149:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 150:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 151:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 152:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 153:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 154:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 155:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 156:/usr/include/c++/4.9/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 157:/usr/include/c++/4.9/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 158:/usr/include/c++/4.9/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 159:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 160:/usr/include/c++/4.9/bits/stl_iterator.h ****       reference
 161:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator*() const
 162:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 163:/usr/include/c++/4.9/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 164:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *--__tmp;
 165:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 166:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 167:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 168:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 169:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 170:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 171:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 172:/usr/include/c++/4.9/bits/stl_iterator.h ****       pointer
 173:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator->() const
 174:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return &(operator*()); }
 175:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 176:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 177:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  @c *this
 178:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 179:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 180:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 181:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator&
 182:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++()
 183:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 184:/usr/include/c++/4.9/bits/stl_iterator.h **** 	--current;
 185:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 186:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 187:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 188:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 189:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 190:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 191:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 192:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 193:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator
 194:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++(int)
 195:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 196:/usr/include/c++/4.9/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 197:/usr/include/c++/4.9/bits/stl_iterator.h **** 	--current;
 198:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return __tmp;
 199:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 200:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 201:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 202:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  @c *this
 203:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 204:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 205:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 206:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator&
 207:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator--()
 208:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 209:/usr/include/c++/4.9/bits/stl_iterator.h **** 	++current;
 210:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 211:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 212:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 213:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 214:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 215:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 216:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 217:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 218:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator
 219:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator--(int)
 220:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 221:/usr/include/c++/4.9/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 222:/usr/include/c++/4.9/bits/stl_iterator.h **** 	++current;
 223:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return __tmp;
 224:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 225:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 226:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 227:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 228:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 229:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 230:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 231:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator
 232:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator+(difference_type __n) const
 233:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 234:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 235:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 236:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  *this
 237:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 238:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 239:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 240:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 241:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator&
 242:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator+=(difference_type __n)
 243:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 244:/usr/include/c++/4.9/bits/stl_iterator.h **** 	current -= __n;
 245:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 246:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 247:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 248:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 249:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 250:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 251:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 252:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 253:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator
 254:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator-(difference_type __n) const
 255:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 256:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 257:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 258:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  *this
 259:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 260:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 261:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 262:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 263:/usr/include/c++/4.9/bits/stl_iterator.h ****       reverse_iterator&
 264:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator-=(difference_type __n)
 265:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 266:/usr/include/c++/4.9/bits/stl_iterator.h **** 	current += __n;
 267:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 268:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 269:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 270:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 271:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 272:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 273:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 274:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 275:/usr/include/c++/4.9/bits/stl_iterator.h ****       reference
 276:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator[](difference_type __n) const
 277:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *(*this + __n); }
 278:/usr/include/c++/4.9/bits/stl_iterator.h ****     };
 279:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 280:/usr/include/c++/4.9/bits/stl_iterator.h ****   //@{
 281:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
 282:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 283:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 284:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @return  A simple bool.
 285:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 286:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 287:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 288:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 289:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
 290:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 291:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 292:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 293:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 294:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 295:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 296:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 297:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 298:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 299:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 300:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 301:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 302:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 303:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 304:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 305:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 306:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return !(__x == __y); }
 307:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 308:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 309:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 310:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 311:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 312:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __y < __x; }
 313:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 314:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 315:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 316:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 317:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 318:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return !(__y < __x); }
 319:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 320:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 321:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 322:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 323:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 324:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return !(__x < __y); }
 325:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 326:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 327:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 328:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 329:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 330:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 331:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 332:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator>
 333:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline reverse_iterator<_Iterator>
 334:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 335:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 336:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 337:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 338:/usr/include/c++/4.9/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 339:/usr/include/c++/4.9/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 340:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 341:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 342:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 343:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 344:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 345:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 346:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 347:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 348:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 349:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 350:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 351:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 352:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 353:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 354:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 355:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 356:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return !(__x == __y); }
 357:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 358:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 359:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 360:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 361:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 362:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __y < __x; }
 363:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 364:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 365:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 366:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 367:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 368:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return !(__y < __x); }
 369:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 370:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 371:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 372:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 373:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 374:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return !(__x < __y); }
 375:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 376:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 377:/usr/include/c++/4.9/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 378:/usr/include/c++/4.9/bits/stl_iterator.h ****     // DR 685.
 379:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline auto
 380:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 381:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 382:/usr/include/c++/4.9/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 383:/usr/include/c++/4.9/bits/stl_iterator.h **** #else
 384:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 385:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 386:/usr/include/c++/4.9/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 387:/usr/include/c++/4.9/bits/stl_iterator.h **** #endif
 388:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 389:/usr/include/c++/4.9/bits/stl_iterator.h ****   //@}
 390:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 391:/usr/include/c++/4.9/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 392:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
 393:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 394:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 395:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 396:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 397:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  push_back.
 398:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 399:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 400:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  save typing.
 401:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
 402:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Container>
 403:/usr/include/c++/4.9/bits/stl_iterator.h ****     class back_insert_iterator
 404:/usr/include/c++/4.9/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 405:/usr/include/c++/4.9/bits/stl_iterator.h ****     {
 406:/usr/include/c++/4.9/bits/stl_iterator.h ****     protected:
 407:/usr/include/c++/4.9/bits/stl_iterator.h ****       _Container* container;
 408:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 409:/usr/include/c++/4.9/bits/stl_iterator.h ****     public:
 410:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 411:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef _Container          container_type;
 412:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 413:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 414:/usr/include/c++/4.9/bits/stl_iterator.h ****       explicit
 415:/usr/include/c++/4.9/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x) : container(&__x) { }
 416:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 417:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 418:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 419:/usr/include/c++/4.9/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 420:/usr/include/c++/4.9/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 421:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 422:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 423:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 424:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 425:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 426:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 427:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 428:/usr/include/c++/4.9/bits/stl_iterator.h **** #if __cplusplus < 201103L
 429:/usr/include/c++/4.9/bits/stl_iterator.h ****       back_insert_iterator&
 430:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 431:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 432:/usr/include/c++/4.9/bits/stl_iterator.h **** 	container->push_back(__value);
 433:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 434:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 435:/usr/include/c++/4.9/bits/stl_iterator.h **** #else
 436:/usr/include/c++/4.9/bits/stl_iterator.h ****       back_insert_iterator&
 437:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 438:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 439:/usr/include/c++/4.9/bits/stl_iterator.h **** 	container->push_back(__value);
 440:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 441:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 442:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 443:/usr/include/c++/4.9/bits/stl_iterator.h ****       back_insert_iterator&
 444:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 445:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 446:/usr/include/c++/4.9/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 447:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 448:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 449:/usr/include/c++/4.9/bits/stl_iterator.h **** #endif
 450:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 451:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.
 452:/usr/include/c++/4.9/bits/stl_iterator.h ****       back_insert_iterator&
 453:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator*()
 454:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 455:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 456:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 457:/usr/include/c++/4.9/bits/stl_iterator.h ****       back_insert_iterator&
 458:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++()
 459:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 460:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 461:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 462:/usr/include/c++/4.9/bits/stl_iterator.h ****       back_insert_iterator
 463:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++(int)
 464:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 465:/usr/include/c++/4.9/bits/stl_iterator.h ****     };
 466:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 467:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
 468:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 469:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 470:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 471:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 472:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 473:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 474:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 475:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 476:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  types for you.
 477:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
 478:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Container>
 479:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 480:/usr/include/c++/4.9/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 481:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 482:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 483:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
 484:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 485:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 486:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 487:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 488:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  push_front.
 489:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 490:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 491:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  save typing.
 492:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
 493:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Container>
 494:/usr/include/c++/4.9/bits/stl_iterator.h ****     class front_insert_iterator
 495:/usr/include/c++/4.9/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 496:/usr/include/c++/4.9/bits/stl_iterator.h ****     {
 497:/usr/include/c++/4.9/bits/stl_iterator.h ****     protected:
 498:/usr/include/c++/4.9/bits/stl_iterator.h ****       _Container* container;
 499:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 500:/usr/include/c++/4.9/bits/stl_iterator.h ****     public:
 501:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 502:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef _Container          container_type;
 503:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 504:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 505:/usr/include/c++/4.9/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x) : container(&__x) { }
 506:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 507:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 508:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 509:/usr/include/c++/4.9/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 510:/usr/include/c++/4.9/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 511:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 512:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 513:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 514:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 515:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 516:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 517:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 518:/usr/include/c++/4.9/bits/stl_iterator.h **** #if __cplusplus < 201103L
 519:/usr/include/c++/4.9/bits/stl_iterator.h ****       front_insert_iterator&
 520:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 521:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 522:/usr/include/c++/4.9/bits/stl_iterator.h **** 	container->push_front(__value);
 523:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 524:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 525:/usr/include/c++/4.9/bits/stl_iterator.h **** #else
 526:/usr/include/c++/4.9/bits/stl_iterator.h ****       front_insert_iterator&
 527:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 528:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 529:/usr/include/c++/4.9/bits/stl_iterator.h **** 	container->push_front(__value);
 530:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 531:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 532:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 533:/usr/include/c++/4.9/bits/stl_iterator.h ****       front_insert_iterator&
 534:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 535:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 536:/usr/include/c++/4.9/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 537:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 538:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 539:/usr/include/c++/4.9/bits/stl_iterator.h **** #endif
 540:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 541:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.
 542:/usr/include/c++/4.9/bits/stl_iterator.h ****       front_insert_iterator&
 543:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator*()
 544:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 545:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 546:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 547:/usr/include/c++/4.9/bits/stl_iterator.h ****       front_insert_iterator&
 548:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++()
 549:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 550:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 551:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 552:/usr/include/c++/4.9/bits/stl_iterator.h ****       front_insert_iterator
 553:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++(int)
 554:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 555:/usr/include/c++/4.9/bits/stl_iterator.h ****     };
 556:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 557:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
 558:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 559:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 560:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 561:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 562:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 563:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 564:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 565:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 566:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  types for you.
 567:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
 568:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Container>
 569:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 570:/usr/include/c++/4.9/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 571:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 572:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 573:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
 574:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 575:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 576:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 577:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 578:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 579:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  position.
 580:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 581:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 582:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  %iterator's position.)
 583:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 584:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 585:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  save typing.
 586:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
 587:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Container>
 588:/usr/include/c++/4.9/bits/stl_iterator.h ****     class insert_iterator
 589:/usr/include/c++/4.9/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 590:/usr/include/c++/4.9/bits/stl_iterator.h ****     {
 591:/usr/include/c++/4.9/bits/stl_iterator.h ****     protected:
 592:/usr/include/c++/4.9/bits/stl_iterator.h ****       _Container* container;
 593:/usr/include/c++/4.9/bits/stl_iterator.h ****       typename _Container::iterator iter;
 594:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 595:/usr/include/c++/4.9/bits/stl_iterator.h ****     public:
 596:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 597:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef _Container          container_type;
 598:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 599:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 600:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 601:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 602:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 603:/usr/include/c++/4.9/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 604:/usr/include/c++/4.9/bits/stl_iterator.h ****       : container(&__x), iter(__i) {}
 605:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 606:/usr/include/c++/4.9/bits/stl_iterator.h ****       /**
 607:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 608:/usr/include/c++/4.9/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 609:/usr/include/c++/4.9/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 610:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 611:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 612:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 613:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 614:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 615:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 616:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 617:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 618:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @code
 619:/usr/include/c++/4.9/bits/stl_iterator.h ****        *     // vector v contains A and Z
 620:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 621:/usr/include/c++/4.9/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 622:/usr/include/c++/4.9/bits/stl_iterator.h ****        *     i = 1;
 623:/usr/include/c++/4.9/bits/stl_iterator.h ****        *     i = 2;
 624:/usr/include/c++/4.9/bits/stl_iterator.h ****        *     i = 3;
 625:/usr/include/c++/4.9/bits/stl_iterator.h ****        *
 626:/usr/include/c++/4.9/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 627:/usr/include/c++/4.9/bits/stl_iterator.h ****        *  @endcode
 628:/usr/include/c++/4.9/bits/stl_iterator.h ****       */
 629:/usr/include/c++/4.9/bits/stl_iterator.h **** #if __cplusplus < 201103L
 630:/usr/include/c++/4.9/bits/stl_iterator.h ****       insert_iterator&
 631:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 632:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 633:/usr/include/c++/4.9/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 634:/usr/include/c++/4.9/bits/stl_iterator.h **** 	++iter;
 635:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 636:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 637:/usr/include/c++/4.9/bits/stl_iterator.h **** #else
 638:/usr/include/c++/4.9/bits/stl_iterator.h ****       insert_iterator&
 639:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 640:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 641:/usr/include/c++/4.9/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 642:/usr/include/c++/4.9/bits/stl_iterator.h **** 	++iter;
 643:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 644:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 645:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 646:/usr/include/c++/4.9/bits/stl_iterator.h ****       insert_iterator&
 647:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 648:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 649:/usr/include/c++/4.9/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 650:/usr/include/c++/4.9/bits/stl_iterator.h **** 	++iter;
 651:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 652:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 653:/usr/include/c++/4.9/bits/stl_iterator.h **** #endif
 654:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 655:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.
 656:/usr/include/c++/4.9/bits/stl_iterator.h ****       insert_iterator&
 657:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator*()
 658:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 659:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 660:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 661:/usr/include/c++/4.9/bits/stl_iterator.h ****       insert_iterator&
 662:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++()
 663:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 664:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 665:/usr/include/c++/4.9/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 666:/usr/include/c++/4.9/bits/stl_iterator.h ****       insert_iterator&
 667:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++(int)
 668:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *this; }
 669:/usr/include/c++/4.9/bits/stl_iterator.h ****     };
 670:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 671:/usr/include/c++/4.9/bits/stl_iterator.h ****   /**
 672:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 673:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 674:/usr/include/c++/4.9/bits/stl_iterator.h ****    *
 675:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 676:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 677:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 678:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 679:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 680:/usr/include/c++/4.9/bits/stl_iterator.h ****    *  types for you.
 681:/usr/include/c++/4.9/bits/stl_iterator.h ****   */
 682:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 683:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 684:/usr/include/c++/4.9/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 685:/usr/include/c++/4.9/bits/stl_iterator.h ****     {
 686:/usr/include/c++/4.9/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 687:/usr/include/c++/4.9/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 688:/usr/include/c++/4.9/bits/stl_iterator.h ****     }
 689:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 690:/usr/include/c++/4.9/bits/stl_iterator.h ****   // @} group iterators
 691:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 692:/usr/include/c++/4.9/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 693:/usr/include/c++/4.9/bits/stl_iterator.h **** } // namespace
 694:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 695:/usr/include/c++/4.9/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 696:/usr/include/c++/4.9/bits/stl_iterator.h **** {
 697:/usr/include/c++/4.9/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 698:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 699:/usr/include/c++/4.9/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 700:/usr/include/c++/4.9/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 701:/usr/include/c++/4.9/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 702:/usr/include/c++/4.9/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 703:/usr/include/c++/4.9/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 704:/usr/include/c++/4.9/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 705:/usr/include/c++/4.9/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 706:/usr/include/c++/4.9/bits/stl_iterator.h ****   using std::iterator_traits;
 707:/usr/include/c++/4.9/bits/stl_iterator.h ****   using std::iterator;
 708:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 709:/usr/include/c++/4.9/bits/stl_iterator.h ****     class __normal_iterator
 710:/usr/include/c++/4.9/bits/stl_iterator.h ****     {
 711:/usr/include/c++/4.9/bits/stl_iterator.h ****     protected:
 712:/usr/include/c++/4.9/bits/stl_iterator.h ****       _Iterator _M_current;
 713:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 714:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 715:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 716:/usr/include/c++/4.9/bits/stl_iterator.h ****     public:
 717:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 718:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 719:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 720:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 721:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 722:/usr/include/c++/4.9/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 723:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 724:/usr/include/c++/4.9/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 725:/usr/include/c++/4.9/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
 726:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 727:/usr/include/c++/4.9/bits/stl_iterator.h ****       explicit
 728:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 729:/usr/include/c++/4.9/bits/stl_iterator.h ****       : _M_current(__i) { }
 730:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 731:/usr/include/c++/4.9/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 732:/usr/include/c++/4.9/bits/stl_iterator.h ****       template<typename _Iter>
 733:/usr/include/c++/4.9/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 734:/usr/include/c++/4.9/bits/stl_iterator.h **** 			  typename __enable_if<
 735:/usr/include/c++/4.9/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 736:/usr/include/c++/4.9/bits/stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 737:/usr/include/c++/4.9/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 738:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 739:/usr/include/c++/4.9/bits/stl_iterator.h ****       // Forward iterator requirements
 740:/usr/include/c++/4.9/bits/stl_iterator.h ****       reference
 741:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 742:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *_M_current; }
 743:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 744:/usr/include/c++/4.9/bits/stl_iterator.h ****       pointer
 745:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 746:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return _M_current; }
 747:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 748:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator&
 749:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
 750:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 751:/usr/include/c++/4.9/bits/stl_iterator.h **** 	++_M_current;
 752:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 753:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 754:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 755:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator
 756:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 757:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 758:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 759:/usr/include/c++/4.9/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 760:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator&
 761:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
 762:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 763:/usr/include/c++/4.9/bits/stl_iterator.h **** 	--_M_current;
 764:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 765:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 766:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 767:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator
 768:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 769:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 770:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 771:/usr/include/c++/4.9/bits/stl_iterator.h ****       // Random access iterator requirements
 772:/usr/include/c++/4.9/bits/stl_iterator.h ****       reference
 773:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 774:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return _M_current[__n]; }
 775:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 776:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator&
 777:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 778:/usr/include/c++/4.9/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 779:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 780:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator
 781:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 782:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 783:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 784:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator&
 785:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 786:/usr/include/c++/4.9/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
 787:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 788:/usr/include/c++/4.9/bits/stl_iterator.h ****       __normal_iterator
 789:/usr/include/c++/4.9/bits/stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 790:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 791:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 792:/usr/include/c++/4.9/bits/stl_iterator.h ****       const _Iterator&
 793:/usr/include/c++/4.9/bits/stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
 794:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return _M_current; }
 795:/usr/include/c++/4.9/bits/stl_iterator.h ****     };
 796:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 797:/usr/include/c++/4.9/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
 798:/usr/include/c++/4.9/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
 799:/usr/include/c++/4.9/bits/stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
 800:/usr/include/c++/4.9/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
 801:/usr/include/c++/4.9/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
 802:/usr/include/c++/4.9/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
 803:/usr/include/c++/4.9/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
 804:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 805:/usr/include/c++/4.9/bits/stl_iterator.h ****   // Forward iterator requirements
 806:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 807:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 808:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 809:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 810:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 811:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 812:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 813:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 814:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 815:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 816:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 817:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 818:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 819:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 820:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 821:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 822:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 823:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 824:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 825:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 826:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 827:/usr/include/c++/4.9/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 828:/usr/include/c++/4.9/bits/stl_iterator.h ****     inline bool
 829:/usr/include/c++/4.9/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 1692              		.loc 5 829 0
 1693              		.cfi_startproc
 1694 0000 55       		pushq	%rbp
 1695              		.cfi_def_cfa_offset 16
 1696              		.cfi_offset 6, -16
 1697 0001 4889E5   		movq	%rsp, %rbp
 1698              		.cfi_def_cfa_register 6
 1699 0004 53       		pushq	%rbx
 1700 0005 4883EC18 		subq	$24, %rsp
 1701              		.cfi_offset 3, -24
 1702 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1703 000d 488975E0 		movq	%rsi, -32(%rbp)
 830:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 831:/usr/include/c++/4.9/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 832:/usr/include/c++/4.9/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 1704              		.loc 5 832 0
 1705 0011 488B45E8 		movq	-24(%rbp), %rax
 1706 0015 4889C7   		movq	%rax, %rdi
 1707 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4bas
 1707      00
 1708 001d 488B18   		movq	(%rax), %rbx
 1709 0020 488B45E0 		movq	-32(%rbp), %rax
 1710 0024 4889C7   		movq	%rax, %rdi
 1711 0027 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4bas
 1711      00
 1712 002c 488B00   		movq	(%rax), %rax
 1713 002f 4839C3   		cmpq	%rax, %rbx
 1714 0032 0F95C0   		setne	%al
 1715 0035 4883C418 		addq	$24, %rsp
 1716 0039 5B       		popq	%rbx
 1717 003a 5D       		popq	%rbp
 1718              		.cfi_def_cfa 7, 8
 1719 003b C3       		ret
 1720              		.cfi_endproc
 1721              	.LFE1377:
 1723              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 1724              		.align 2
 1725              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv
 1727              	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv:
 1728              	.LFB1378:
 749:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 1729              		.loc 5 749 0
 1730              		.cfi_startproc
 1731 0000 55       		pushq	%rbp
 1732              		.cfi_def_cfa_offset 16
 1733              		.cfi_offset 6, -16
 1734 0001 4889E5   		movq	%rsp, %rbp
 1735              		.cfi_def_cfa_register 6
 1736 0004 48897DF8 		movq	%rdi, -8(%rbp)
 751:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 1737              		.loc 5 751 0
 1738 0008 488B45F8 		movq	-8(%rbp), %rax
 1739 000c 488B00   		movq	(%rax), %rax
 1740 000f 488D5038 		leaq	56(%rax), %rdx
 1741 0013 488B45F8 		movq	-8(%rbp), %rax
 1742 0017 488910   		movq	%rdx, (%rax)
 752:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 1743              		.loc 5 752 0
 1744 001a 488B45F8 		movq	-8(%rbp), %rax
 753:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 1745              		.loc 5 753 0
 1746 001e 5D       		popq	%rbp
 1747              		.cfi_def_cfa 7, 8
 1748 001f C3       		ret
 1749              		.cfi_endproc
 1750              	.LFE1378:
 1752              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 1753              		.align 2
 1754              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeE
 1756              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:
 1757              	.LFB1379:
 741:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return *_M_current; }
 1758              		.loc 5 741 0
 1759              		.cfi_startproc
 1760 0000 55       		pushq	%rbp
 1761              		.cfi_def_cfa_offset 16
 1762              		.cfi_offset 6, -16
 1763 0001 4889E5   		movq	%rsp, %rbp
 1764              		.cfi_def_cfa_register 6
 1765 0004 48897DF8 		movq	%rdi, -8(%rbp)
 742:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 1766              		.loc 5 742 0
 1767 0008 488B45F8 		movq	-8(%rbp), %rax
 1768 000c 488B00   		movq	(%rax), %rax
 1769 000f 5D       		popq	%rbp
 1770              		.cfi_def_cfa 7, 8
 1771 0010 C3       		ret
 1772              		.cfi_endproc
 1773              	.LFE1379:
 1775              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 1776              		.align 2
 1777              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptE
 1779              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv:
 1780              	.LFB1380:
 745:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return _M_current; }
 1781              		.loc 5 745 0
 1782              		.cfi_startproc
 1783 0000 55       		pushq	%rbp
 1784              		.cfi_def_cfa_offset 16
 1785              		.cfi_offset 6, -16
 1786 0001 4889E5   		movq	%rsp, %rbp
 1787              		.cfi_def_cfa_register 6
 1788 0004 48897DF8 		movq	%rdi, -8(%rbp)
 746:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 1789              		.loc 5 746 0
 1790 0008 488B45F8 		movq	-8(%rbp), %rax
 1791 000c 488B00   		movq	(%rax), %rax
 1792 000f 5D       		popq	%rbp
 1793              		.cfi_def_cfa 7, 8
 1794 0010 C3       		ret
 1795              		.cfi_endproc
 1796              	.LFE1380:
 1798              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv,"axG",@progbits,_ZNKSt6vectorISt4pairIiS
 1799              		.align 2
 1800              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv
 1802              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv:
 1803              	.LFB1382:
 556:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1804              		.loc 4 556 0
 1805              		.cfi_startproc
 1806 0000 55       		pushq	%rbp
 1807              		.cfi_def_cfa_offset 16
 1808              		.cfi_offset 6, -16
 1809 0001 4889E5   		movq	%rsp, %rbp
 1810              		.cfi_def_cfa_register 6
 1811 0004 4883EC30 		subq	$48, %rsp
 1812 0008 48897DD8 		movq	%rdi, -40(%rbp)
 556:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1813              		.loc 4 556 0
 1814 000c 64488B04 		movq	%fs:40, %rax
 1814      25280000 
 1814      00
 1815 0015 488945F8 		movq	%rax, -8(%rbp)
 1816 0019 31C0     		xorl	%eax, %eax
 557:/usr/include/c++/4.9/bits/stl_vector.h **** 
 1817              		.loc 4 557 0
 1818 001b 488B45D8 		movq	-40(%rbp), %rax
 1819 001f 488B00   		movq	(%rax), %rax
 1820 0022 488945F0 		movq	%rax, -16(%rbp)
 1821 0026 488D55F0 		leaq	-16(%rbp), %rdx
 1822 002a 488D45E0 		leaq	-32(%rbp), %rax
 1823 002e 4889D6   		movq	%rdx, %rsi
 1824 0031 4889C7   		movq	%rax, %rdi
 1825 0034 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_@PLT
 1825      00
 1826 0039 488B45E0 		movq	-32(%rbp), %rax
 1827 003d 488B4DF8 		movq	-8(%rbp), %rcx
 1828 0041 6448330C 		xorq	%fs:40, %rcx
 1828      25280000 
 1828      00
 1829 004a 7405     		je	.L93
 1830 004c E8000000 		call	__stack_chk_fail@PLT
 1830      00
 1831              	.L93:
 1832 0051 C9       		leave
 1833              		.cfi_def_cfa 7, 8
 1834 0052 C3       		ret
 1835              		.cfi_endproc
 1836              	.LFE1382:
 1838              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv,"axG",@progbits,_ZNKSt6vectorISt4pairIiSsE
 1839              		.align 2
 1840              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv
 1842              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv:
 1843              	.LFB1383:
 574:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 1844              		.loc 4 574 0
 1845              		.cfi_startproc
 1846 0000 55       		pushq	%rbp
 1847              		.cfi_def_cfa_offset 16
 1848              		.cfi_offset 6, -16
 1849 0001 4889E5   		movq	%rsp, %rbp
 1850              		.cfi_def_cfa_register 6
 1851 0004 4883EC30 		subq	$48, %rsp
 1852 0008 48897DD8 		movq	%rdi, -40(%rbp)
 574:/usr/include/c++/4.9/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 1853              		.loc 4 574 0
 1854 000c 64488B04 		movq	%fs:40, %rax
 1854      25280000 
 1854      00
 1855 0015 488945F8 		movq	%rax, -8(%rbp)
 1856 0019 31C0     		xorl	%eax, %eax
 1857              		.loc 4 575 0
 1858 001b 488B45D8 		movq	-40(%rbp), %rax
 1859 001f 488B4008 		movq	8(%rax), %rax
 1860 0023 488945F0 		movq	%rax, -16(%rbp)
 1861 0027 488D55F0 		leaq	-16(%rbp), %rdx
 1862 002b 488D45E0 		leaq	-32(%rbp), %rax
 1863 002f 4889D6   		movq	%rdx, %rsi
 1864 0032 4889C7   		movq	%rax, %rdi
 1865 0035 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_@PLT
 1865      00
 1866 003a 488B45E0 		movq	-32(%rbp), %rax
 1867 003e 488B4DF8 		movq	-8(%rbp), %rcx
 1868 0042 6448330C 		xorq	%fs:40, %rcx
 1868      25280000 
 1868      00
 1869 004b 7405     		je	.L96
 1870 004d E8000000 		call	__stack_chk_fail@PLT
 1870      00
 1871              	.L96:
 1872 0052 C9       		leave
 1873              		.cfi_def_cfa 7, 8
 1874 0053 C3       		ret
 1875              		.cfi_endproc
 1876              	.LFE1383:
 1878              		.section	.text._ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0
 1879              		.weak	_ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
 1881              	_ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:
 1882              	.LFB1384:
 829:/usr/include/c++/4.9/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 1883              		.loc 5 829 0
 1884              		.cfi_startproc
 1885 0000 55       		pushq	%rbp
 1886              		.cfi_def_cfa_offset 16
 1887              		.cfi_offset 6, -16
 1888 0001 4889E5   		movq	%rsp, %rbp
 1889              		.cfi_def_cfa_register 6
 1890 0004 53       		pushq	%rbx
 1891 0005 4883EC18 		subq	$24, %rsp
 1892              		.cfi_offset 3, -24
 1893 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1894 000d 488975E0 		movq	%rsi, -32(%rbp)
 1895              		.loc 5 832 0
 1896 0011 488B45E8 		movq	-24(%rbp), %rax
 1897 0015 4889C7   		movq	%rax, %rdi
 1898 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 1898      00
 1899 001d 488B18   		movq	(%rax), %rbx
 1900 0020 488B45E0 		movq	-32(%rbp), %rax
 1901 0024 4889C7   		movq	%rax, %rdi
 1902 0027 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 1902      00
 1903 002c 488B00   		movq	(%rax), %rax
 1904 002f 4839C3   		cmpq	%rax, %rbx
 1905 0032 0F95C0   		setne	%al
 1906 0035 4883C418 		addq	$24, %rsp
 1907 0039 5B       		popq	%rbx
 1908 003a 5D       		popq	%rbp
 1909              		.cfi_def_cfa 7, 8
 1910 003b C3       		ret
 1911              		.cfi_endproc
 1912              	.LFE1384:
 1914              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv,"axG",@pr
 1915              		.align 2
 1916              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv
 1918              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv:
 1919              	.LFB1385:
 749:/usr/include/c++/4.9/bits/stl_iterator.h ****       {
 1920              		.loc 5 749 0
 1921              		.cfi_startproc
 1922 0000 55       		pushq	%rbp
 1923              		.cfi_def_cfa_offset 16
 1924              		.cfi_offset 6, -16
 1925 0001 4889E5   		movq	%rsp, %rbp
 1926              		.cfi_def_cfa_register 6
 1927 0004 48897DF8 		movq	%rdi, -8(%rbp)
 751:/usr/include/c++/4.9/bits/stl_iterator.h **** 	return *this;
 1928              		.loc 5 751 0
 1929 0008 488B45F8 		movq	-8(%rbp), %rax
 1930 000c 488B00   		movq	(%rax), %rax
 1931 000f 488D5010 		leaq	16(%rax), %rdx
 1932 0013 488B45F8 		movq	-8(%rbp), %rax
 1933 0017 488910   		movq	%rdx, (%rax)
 752:/usr/include/c++/4.9/bits/stl_iterator.h ****       }
 1934              		.loc 5 752 0
 1935 001a 488B45F8 		movq	-8(%rbp), %rax
 753:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 1936              		.loc 5 753 0
 1937 001e 5D       		popq	%rbp
 1938              		.cfi_def_cfa 7, 8
 1939 001f C3       		ret
 1940              		.cfi_endproc
 1941              	.LFE1385:
 1943              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEptEv,"axG",@p
 1944              		.align 2
 1945              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEptEv
 1947              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEptEv:
 1948              	.LFB1386:
 745:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return _M_current; }
 1949              		.loc 5 745 0
 1950              		.cfi_startproc
 1951 0000 55       		pushq	%rbp
 1952              		.cfi_def_cfa_offset 16
 1953              		.cfi_offset 6, -16
 1954 0001 4889E5   		movq	%rsp, %rbp
 1955              		.cfi_def_cfa_register 6
 1956 0004 48897DF8 		movq	%rdi, -8(%rbp)
 746:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 1957              		.loc 5 746 0
 1958 0008 488B45F8 		movq	-8(%rbp), %rax
 1959 000c 488B00   		movq	(%rax), %rax
 1960 000f 5D       		popq	%rbp
 1961              		.cfi_def_cfa 7, 8
 1962 0010 C3       		ret
 1963              		.cfi_endproc
 1964              	.LFE1386:
 1966              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev,"axG"
 1967              		.align 2
 1968              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev
 1970              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:
 1971              	.LFB1426:
  79:/usr/include/c++/4.9/bits/stl_vector.h ****       : public _Tp_alloc_type
 1972              		.loc 4 79 0
 1973              		.cfi_startproc
 1974 0000 55       		pushq	%rbp
 1975              		.cfi_def_cfa_offset 16
 1976              		.cfi_offset 6, -16
 1977 0001 4889E5   		movq	%rsp, %rbp
 1978              		.cfi_def_cfa_register 6
 1979 0004 4883EC10 		subq	$16, %rsp
 1980 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1981              	.LBB24:
  79:/usr/include/c++/4.9/bits/stl_vector.h ****       : public _Tp_alloc_type
 1982              		.loc 4 79 0
 1983 000c 488B45F8 		movq	-8(%rbp), %rax
 1984 0010 4889C7   		movq	%rax, %rdi
 1985 0013 E8000000 		call	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev@PLT
 1985      00
 1986              	.LBE24:
 1987 0018 C9       		leave
 1988              		.cfi_def_cfa 7, 8
 1989 0019 C3       		ret
 1990              		.cfi_endproc
 1991              	.LFE1426:
 1993              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev
 1994              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev,_ZNSt12_Vector_
 1995              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev,"axG",@progbits,_ZN
 1996              		.align 2
 1997              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
 1999              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:
 2000              	.LFB1428:
 124:/usr/include/c++/4.9/bits/stl_vector.h ****       : _M_impl() { }
 2001              		.loc 4 124 0
 2002              		.cfi_startproc
 2003 0000 55       		pushq	%rbp
 2004              		.cfi_def_cfa_offset 16
 2005              		.cfi_offset 6, -16
 2006 0001 4889E5   		movq	%rsp, %rbp
 2007              		.cfi_def_cfa_register 6
 2008 0004 4883EC10 		subq	$16, %rsp
 2009 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2010              	.LBB25:
 125:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2011              		.loc 4 125 0
 2012 000c 488B45F8 		movq	-8(%rbp), %rax
 2013 0010 4889C7   		movq	%rax, %rdi
 2014 0013 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev@PLT
 2014      00
 2015              	.LBE25:
 2016 0018 C9       		leave
 2017              		.cfi_def_cfa 7, 8
 2018 0019 C3       		ret
 2019              		.cfi_endproc
 2020              	.LFE1428:
 2022              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
 2023              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev,_ZNSt12_Vector_baseIN8UnitTes
 2024              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZN
 2025              		.align 2
 2026              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
 2028              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:
 2029              	.LFB1431:
 159:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 2030              		.loc 4 159 0
 2031              		.cfi_startproc
 2032              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2033              		.cfi_lsda 0x1b,.LLSDA1431
 2034 0000 55       		pushq	%rbp
 2035              		.cfi_def_cfa_offset 16
 2036              		.cfi_offset 6, -16
 2037 0001 4889E5   		movq	%rsp, %rbp
 2038              		.cfi_def_cfa_register 6
 2039 0004 53       		pushq	%rbx
 2040 0005 4883EC18 		subq	$24, %rsp
 2041              		.cfi_offset 3, -24
 2042 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2043              	.LBB26:
 161:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2044              		.loc 4 161 0
 2045 000d 488B45E8 		movq	-24(%rbp), %rax
 2046 0011 488B4010 		movq	16(%rax), %rax
 2047 0015 4889C2   		movq	%rax, %rdx
 2048 0018 488B45E8 		movq	-24(%rbp), %rax
 2049 001c 488B00   		movq	(%rax), %rax
 2050 001f 4829C2   		subq	%rax, %rdx
 2051 0022 4889D0   		movq	%rdx, %rax
 2052 0025 48C1F803 		sarq	$3, %rax
 2053 0029 4889C2   		movq	%rax, %rdx
 2054 002c 48B8B76D 		movabsq	$7905747460161236407, %rax
 2054      DBB66DDB 
 2054      B66D
 2055 0036 480FAFC2 		imulq	%rdx, %rax
 2056 003a 4889C2   		movq	%rax, %rdx
 2057 003d 488B45E8 		movq	-24(%rbp), %rax
 2058 0041 488B08   		movq	(%rax), %rcx
 160:/usr/include/c++/4.9/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 2059              		.loc 4 160 0
 2060 0044 488B45E8 		movq	-24(%rbp), %rax
 2061 0048 4889CE   		movq	%rcx, %rsi
 2062 004b 4889C7   		movq	%rax, %rdi
 2063              	.LEHB35:
 2064 004e E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m@PLT
 2064      00
 2065              	.LEHE35:
 161:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2066              		.loc 4 161 0
 2067 0053 488B45E8 		movq	-24(%rbp), %rax
 2068 0057 4889C7   		movq	%rax, %rdi
 2069 005a E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev@PLT
 2069      00
 2070 005f EB1A     		jmp	.L110
 2071              	.L109:
 2072 0061 4889C3   		movq	%rax, %rbx
 2073 0064 488B45E8 		movq	-24(%rbp), %rax
 2074 0068 4889C7   		movq	%rax, %rdi
 2075 006b E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev@PLT
 2075      00
 2076 0070 4889D8   		movq	%rbx, %rax
 2077 0073 4889C7   		movq	%rax, %rdi
 2078              	.LEHB36:
 2079 0076 E8000000 		call	_Unwind_Resume@PLT
 2079      00
 2080              	.LEHE36:
 2081              	.L110:
 2082              	.LBE26:
 2083 007b 4883C418 		addq	$24, %rsp
 2084 007f 5B       		popq	%rbx
 2085 0080 5D       		popq	%rbp
 2086              		.cfi_def_cfa 7, 8
 2087 0081 C3       		ret
 2088              		.cfi_endproc
 2089              	.LFE1431:
 2090              		.section	.gcc_except_table
 2091              	.LLSDA1431:
 2092 00ca FF       		.byte	0xff
 2093 00cb FF       		.byte	0xff
 2094 00cc 01       		.byte	0x1
 2095 00cd 08       		.uleb128 .LLSDACSE1431-.LLSDACSB1431
 2096              	.LLSDACSB1431:
 2097 00ce 4E       		.uleb128 .LEHB35-.LFB1431
 2098 00cf 05       		.uleb128 .LEHE35-.LEHB35
 2099 00d0 61       		.uleb128 .L109-.LFB1431
 2100 00d1 00       		.uleb128 0
 2101 00d2 76       		.uleb128 .LEHB36-.LFB1431
 2102 00d3 05       		.uleb128 .LEHE36-.LEHB36
 2103 00d4 00       		.uleb128 0
 2104 00d5 00       		.uleb128 0
 2105              	.LLSDACSE1431:
 2106              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZN
 2108              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
 2109              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev,_ZNSt12_Vector_baseIN8UnitTes
 2110              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv,
 2111              		.align 2
 2112              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 2114              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:
 2115              	.LFB1433:
 113:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 2116              		.loc 4 113 0
 2117              		.cfi_startproc
 2118 0000 55       		pushq	%rbp
 2119              		.cfi_def_cfa_offset 16
 2120              		.cfi_offset 6, -16
 2121 0001 4889E5   		movq	%rsp, %rbp
 2122              		.cfi_def_cfa_register 6
 2123 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2124              		.loc 4 114 0
 2125 0008 488B45F8 		movq	-8(%rbp), %rax
 2126 000c 5D       		popq	%rbp
 2127              		.cfi_def_cfa 7, 8
 2128 000d C3       		ret
 2129              		.cfi_endproc
 2130              	.LFE1433:
 2132              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E,"axG",@progbits,_Z
 2133              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
 2135              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:
 2136              	.LFB1434:
 2137              		.file 6 "/usr/include/c++/4.9/bits/stl_construct.h"
   1:/usr/include/c++/4.9/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/4.9/bits/stl_construct.h **** 
   3:/usr/include/c++/4.9/bits/stl_construct.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/stl_construct.h **** //
   5:/usr/include/c++/4.9/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/4.9/bits/stl_construct.h **** 
  11:/usr/include/c++/4.9/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/stl_construct.h **** 
  16:/usr/include/c++/4.9/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/stl_construct.h **** 
  20:/usr/include/c++/4.9/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/stl_construct.h **** 
  25:/usr/include/c++/4.9/bits/stl_construct.h **** /*
  26:/usr/include/c++/4.9/bits/stl_construct.h ****  *
  27:/usr/include/c++/4.9/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.9/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.9/bits/stl_construct.h ****  *
  30:/usr/include/c++/4.9/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.9/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.9/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.9/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.9/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.9/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.9/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.9/bits/stl_construct.h ****  *
  38:/usr/include/c++/4.9/bits/stl_construct.h ****  *
  39:/usr/include/c++/4.9/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/4.9/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.9/bits/stl_construct.h ****  *
  42:/usr/include/c++/4.9/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.9/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.9/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.9/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.9/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.9/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.9/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.9/bits/stl_construct.h ****  */
  50:/usr/include/c++/4.9/bits/stl_construct.h **** 
  51:/usr/include/c++/4.9/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/4.9/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.9/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/4.9/bits/stl_construct.h ****  */
  55:/usr/include/c++/4.9/bits/stl_construct.h **** 
  56:/usr/include/c++/4.9/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/4.9/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/4.9/bits/stl_construct.h **** 
  59:/usr/include/c++/4.9/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/4.9/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/4.9/bits/stl_construct.h **** #include <ext/alloc_traits.h>
  62:/usr/include/c++/4.9/bits/stl_construct.h **** 
  63:/usr/include/c++/4.9/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/c++/4.9/bits/stl_construct.h **** {
  65:/usr/include/c++/4.9/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/c++/4.9/bits/stl_construct.h **** 
  67:/usr/include/c++/4.9/bits/stl_construct.h ****   /**
  68:/usr/include/c++/4.9/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:/usr/include/c++/4.9/bits/stl_construct.h ****    * object's constructor with an initializer.
  70:/usr/include/c++/4.9/bits/stl_construct.h ****    */
  71:/usr/include/c++/4.9/bits/stl_construct.h **** #if __cplusplus >= 201103L
  72:/usr/include/c++/4.9/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  73:/usr/include/c++/4.9/bits/stl_construct.h ****     inline void
  74:/usr/include/c++/4.9/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:/usr/include/c++/4.9/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  76:/usr/include/c++/4.9/bits/stl_construct.h **** #else
  77:/usr/include/c++/4.9/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  78:/usr/include/c++/4.9/bits/stl_construct.h ****     inline void
  79:/usr/include/c++/4.9/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  80:/usr/include/c++/4.9/bits/stl_construct.h ****     {
  81:/usr/include/c++/4.9/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:/usr/include/c++/4.9/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:/usr/include/c++/4.9/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:/usr/include/c++/4.9/bits/stl_construct.h ****     }
  85:/usr/include/c++/4.9/bits/stl_construct.h **** #endif
  86:/usr/include/c++/4.9/bits/stl_construct.h **** 
  87:/usr/include/c++/4.9/bits/stl_construct.h ****   /**
  88:/usr/include/c++/4.9/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  89:/usr/include/c++/4.9/bits/stl_construct.h ****    */
  90:/usr/include/c++/4.9/bits/stl_construct.h ****   template<typename _Tp>
  91:/usr/include/c++/4.9/bits/stl_construct.h ****     inline void
  92:/usr/include/c++/4.9/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  93:/usr/include/c++/4.9/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  94:/usr/include/c++/4.9/bits/stl_construct.h **** 
  95:/usr/include/c++/4.9/bits/stl_construct.h ****   template<bool>
  96:/usr/include/c++/4.9/bits/stl_construct.h ****     struct _Destroy_aux
  97:/usr/include/c++/4.9/bits/stl_construct.h ****     {
  98:/usr/include/c++/4.9/bits/stl_construct.h ****       template<typename _ForwardIterator>
  99:/usr/include/c++/4.9/bits/stl_construct.h ****         static void
 100:/usr/include/c++/4.9/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 101:/usr/include/c++/4.9/bits/stl_construct.h **** 	{
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 103:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 104:/usr/include/c++/4.9/bits/stl_construct.h **** 	}
 105:/usr/include/c++/4.9/bits/stl_construct.h ****     };
 106:/usr/include/c++/4.9/bits/stl_construct.h **** 
 107:/usr/include/c++/4.9/bits/stl_construct.h ****   template<>
 108:/usr/include/c++/4.9/bits/stl_construct.h ****     struct _Destroy_aux<true>
 109:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 110:/usr/include/c++/4.9/bits/stl_construct.h ****       template<typename _ForwardIterator>
 111:/usr/include/c++/4.9/bits/stl_construct.h ****         static void
 112:/usr/include/c++/4.9/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 113:/usr/include/c++/4.9/bits/stl_construct.h ****     };
 114:/usr/include/c++/4.9/bits/stl_construct.h **** 
 115:/usr/include/c++/4.9/bits/stl_construct.h ****   /**
 116:/usr/include/c++/4.9/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 117:/usr/include/c++/4.9/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 118:/usr/include/c++/4.9/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 119:/usr/include/c++/4.9/bits/stl_construct.h ****    */
 120:/usr/include/c++/4.9/bits/stl_construct.h ****   template<typename _ForwardIterator>
 121:/usr/include/c++/4.9/bits/stl_construct.h ****     inline void
 122:/usr/include/c++/4.9/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 123:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 124:/usr/include/c++/4.9/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 125:/usr/include/c++/4.9/bits/stl_construct.h ****                        _Value_type;
 126:/usr/include/c++/4.9/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 127:/usr/include/c++/4.9/bits/stl_construct.h **** 	__destroy(__first, __last);
 128:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 129:/usr/include/c++/4.9/bits/stl_construct.h **** 
 130:/usr/include/c++/4.9/bits/stl_construct.h ****   /**
 131:/usr/include/c++/4.9/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 132:/usr/include/c++/4.9/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 133:/usr/include/c++/4.9/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 134:/usr/include/c++/4.9/bits/stl_construct.h ****    */
 135:/usr/include/c++/4.9/bits/stl_construct.h **** 
 136:/usr/include/c++/4.9/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 137:/usr/include/c++/4.9/bits/stl_construct.h ****     void
 138:/usr/include/c++/4.9/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 139:/usr/include/c++/4.9/bits/stl_construct.h **** 	     _Allocator& __alloc)
 140:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 141:/usr/include/c++/4.9/bits/stl_construct.h ****       typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 142:/usr/include/c++/4.9/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 143:/usr/include/c++/4.9/bits/stl_construct.h **** 	__traits::destroy(__alloc, std::__addressof(*__first));
 144:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 145:/usr/include/c++/4.9/bits/stl_construct.h **** 
 146:/usr/include/c++/4.9/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 147:/usr/include/c++/4.9/bits/stl_construct.h ****     inline void
 148:/usr/include/c++/4.9/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 2138              		.loc 6 148 0
 2139              		.cfi_startproc
 2140 0000 55       		pushq	%rbp
 2141              		.cfi_def_cfa_offset 16
 2142              		.cfi_offset 6, -16
 2143 0001 4889E5   		movq	%rsp, %rbp
 2144              		.cfi_def_cfa_register 6
 2145 0004 4883EC20 		subq	$32, %rsp
 2146 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2147 000c 488975F0 		movq	%rsi, -16(%rbp)
 2148 0010 488955E8 		movq	%rdx, -24(%rbp)
 149:/usr/include/c++/4.9/bits/stl_construct.h **** 	     allocator<_Tp>&)
 150:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 151:/usr/include/c++/4.9/bits/stl_construct.h ****       _Destroy(__first, __last);
 2149              		.loc 6 151 0
 2150 0014 488B55F0 		movq	-16(%rbp), %rdx
 2151 0018 488B45F8 		movq	-8(%rbp), %rax
 2152 001c 4889D6   		movq	%rdx, %rsi
 2153 001f 4889C7   		movq	%rax, %rdi
 2154 0022 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_@PLT
 2154      00
 152:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 2155              		.loc 6 152 0
 2156 0027 C9       		leave
 2157              		.cfi_def_cfa 7, 8
 2158 0028 C3       		ret
 2159              		.cfi_endproc
 2160              	.LFE1434:
 2162              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 2163              		.align 2
 2164              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ER
 2166              	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:
 2167              	.LFB1436:
 728:/usr/include/c++/4.9/bits/stl_iterator.h ****       : _M_current(__i) { }
 2168              		.loc 5 728 0
 2169              		.cfi_startproc
 2170 0000 55       		pushq	%rbp
 2171              		.cfi_def_cfa_offset 16
 2172              		.cfi_offset 6, -16
 2173 0001 4889E5   		movq	%rsp, %rbp
 2174              		.cfi_def_cfa_register 6
 2175 0004 48897DF8 		movq	%rdi, -8(%rbp)
 2176 0008 488975F0 		movq	%rsi, -16(%rbp)
 2177              	.LBB27:
 729:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 2178              		.loc 5 729 0
 2179 000c 488B45F0 		movq	-16(%rbp), %rax
 2180 0010 488B10   		movq	(%rax), %rdx
 2181 0013 488B45F8 		movq	-8(%rbp), %rax
 2182 0017 488910   		movq	%rdx, (%rax)
 2183              	.LBE27:
 2184 001a 5D       		popq	%rbp
 2185              		.cfi_def_cfa 7, 8
 2186 001b C3       		ret
 2187              		.cfi_endproc
 2188              	.LFE1436:
 2190              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ER
 2191              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 2192              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 2193              		.align 2
 2194              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4ba
 2196              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:
 2197              	.LFB1438:
 793:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return _M_current; }
 2198              		.loc 5 793 0
 2199              		.cfi_startproc
 2200 0000 55       		pushq	%rbp
 2201              		.cfi_def_cfa_offset 16
 2202              		.cfi_offset 6, -16
 2203 0001 4889E5   		movq	%rsp, %rbp
 2204              		.cfi_def_cfa_register 6
 2205 0004 48897DF8 		movq	%rdi, -8(%rbp)
 794:/usr/include/c++/4.9/bits/stl_iterator.h ****     };
 2206              		.loc 5 794 0
 2207 0008 488B45F8 		movq	-8(%rbp), %rax
 2208 000c 5D       		popq	%rbp
 2209              		.cfi_def_cfa 7, 8
 2210 000d C3       		ret
 2211              		.cfi_endproc
 2212              	.LFE1438:
 2214              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_,"axG"
 2215              		.align 2
 2216              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_
 2218              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_:
 2219              	.LFB1440:
 728:/usr/include/c++/4.9/bits/stl_iterator.h ****       : _M_current(__i) { }
 2220              		.loc 5 728 0
 2221              		.cfi_startproc
 2222 0000 55       		pushq	%rbp
 2223              		.cfi_def_cfa_offset 16
 2224              		.cfi_offset 6, -16
 2225 0001 4889E5   		movq	%rsp, %rbp
 2226              		.cfi_def_cfa_register 6
 2227 0004 48897DF8 		movq	%rdi, -8(%rbp)
 2228 0008 488975F0 		movq	%rsi, -16(%rbp)
 2229              	.LBB28:
 729:/usr/include/c++/4.9/bits/stl_iterator.h **** 
 2230              		.loc 5 729 0
 2231 000c 488B45F0 		movq	-16(%rbp), %rax
 2232 0010 488B10   		movq	(%rax), %rdx
 2233 0013 488B45F8 		movq	-8(%rbp), %rax
 2234 0017 488910   		movq	%rdx, (%rax)
 2235              	.LBE28:
 2236 001a 5D       		popq	%rbp
 2237              		.cfi_def_cfa 7, 8
 2238 001b C3       		ret
 2239              		.cfi_endproc
 2240              	.LFE1440:
 2242              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_
 2243              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_,_ZN9__gnu_cxx17
 2244              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv,"axG"
 2245              		.align 2
 2246              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv
 2248              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv:
 2249              	.LFB1442:
 793:/usr/include/c++/4.9/bits/stl_iterator.h ****       { return _M_current; }
 2250              		.loc 5 793 0
 2251              		.cfi_startproc
 2252 0000 55       		pushq	%rbp
 2253              		.cfi_def_cfa_offset 16
 2254              		.cfi_offset 6, -16
 2255 0001 4889E5   		movq	%rsp, %rbp
 2256              		.cfi_def_cfa_register 6
 2257 0004 48897DF8 		movq	%rdi, -8(%rbp)
 794:/usr/include/c++/4.9/bits/stl_iterator.h ****     };
 2258              		.loc 5 794 0
 2259 0008 488B45F8 		movq	-8(%rbp), %rax
 2260 000c 5D       		popq	%rbp
 2261              		.cfi_def_cfa 7, 8
 2262 000d C3       		ret
 2263              		.cfi_endproc
 2264              	.LFE1442:
 2266              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev,"axG"
 2267              		.align 2
 2268              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev
 2270              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:
 2271              	.LFB1463:
  86:/usr/include/c++/4.9/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 2272              		.loc 4 86 0
 2273              		.cfi_startproc
 2274 0000 55       		pushq	%rbp
 2275              		.cfi_def_cfa_offset 16
 2276              		.cfi_offset 6, -16
 2277 0001 4889E5   		movq	%rsp, %rbp
 2278              		.cfi_def_cfa_register 6
 2279 0004 4883EC10 		subq	$16, %rsp
 2280 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2281              	.LBB29:
  87:/usr/include/c++/4.9/bits/stl_vector.h **** 	{ }
 2282              		.loc 4 87 0
 2283 000c 488B45F8 		movq	-8(%rbp), %rax
 2284 0010 4889C7   		movq	%rax, %rdi
 2285 0013 E8000000 		call	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev@PLT
 2285      00
 2286 0018 488B45F8 		movq	-8(%rbp), %rax
 2287 001c 48C70000 		movq	$0, (%rax)
 2287      000000
 2288 0023 488B45F8 		movq	-8(%rbp), %rax
 2289 0027 48C74008 		movq	$0, 8(%rax)
 2289      00000000 
 2290 002f 488B45F8 		movq	-8(%rbp), %rax
 2291 0033 48C74010 		movq	$0, 16(%rax)
 2291      00000000 
 2292              	.LBE29:
  88:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2293              		.loc 4 88 0
 2294 003b C9       		leave
 2295              		.cfi_def_cfa 7, 8
 2296 003c C3       		ret
 2297              		.cfi_endproc
 2298              	.LFE1463:
 2300              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev
 2301              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev,_ZNSt12_Vector_
 2302              		.section	.text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev,"axG",@progbits,_ZNSaIN8UnitTest18Deferr
 2303              		.align 2
 2304              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev
 2306              	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev:
 2307              	.LFB1466:
 2308              		.file 7 "/usr/include/c++/4.9/bits/allocator.h"
   1:/usr/include/c++/4.9/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/4.9/bits/allocator.h **** 
   3:/usr/include/c++/4.9/bits/allocator.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/allocator.h **** //
   5:/usr/include/c++/4.9/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/allocator.h **** // any later version.
  10:/usr/include/c++/4.9/bits/allocator.h **** 
  11:/usr/include/c++/4.9/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/allocator.h **** 
  16:/usr/include/c++/4.9/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/allocator.h **** 
  20:/usr/include/c++/4.9/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/allocator.h **** 
  25:/usr/include/c++/4.9/bits/allocator.h **** /*
  26:/usr/include/c++/4.9/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/4.9/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/4.9/bits/allocator.h ****  *
  29:/usr/include/c++/4.9/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/4.9/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/4.9/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/4.9/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/4.9/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/4.9/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/4.9/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/4.9/bits/allocator.h ****  */
  37:/usr/include/c++/4.9/bits/allocator.h **** 
  38:/usr/include/c++/4.9/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/4.9/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/4.9/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/4.9/bits/allocator.h ****  */
  42:/usr/include/c++/4.9/bits/allocator.h **** 
  43:/usr/include/c++/4.9/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/4.9/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/4.9/bits/allocator.h **** 
  46:/usr/include/c++/4.9/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/4.9/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/4.9/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/4.9/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/4.9/bits/allocator.h **** #endif
  51:/usr/include/c++/4.9/bits/allocator.h **** 
  52:/usr/include/c++/4.9/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/include/c++/4.9/bits/allocator.h **** {
  54:/usr/include/c++/4.9/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/include/c++/4.9/bits/allocator.h **** 
  56:/usr/include/c++/4.9/bits/allocator.h ****   /**
  57:/usr/include/c++/4.9/bits/allocator.h ****    *  @addtogroup allocators
  58:/usr/include/c++/4.9/bits/allocator.h ****    *  @{
  59:/usr/include/c++/4.9/bits/allocator.h ****    */
  60:/usr/include/c++/4.9/bits/allocator.h **** 
  61:/usr/include/c++/4.9/bits/allocator.h ****   /// allocator<void> specialization.
  62:/usr/include/c++/4.9/bits/allocator.h ****   template<>
  63:/usr/include/c++/4.9/bits/allocator.h ****     class allocator<void>
  64:/usr/include/c++/4.9/bits/allocator.h ****     {
  65:/usr/include/c++/4.9/bits/allocator.h ****     public:
  66:/usr/include/c++/4.9/bits/allocator.h ****       typedef size_t      size_type;
  67:/usr/include/c++/4.9/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  68:/usr/include/c++/4.9/bits/allocator.h ****       typedef void*       pointer;
  69:/usr/include/c++/4.9/bits/allocator.h ****       typedef const void* const_pointer;
  70:/usr/include/c++/4.9/bits/allocator.h ****       typedef void        value_type;
  71:/usr/include/c++/4.9/bits/allocator.h **** 
  72:/usr/include/c++/4.9/bits/allocator.h ****       template<typename _Tp1>
  73:/usr/include/c++/4.9/bits/allocator.h ****         struct rebind
  74:/usr/include/c++/4.9/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
  75:/usr/include/c++/4.9/bits/allocator.h **** 
  76:/usr/include/c++/4.9/bits/allocator.h **** #if __cplusplus >= 201103L
  77:/usr/include/c++/4.9/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  78:/usr/include/c++/4.9/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  79:/usr/include/c++/4.9/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  80:/usr/include/c++/4.9/bits/allocator.h **** #endif
  81:/usr/include/c++/4.9/bits/allocator.h ****     };
  82:/usr/include/c++/4.9/bits/allocator.h **** 
  83:/usr/include/c++/4.9/bits/allocator.h ****   /**
  84:/usr/include/c++/4.9/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
  85:/usr/include/c++/4.9/bits/allocator.h ****    *
  86:/usr/include/c++/4.9/bits/allocator.h ****    *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt04ch11.html
  87:/usr/include/c++/4.9/bits/allocator.h ****    *  for further details.
  88:/usr/include/c++/4.9/bits/allocator.h ****    *
  89:/usr/include/c++/4.9/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  90:/usr/include/c++/4.9/bits/allocator.h ****    */
  91:/usr/include/c++/4.9/bits/allocator.h ****   template<typename _Tp>
  92:/usr/include/c++/4.9/bits/allocator.h ****     class allocator: public __allocator_base<_Tp>
  93:/usr/include/c++/4.9/bits/allocator.h ****     {
  94:/usr/include/c++/4.9/bits/allocator.h ****    public:
  95:/usr/include/c++/4.9/bits/allocator.h ****       typedef size_t     size_type;
  96:/usr/include/c++/4.9/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
  97:/usr/include/c++/4.9/bits/allocator.h ****       typedef _Tp*       pointer;
  98:/usr/include/c++/4.9/bits/allocator.h ****       typedef const _Tp* const_pointer;
  99:/usr/include/c++/4.9/bits/allocator.h ****       typedef _Tp&       reference;
 100:/usr/include/c++/4.9/bits/allocator.h ****       typedef const _Tp& const_reference;
 101:/usr/include/c++/4.9/bits/allocator.h ****       typedef _Tp        value_type;
 102:/usr/include/c++/4.9/bits/allocator.h **** 
 103:/usr/include/c++/4.9/bits/allocator.h ****       template<typename _Tp1>
 104:/usr/include/c++/4.9/bits/allocator.h ****         struct rebind
 105:/usr/include/c++/4.9/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
 106:/usr/include/c++/4.9/bits/allocator.h **** 
 107:/usr/include/c++/4.9/bits/allocator.h **** #if __cplusplus >= 201103L
 108:/usr/include/c++/4.9/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 109:/usr/include/c++/4.9/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 110:/usr/include/c++/4.9/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 111:/usr/include/c++/4.9/bits/allocator.h **** #endif
 112:/usr/include/c++/4.9/bits/allocator.h **** 
 113:/usr/include/c++/4.9/bits/allocator.h ****       allocator() throw() { }
 114:/usr/include/c++/4.9/bits/allocator.h **** 
 115:/usr/include/c++/4.9/bits/allocator.h ****       allocator(const allocator& __a) throw()
 116:/usr/include/c++/4.9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 117:/usr/include/c++/4.9/bits/allocator.h **** 
 118:/usr/include/c++/4.9/bits/allocator.h ****       template<typename _Tp1>
 119:/usr/include/c++/4.9/bits/allocator.h ****         allocator(const allocator<_Tp1>&) throw() { }
 120:/usr/include/c++/4.9/bits/allocator.h **** 
 121:/usr/include/c++/4.9/bits/allocator.h ****       ~allocator() throw() { }
 2309              		.loc 7 121 0
 2310              		.cfi_startproc
 2311 0000 55       		pushq	%rbp
 2312              		.cfi_def_cfa_offset 16
 2313              		.cfi_offset 6, -16
 2314 0001 4889E5   		movq	%rsp, %rbp
 2315              		.cfi_def_cfa_register 6
 2316 0004 4883EC10 		subq	$16, %rsp
 2317 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2318              	.LBB30:
 2319              		.loc 7 121 0
 2320 000c 488B45F8 		movq	-8(%rbp), %rax
 2321 0010 4889C7   		movq	%rax, %rdi
 2322 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev@PLT
 2322      00
 2323              	.LBE30:
 2324 0018 C9       		leave
 2325              		.cfi_def_cfa 7, 8
 2326 0019 C3       		ret
 2327              		.cfi_endproc
 2328              	.LFE1466:
 2330              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEED1Ev
 2331              		.set	_ZNSaIN8UnitTest18DeferredTestResultEED1Ev,_ZNSaIN8UnitTest18DeferredTestResultEED2Ev
 2332              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m,"a
 2333              		.align 2
 2334              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
 2336              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:
 2337              	.LFB1468:
 174:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 2338              		.loc 4 174 0
 2339              		.cfi_startproc
 2340 0000 55       		pushq	%rbp
 2341              		.cfi_def_cfa_offset 16
 2342              		.cfi_offset 6, -16
 2343 0001 4889E5   		movq	%rsp, %rbp
 2344              		.cfi_def_cfa_register 6
 2345 0004 4883EC20 		subq	$32, %rsp
 2346 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2347 000c 488975F0 		movq	%rsi, -16(%rbp)
 2348 0010 488955E8 		movq	%rdx, -24(%rbp)
 2349              	.LBB31:
 177:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 2350              		.loc 4 177 0
 2351 0014 48837DF0 		cmpq	$0, -16(%rbp)
 2351      00
 2352 0019 7417     		je	.L123
 178:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 2353              		.loc 4 178 0
 2354 001b 488B45F8 		movq	-8(%rbp), %rax
 2355 001f 488B55E8 		movq	-24(%rbp), %rdx
 2356 0023 488B4DF0 		movq	-16(%rbp), %rcx
 2357 0027 4889CE   		movq	%rcx, %rsi
 2358 002a 4889C7   		movq	%rax, %rdi
 2359 002d E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m@PLT
 2359      00
 2360              	.L123:
 2361              	.LBE31:
 179:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2362              		.loc 4 179 0
 2363 0032 C9       		leave
 2364              		.cfi_def_cfa 7, 8
 2365 0033 C3       		ret
 2366              		.cfi_endproc
 2367              	.LFE1468:
 2369              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_,"axG",@progbits,_ZSt8_Destroy
 2370              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
 2372              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:
 2373              	.LFB1469:
 122:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 2374              		.loc 6 122 0
 2375              		.cfi_startproc
 2376 0000 55       		pushq	%rbp
 2377              		.cfi_def_cfa_offset 16
 2378              		.cfi_offset 6, -16
 2379 0001 4889E5   		movq	%rsp, %rbp
 2380              		.cfi_def_cfa_register 6
 2381 0004 4883EC10 		subq	$16, %rsp
 2382 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2383 000c 488975F0 		movq	%rsi, -16(%rbp)
 2384              	.LBB32:
 126:/usr/include/c++/4.9/bits/stl_construct.h **** 	__destroy(__first, __last);
 2385              		.loc 6 126 0
 2386 0010 488B55F0 		movq	-16(%rbp), %rdx
 2387 0014 488B45F8 		movq	-8(%rbp), %rax
 2388 0018 4889D6   		movq	%rdx, %rsi
 2389 001b 4889C7   		movq	%rax, %rdi
 2390 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_@PLT
 2390      00
 2391              	.LBE32:
 128:/usr/include/c++/4.9/bits/stl_construct.h **** 
 2392              		.loc 6 128 0
 2393 0023 C9       		leave
 2394              		.cfi_def_cfa 7, 8
 2395 0024 C3       		ret
 2396              		.cfi_endproc
 2397              	.LFE1469:
 2399              		.section	.text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev,"axG",@progbits,_ZNSaIN8UnitTest18Deferr
 2400              		.align 2
 2401              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
 2403              	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:
 2404              	.LFB1480:
 113:/usr/include/c++/4.9/bits/allocator.h **** 
 2405              		.loc 7 113 0
 2406              		.cfi_startproc
 2407 0000 55       		pushq	%rbp
 2408              		.cfi_def_cfa_offset 16
 2409              		.cfi_offset 6, -16
 2410 0001 4889E5   		movq	%rsp, %rbp
 2411              		.cfi_def_cfa_register 6
 2412 0004 4883EC10 		subq	$16, %rsp
 2413 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2414              	.LBB33:
 113:/usr/include/c++/4.9/bits/allocator.h **** 
 2415              		.loc 7 113 0
 2416 000c 488B45F8 		movq	-8(%rbp), %rax
 2417 0010 4889C7   		movq	%rax, %rdi
 2418 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev@PLT
 2418      00
 2419              	.LBE33:
 2420 0018 C9       		leave
 2421              		.cfi_def_cfa 7, 8
 2422 0019 C3       		ret
 2423              		.cfi_endproc
 2424              	.LFE1480:
 2426              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEEC1Ev
 2427              		.set	_ZNSaIN8UnitTest18DeferredTestResultEEC1Ev,_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
 2428              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev,"axG",@progbits,_
 2429              		.align 2
 2430              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev
 2432              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:
 2433              	.LFB1483:
 2434              		.file 8 "/usr/include/c++/4.9/ext/new_allocator.h"
   1:/usr/include/c++/4.9/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/4.9/ext/new_allocator.h **** 
   3:/usr/include/c++/4.9/ext/new_allocator.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/ext/new_allocator.h **** //
   5:/usr/include/c++/4.9/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/4.9/ext/new_allocator.h **** 
  11:/usr/include/c++/4.9/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/ext/new_allocator.h **** 
  16:/usr/include/c++/4.9/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/ext/new_allocator.h **** 
  20:/usr/include/c++/4.9/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/ext/new_allocator.h **** 
  25:/usr/include/c++/4.9/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/4.9/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/4.9/ext/new_allocator.h ****  */
  28:/usr/include/c++/4.9/ext/new_allocator.h **** 
  29:/usr/include/c++/4.9/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/4.9/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/4.9/ext/new_allocator.h **** 
  32:/usr/include/c++/4.9/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/4.9/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/4.9/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/4.9/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/4.9/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/4.9/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/4.9/ext/new_allocator.h **** #endif
  39:/usr/include/c++/4.9/ext/new_allocator.h **** 
  40:/usr/include/c++/4.9/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/4.9/ext/new_allocator.h **** {
  42:/usr/include/c++/4.9/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/4.9/ext/new_allocator.h **** 
  44:/usr/include/c++/4.9/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/4.9/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/4.9/ext/new_allocator.h **** 
  47:/usr/include/c++/4.9/ext/new_allocator.h ****   /**
  48:/usr/include/c++/4.9/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/4.9/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/4.9/ext/new_allocator.h ****    *
  51:/usr/include/c++/4.9/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  52:/usr/include/c++/4.9/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/4.9/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/4.9/ext/new_allocator.h ****    *
  55:/usr/include/c++/4.9/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/4.9/ext/new_allocator.h ****    */
  57:/usr/include/c++/4.9/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/4.9/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/4.9/ext/new_allocator.h ****     {
  60:/usr/include/c++/4.9/ext/new_allocator.h ****     public:
  61:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/4.9/ext/new_allocator.h **** 
  69:/usr/include/c++/4.9/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/4.9/ext/new_allocator.h ****         struct rebind
  71:/usr/include/c++/4.9/ext/new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/4.9/ext/new_allocator.h **** 
  73:/usr/include/c++/4.9/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/4.9/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/4.9/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/4.9/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/4.9/ext/new_allocator.h **** #endif
  78:/usr/include/c++/4.9/ext/new_allocator.h **** 
  79:/usr/include/c++/4.9/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/4.9/ext/new_allocator.h **** 
  81:/usr/include/c++/4.9/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:/usr/include/c++/4.9/ext/new_allocator.h **** 
  83:/usr/include/c++/4.9/ext/new_allocator.h ****       template<typename _Tp1>
  84:/usr/include/c++/4.9/ext/new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:/usr/include/c++/4.9/ext/new_allocator.h **** 
  86:/usr/include/c++/4.9/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 2435              		.loc 8 86 0
 2436              		.cfi_startproc
 2437 0000 55       		pushq	%rbp
 2438              		.cfi_def_cfa_offset 16
 2439              		.cfi_offset 6, -16
 2440 0001 4889E5   		movq	%rsp, %rbp
 2441              		.cfi_def_cfa_register 6
 2442 0004 48897DF8 		movq	%rdi, -8(%rbp)
 2443              		.loc 8 86 0
 2444 0008 5D       		popq	%rbp
 2445              		.cfi_def_cfa 7, 8
 2446 0009 C3       		ret
 2447              		.cfi_endproc
 2448              	.LFE1483:
 2450              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev
 2451              		.set	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev,_ZN9__gnu_cxx13new_allocato
 2452              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_
 2453              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m
 2455              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m:
 2456              	.LFB1485:
 2457              		.file 9 "/usr/include/c++/4.9/ext/alloc_traits.h"
   1:/usr/include/c++/4.9/ext/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/4.9/ext/alloc_traits.h **** 
   3:/usr/include/c++/4.9/ext/alloc_traits.h **** // Copyright (C) 2011-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/ext/alloc_traits.h **** //
   5:/usr/include/c++/4.9/ext/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/ext/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/ext/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/ext/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/ext/alloc_traits.h **** // any later version.
  10:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  11:/usr/include/c++/4.9/ext/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/ext/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/ext/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/ext/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  16:/usr/include/c++/4.9/ext/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/ext/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/ext/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  20:/usr/include/c++/4.9/ext/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/ext/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/ext/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/ext/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  25:/usr/include/c++/4.9/ext/alloc_traits.h **** /** @file ext/alloc_traits.h
  26:/usr/include/c++/4.9/ext/alloc_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/4.9/ext/alloc_traits.h ****  */
  28:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  29:/usr/include/c++/4.9/ext/alloc_traits.h **** #ifndef _EXT_ALLOC_TRAITS_H
  30:/usr/include/c++/4.9/ext/alloc_traits.h **** #define _EXT_ALLOC_TRAITS_H 1
  31:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  32:/usr/include/c++/4.9/ext/alloc_traits.h **** #pragma GCC system_header
  33:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  34:/usr/include/c++/4.9/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  35:/usr/include/c++/4.9/ext/alloc_traits.h **** # include <bits/move.h>
  36:/usr/include/c++/4.9/ext/alloc_traits.h **** # include <bits/alloc_traits.h>
  37:/usr/include/c++/4.9/ext/alloc_traits.h **** #else
  38:/usr/include/c++/4.9/ext/alloc_traits.h **** # include <bits/allocator.h>  // for __alloc_swap
  39:/usr/include/c++/4.9/ext/alloc_traits.h **** #endif
  40:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  41:/usr/include/c++/4.9/ext/alloc_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/4.9/ext/alloc_traits.h **** {
  43:/usr/include/c++/4.9/ext/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  45:/usr/include/c++/4.9/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  46:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Alloc>
  47:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal : std::false_type { };
  48:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  49:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Tp>
  50:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<std::allocator<_Tp>>
  51:/usr/include/c++/4.9/ext/alloc_traits.h ****     : std::true_type { };
  52:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  53:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename, typename> struct array_allocator;
  54:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  55:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Tp, typename _Array>
  56:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<array_allocator<_Tp, _Array>>
  57:/usr/include/c++/4.9/ext/alloc_traits.h ****     : std::true_type { };
  58:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  59:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename> struct bitmap_allocator;
  60:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  61:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Tp>
  62:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<bitmap_allocator<_Tp>>
  63:/usr/include/c++/4.9/ext/alloc_traits.h ****     : std::true_type { };
  64:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  65:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename> struct malloc_allocator;
  66:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  67:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Tp>
  68:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<malloc_allocator<_Tp>>
  69:/usr/include/c++/4.9/ext/alloc_traits.h ****     : std::true_type { };
  70:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  71:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename> struct mt_allocator;
  72:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  73:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Tp>
  74:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<mt_allocator<_Tp>>
  75:/usr/include/c++/4.9/ext/alloc_traits.h ****     : std::true_type { };
  76:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  77:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename> struct new_allocator;
  78:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  79:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Tp>
  80:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<new_allocator<_Tp>>
  81:/usr/include/c++/4.9/ext/alloc_traits.h ****     : std::true_type { };
  82:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  83:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename> struct pool_allocator;
  84:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  85:/usr/include/c++/4.9/ext/alloc_traits.h ****   template<typename _Tp>
  86:/usr/include/c++/4.9/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<pool_allocator<_Tp>>
  87:/usr/include/c++/4.9/ext/alloc_traits.h ****     : std::true_type { };
  88:/usr/include/c++/4.9/ext/alloc_traits.h **** #endif
  89:/usr/include/c++/4.9/ext/alloc_traits.h **** 
  90:/usr/include/c++/4.9/ext/alloc_traits.h **** /**
  91:/usr/include/c++/4.9/ext/alloc_traits.h ****  * @brief  Uniform interface to C++98 and C++0x allocators.
  92:/usr/include/c++/4.9/ext/alloc_traits.h ****  * @ingroup allocators
  93:/usr/include/c++/4.9/ext/alloc_traits.h **** */
  94:/usr/include/c++/4.9/ext/alloc_traits.h **** template<typename _Alloc>
  95:/usr/include/c++/4.9/ext/alloc_traits.h ****   struct __alloc_traits
  96:/usr/include/c++/4.9/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  97:/usr/include/c++/4.9/ext/alloc_traits.h ****   : std::allocator_traits<_Alloc>
  98:/usr/include/c++/4.9/ext/alloc_traits.h **** #endif
  99:/usr/include/c++/4.9/ext/alloc_traits.h ****   {
 100:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef _Alloc allocator_type;
 101:/usr/include/c++/4.9/ext/alloc_traits.h **** #if __cplusplus >= 201103L
 102:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef std::allocator_traits<_Alloc>           _Base_type;
 103:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Base_type::value_type         value_type;
 104:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Base_type::pointer            pointer;
 105:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Base_type::const_pointer      const_pointer;
 106:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Base_type::size_type          size_type;
 107:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Base_type::difference_type    difference_type;
 108:/usr/include/c++/4.9/ext/alloc_traits.h ****     // C++11 allocators do not define reference or const_reference
 109:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef value_type&                             reference;
 110:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef const value_type&                       const_reference;
 111:/usr/include/c++/4.9/ext/alloc_traits.h ****     using _Base_type::allocate;
 112:/usr/include/c++/4.9/ext/alloc_traits.h ****     using _Base_type::deallocate;
 113:/usr/include/c++/4.9/ext/alloc_traits.h ****     using _Base_type::construct;
 114:/usr/include/c++/4.9/ext/alloc_traits.h ****     using _Base_type::destroy;
 115:/usr/include/c++/4.9/ext/alloc_traits.h ****     using _Base_type::max_size;
 116:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 117:/usr/include/c++/4.9/ext/alloc_traits.h ****   private:
 118:/usr/include/c++/4.9/ext/alloc_traits.h ****     template<typename _Ptr>
 119:/usr/include/c++/4.9/ext/alloc_traits.h ****       using __is_custom_pointer
 120:/usr/include/c++/4.9/ext/alloc_traits.h **** 	= std::__and_<std::is_same<pointer, _Ptr>,
 121:/usr/include/c++/4.9/ext/alloc_traits.h **** 		      std::__not_<std::is_pointer<_Ptr>>>;
 122:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 123:/usr/include/c++/4.9/ext/alloc_traits.h ****   public:
 124:/usr/include/c++/4.9/ext/alloc_traits.h ****     // overload construct for non-standard pointer types
 125:/usr/include/c++/4.9/ext/alloc_traits.h ****     template<typename _Ptr, typename... _Args>
 126:/usr/include/c++/4.9/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
 127:/usr/include/c++/4.9/ext/alloc_traits.h ****       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
 128:/usr/include/c++/4.9/ext/alloc_traits.h ****       {
 129:/usr/include/c++/4.9/ext/alloc_traits.h **** 	_Base_type::construct(__a, std::addressof(*__p),
 130:/usr/include/c++/4.9/ext/alloc_traits.h **** 			      std::forward<_Args>(__args)...);
 131:/usr/include/c++/4.9/ext/alloc_traits.h ****       }
 132:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 133:/usr/include/c++/4.9/ext/alloc_traits.h ****     // overload destroy for non-standard pointer types
 134:/usr/include/c++/4.9/ext/alloc_traits.h ****     template<typename _Ptr>
 135:/usr/include/c++/4.9/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
 136:/usr/include/c++/4.9/ext/alloc_traits.h ****       destroy(_Alloc& __a, _Ptr __p)
 137:/usr/include/c++/4.9/ext/alloc_traits.h ****       { _Base_type::destroy(__a, std::addressof(*__p)); }
 138:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 139:/usr/include/c++/4.9/ext/alloc_traits.h ****     static _Alloc _S_select_on_copy(const _Alloc& __a)
 140:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return _Base_type::select_on_container_copy_construction(__a); }
 141:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 142:/usr/include/c++/4.9/ext/alloc_traits.h ****     static void _S_on_swap(_Alloc& __a, _Alloc& __b)
 143:/usr/include/c++/4.9/ext/alloc_traits.h ****     { std::__alloc_on_swap(__a, __b); }
 144:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 145:/usr/include/c++/4.9/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_copy_assign()
 146:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_copy_assignment::value; }
 147:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 148:/usr/include/c++/4.9/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_move_assign()
 149:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_move_assignment::value; }
 150:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 151:/usr/include/c++/4.9/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_swap()
 152:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_swap::value; }
 153:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 154:/usr/include/c++/4.9/ext/alloc_traits.h ****     static constexpr bool _S_always_equal()
 155:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return __allocator_always_compares_equal<_Alloc>::value; }
 156:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 157:/usr/include/c++/4.9/ext/alloc_traits.h ****     static constexpr bool _S_nothrow_move()
 158:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return _S_propagate_on_move_assign() || _S_always_equal(); }
 159:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 160:/usr/include/c++/4.9/ext/alloc_traits.h ****     static constexpr bool _S_nothrow_swap()
 161:/usr/include/c++/4.9/ext/alloc_traits.h ****     {
 162:/usr/include/c++/4.9/ext/alloc_traits.h ****       using std::swap;
 163:/usr/include/c++/4.9/ext/alloc_traits.h ****       return !_S_propagate_on_swap()
 164:/usr/include/c++/4.9/ext/alloc_traits.h ****        	|| noexcept(swap(std::declval<_Alloc&>(), std::declval<_Alloc&>()));
 165:/usr/include/c++/4.9/ext/alloc_traits.h ****     }
 166:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 167:/usr/include/c++/4.9/ext/alloc_traits.h ****     template<typename _Tp>
 168:/usr/include/c++/4.9/ext/alloc_traits.h ****       struct rebind
 169:/usr/include/c++/4.9/ext/alloc_traits.h ****       { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
 170:/usr/include/c++/4.9/ext/alloc_traits.h **** #else
 171:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 172:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Alloc::pointer                pointer;
 173:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Alloc::const_pointer          const_pointer;
 174:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Alloc::value_type             value_type;
 175:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Alloc::reference              reference;
 176:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Alloc::const_reference        const_reference;
 177:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Alloc::size_type              size_type;
 178:/usr/include/c++/4.9/ext/alloc_traits.h ****     typedef typename _Alloc::difference_type        difference_type;
 179:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 180:/usr/include/c++/4.9/ext/alloc_traits.h ****     static pointer
 181:/usr/include/c++/4.9/ext/alloc_traits.h ****     allocate(_Alloc& __a, size_type __n)
 182:/usr/include/c++/4.9/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 183:/usr/include/c++/4.9/ext/alloc_traits.h **** 
 184:/usr/include/c++/4.9/ext/alloc_traits.h ****     static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 2458              		.loc 9 184 0
 2459              		.cfi_startproc
 2460 0000 55       		pushq	%rbp
 2461              		.cfi_def_cfa_offset 16
 2462              		.cfi_offset 6, -16
 2463 0001 4889E5   		movq	%rsp, %rbp
 2464              		.cfi_def_cfa_register 6
 2465 0004 4883EC20 		subq	$32, %rsp
 2466 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2467 000c 488975F0 		movq	%rsi, -16(%rbp)
 2468 0010 488955E8 		movq	%rdx, -24(%rbp)
 185:/usr/include/c++/4.9/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 2469              		.loc 9 185 0
 2470 0014 488B55E8 		movq	-24(%rbp), %rdx
 2471 0018 488B4DF0 		movq	-16(%rbp), %rcx
 2472 001c 488B45F8 		movq	-8(%rbp), %rax
 2473 0020 4889CE   		movq	%rcx, %rsi
 2474 0023 4889C7   		movq	%rax, %rdi
 2475 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m@PLT
 2475      00
 2476 002b C9       		leave
 2477              		.cfi_def_cfa 7, 8
 2478 002c C3       		ret
 2479              		.cfi_endproc
 2480              	.LFE1485:
 2482              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_,"axG",
 2483              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
 2485              	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:
 2486              	.LFB1486:
 100:/usr/include/c++/4.9/bits/stl_construct.h **** 	{
 2487              		.loc 6 100 0
 2488              		.cfi_startproc
 2489 0000 55       		pushq	%rbp
 2490              		.cfi_def_cfa_offset 16
 2491              		.cfi_offset 6, -16
 2492 0001 4889E5   		movq	%rsp, %rbp
 2493              		.cfi_def_cfa_register 6
 2494 0004 4883EC10 		subq	$16, %rsp
 2495 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2496 000c 488975F0 		movq	%rsi, -16(%rbp)
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2497              		.loc 6 102 0
 2498 0010 EB19     		jmp	.L131
 2499              	.L132:
 103:/usr/include/c++/4.9/bits/stl_construct.h **** 	}
 2500              		.loc 6 103 0 discriminator 2
 2501 0012 488B45F8 		movq	-8(%rbp), %rax
 2502 0016 4889C7   		movq	%rax, %rdi
 2503 0019 E8000000 		call	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_@PLT
 2503      00
 2504 001e 4889C7   		movq	%rax, %rdi
 2505 0021 E8000000 		call	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_@PLT
 2505      00
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2506              		.loc 6 102 0 discriminator 2
 2507 0026 488345F8 		addq	$56, -8(%rbp)
 2507      38
 2508              	.L131:
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2509              		.loc 6 102 0 is_stmt 0 discriminator 1
 2510 002b 488B45F8 		movq	-8(%rbp), %rax
 2511 002f 483B45F0 		cmpq	-16(%rbp), %rax
 2512 0033 75DD     		jne	.L132
 104:/usr/include/c++/4.9/bits/stl_construct.h ****     };
 2513              		.loc 6 104 0 is_stmt 1
 2514 0035 C9       		leave
 2515              		.cfi_def_cfa 7, 8
 2516 0036 C3       		ret
 2517              		.cfi_endproc
 2518              	.LFE1486:
 2520              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev,"axG",@progbits,_
 2521              		.align 2
 2522              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev
 2524              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:
 2525              	.LFB1489:
  79:/usr/include/c++/4.9/ext/new_allocator.h **** 
 2526              		.loc 8 79 0
 2527              		.cfi_startproc
 2528 0000 55       		pushq	%rbp
 2529              		.cfi_def_cfa_offset 16
 2530              		.cfi_offset 6, -16
 2531 0001 4889E5   		movq	%rsp, %rbp
 2532              		.cfi_def_cfa_register 6
 2533 0004 48897DF8 		movq	%rdi, -8(%rbp)
  79:/usr/include/c++/4.9/ext/new_allocator.h **** 
 2534              		.loc 8 79 0
 2535 0008 5D       		popq	%rbp
 2536              		.cfi_def_cfa 7, 8
 2537 0009 C3       		ret
 2538              		.cfi_endproc
 2539              	.LFE1489:
 2541              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev
 2542              		.set	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev,_ZN9__gnu_cxx13new_allocato
 2543              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m,"ax
 2544              		.align 2
 2545              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
 2547              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:
 2548              	.LFB1491:
  87:/usr/include/c++/4.9/ext/new_allocator.h **** 
  88:/usr/include/c++/4.9/ext/new_allocator.h ****       pointer
  89:/usr/include/c++/4.9/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:/usr/include/c++/4.9/ext/new_allocator.h ****       { return std::__addressof(__x); }
  91:/usr/include/c++/4.9/ext/new_allocator.h **** 
  92:/usr/include/c++/4.9/ext/new_allocator.h ****       const_pointer
  93:/usr/include/c++/4.9/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:/usr/include/c++/4.9/ext/new_allocator.h ****       { return std::__addressof(__x); }
  95:/usr/include/c++/4.9/ext/new_allocator.h **** 
  96:/usr/include/c++/4.9/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:/usr/include/c++/4.9/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  98:/usr/include/c++/4.9/ext/new_allocator.h ****       pointer
  99:/usr/include/c++/4.9/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 100:/usr/include/c++/4.9/ext/new_allocator.h ****       { 
 101:/usr/include/c++/4.9/ext/new_allocator.h **** 	if (__n > this->max_size())
 102:/usr/include/c++/4.9/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 103:/usr/include/c++/4.9/ext/new_allocator.h **** 
 104:/usr/include/c++/4.9/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 105:/usr/include/c++/4.9/ext/new_allocator.h ****       }
 106:/usr/include/c++/4.9/ext/new_allocator.h **** 
 107:/usr/include/c++/4.9/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 108:/usr/include/c++/4.9/ext/new_allocator.h ****       void
 109:/usr/include/c++/4.9/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 2549              		.loc 8 109 0
 2550              		.cfi_startproc
 2551 0000 55       		pushq	%rbp
 2552              		.cfi_def_cfa_offset 16
 2553              		.cfi_offset 6, -16
 2554 0001 4889E5   		movq	%rsp, %rbp
 2555              		.cfi_def_cfa_register 6
 2556 0004 4883EC20 		subq	$32, %rsp
 2557 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2558 000c 488975F0 		movq	%rsi, -16(%rbp)
 2559 0010 488955E8 		movq	%rdx, -24(%rbp)
 110:/usr/include/c++/4.9/ext/new_allocator.h ****       { ::operator delete(__p); }
 2560              		.loc 8 110 0
 2561 0014 488B45F0 		movq	-16(%rbp), %rax
 2562 0018 4889C7   		movq	%rax, %rdi
 2563 001b E8000000 		call	_ZdlPv@PLT
 2563      00
 2564 0020 C9       		leave
 2565              		.cfi_def_cfa 7, 8
 2566 0021 C3       		ret
 2567              		.cfi_endproc
 2568              	.LFE1491:
 2570              		.section	.text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_,"axG",@progbits,_ZSt11__a
 2571              		.weak	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
 2573              	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:
 2574              	.LFB1492:
 2575              		.file 10 "/usr/include/c++/4.9/bits/move.h"
   1:/usr/include/c++/4.9/bits/move.h **** // Move, forward and identity for C++0x + swap -*- C++ -*-
   2:/usr/include/c++/4.9/bits/move.h **** 
   3:/usr/include/c++/4.9/bits/move.h **** // Copyright (C) 2007-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/move.h **** //
   5:/usr/include/c++/4.9/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/move.h **** // any later version.
  10:/usr/include/c++/4.9/bits/move.h **** 
  11:/usr/include/c++/4.9/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/move.h **** 
  16:/usr/include/c++/4.9/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/move.h **** 
  20:/usr/include/c++/4.9/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/move.h **** 
  25:/usr/include/c++/4.9/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/4.9/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/4.9/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/4.9/bits/move.h ****  */
  29:/usr/include/c++/4.9/bits/move.h **** 
  30:/usr/include/c++/4.9/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/4.9/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/4.9/bits/move.h **** 
  33:/usr/include/c++/4.9/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/4.9/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/c++/4.9/bits/move.h **** 
  36:/usr/include/c++/4.9/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/c++/4.9/bits/move.h **** {
  38:/usr/include/c++/4.9/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/c++/4.9/bits/move.h **** 
  40:/usr/include/c++/4.9/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/c++/4.9/bits/move.h ****   /**
  42:/usr/include/c++/4.9/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/c++/4.9/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/c++/4.9/bits/move.h ****    */
  45:/usr/include/c++/4.9/bits/move.h ****   template<typename _Tp>
  46:/usr/include/c++/4.9/bits/move.h ****     inline _Tp*
  47:/usr/include/c++/4.9/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 2576              		.loc 10 47 0
 2577              		.cfi_startproc
 2578 0000 55       		pushq	%rbp
 2579              		.cfi_def_cfa_offset 16
 2580              		.cfi_offset 6, -16
 2581 0001 4889E5   		movq	%rsp, %rbp
 2582              		.cfi_def_cfa_register 6
 2583 0004 48897DF8 		movq	%rdi, -8(%rbp)
  48:/usr/include/c++/4.9/bits/move.h ****     {
  49:/usr/include/c++/4.9/bits/move.h ****       return reinterpret_cast<_Tp*>
  50:/usr/include/c++/4.9/bits/move.h **** 	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
 2584              		.loc 10 50 0
 2585 0008 488B45F8 		movq	-8(%rbp), %rax
  51:/usr/include/c++/4.9/bits/move.h ****     }
 2586              		.loc 10 51 0
 2587 000c 5D       		popq	%rbp
 2588              		.cfi_def_cfa 7, 8
 2589 000d C3       		ret
 2590              		.cfi_endproc
 2591              	.LFE1492:
 2593              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
 2594              		.align 2
 2595              		.weak	_ZN8UnitTest18DeferredTestResultD2Ev
 2597              	_ZN8UnitTest18DeferredTestResultD2Ev:
 2598              	.LFB1495:
 2599              		.file 11 "DeferredTestResult.h"
   1:DeferredTestResult.h **** #ifndef UNITTEST_DEFERREDTESTRESULT_H
   2:DeferredTestResult.h **** #define UNITTEST_DEFERREDTESTRESULT_H
   3:DeferredTestResult.h **** 
   4:DeferredTestResult.h **** #include <string>
   5:DeferredTestResult.h **** #include <vector>
   6:DeferredTestResult.h **** 
   7:DeferredTestResult.h **** namespace UnitTest
   8:DeferredTestResult.h **** {
   9:DeferredTestResult.h **** 
  10:DeferredTestResult.h **** struct DeferredTestResult
 2600              		.loc 11 10 0
 2601              		.cfi_startproc
 2602              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2603              		.cfi_lsda 0x1b,.LLSDA1495
 2604 0000 55       		pushq	%rbp
 2605              		.cfi_def_cfa_offset 16
 2606              		.cfi_offset 6, -16
 2607 0001 4889E5   		movq	%rsp, %rbp
 2608              		.cfi_def_cfa_register 6
 2609 0004 53       		pushq	%rbx
 2610 0005 4883EC18 		subq	$24, %rsp
 2611              		.cfi_offset 3, -24
 2612 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2613              	.LBB34:
 2614              		.loc 11 10 0
 2615 000d 488B45E8 		movq	-24(%rbp), %rax
 2616 0011 4883C018 		addq	$24, %rax
 2617 0015 4889C7   		movq	%rax, %rdi
 2618              	.LEHB37:
 2619 0018 E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev@PLT
 2619      00
 2620              	.LEHE37:
 2621              		.loc 11 10 0 is_stmt 0 discriminator 2
 2622 001d 488B45E8 		movq	-24(%rbp), %rax
 2623 0021 4883C010 		addq	$16, %rax
 2624 0025 4889C7   		movq	%rax, %rdi
 2625              	.LEHB38:
 2626 0028 E8000000 		call	_ZNSsD1Ev@PLT
 2626      00
 2627              	.LEHE38:
 2628              		.loc 11 10 0 discriminator 4
 2629 002d 488B45E8 		movq	-24(%rbp), %rax
 2630 0031 4883C008 		addq	$8, %rax
 2631 0035 4889C7   		movq	%rax, %rdi
 2632              	.LEHB39:
 2633 0038 E8000000 		call	_ZNSsD1Ev@PLT
 2633      00
 2634              	.LEHE39:
 2635              		.loc 11 10 0 discriminator 6
 2636 003d 488B45E8 		movq	-24(%rbp), %rax
 2637 0041 4889C7   		movq	%rax, %rdi
 2638              	.LEHB40:
 2639 0044 E8000000 		call	_ZNSsD1Ev@PLT
 2639      00
 2640              	.LEHE40:
 2641 0049 EB44     		jmp	.L145
 2642              	.L142:
 2643 004b 4889C3   		movq	%rax, %rbx
 2644              		.loc 11 10 0
 2645 004e 488B45E8 		movq	-24(%rbp), %rax
 2646 0052 4883C010 		addq	$16, %rax
 2647 0056 4889C7   		movq	%rax, %rdi
 2648 0059 E8000000 		call	_ZNSsD1Ev@PLT
 2648      00
 2649 005e EB03     		jmp	.L140
 2650              	.L143:
 2651 0060 4889C3   		movq	%rax, %rbx
 2652              	.L140:
 2653              		.loc 11 10 0 discriminator 3
 2654 0063 488B45E8 		movq	-24(%rbp), %rax
 2655 0067 4883C008 		addq	$8, %rax
 2656 006b 4889C7   		movq	%rax, %rdi
 2657 006e E8000000 		call	_ZNSsD1Ev@PLT
 2657      00
 2658 0073 EB03     		jmp	.L141
 2659              	.L144:
 2660 0075 4889C3   		movq	%rax, %rbx
 2661              	.L141:
 2662              		.loc 11 10 0 discriminator 5
 2663 0078 488B45E8 		movq	-24(%rbp), %rax
 2664 007c 4889C7   		movq	%rax, %rdi
 2665 007f E8000000 		call	_ZNSsD1Ev@PLT
 2665      00
 2666 0084 4889D8   		movq	%rbx, %rax
 2667 0087 4889C7   		movq	%rax, %rdi
 2668              	.LEHB41:
 2669 008a E8000000 		call	_Unwind_Resume@PLT
 2669      00
 2670              	.LEHE41:
 2671              	.L145:
 2672              	.LBE34:
 2673              		.loc 11 10 0
 2674 008f 4883C418 		addq	$24, %rsp
 2675 0093 5B       		popq	%rbx
 2676 0094 5D       		popq	%rbp
 2677              		.cfi_def_cfa 7, 8
 2678 0095 C3       		ret
 2679              		.cfi_endproc
 2680              	.LFE1495:
 2681              		.section	.gcc_except_table
 2682              	.LLSDA1495:
 2683 00d6 FF       		.byte	0xff
 2684 00d7 FF       		.byte	0xff
 2685 00d8 01       		.byte	0x1
 2686 00d9 15       		.uleb128 .LLSDACSE1495-.LLSDACSB1495
 2687              	.LLSDACSB1495:
 2688 00da 18       		.uleb128 .LEHB37-.LFB1495
 2689 00db 05       		.uleb128 .LEHE37-.LEHB37
 2690 00dc 4B       		.uleb128 .L142-.LFB1495
 2691 00dd 00       		.uleb128 0
 2692 00de 28       		.uleb128 .LEHB38-.LFB1495
 2693 00df 05       		.uleb128 .LEHE38-.LEHB38
 2694 00e0 60       		.uleb128 .L143-.LFB1495
 2695 00e1 00       		.uleb128 0
 2696 00e2 38       		.uleb128 .LEHB39-.LFB1495
 2697 00e3 05       		.uleb128 .LEHE39-.LEHB39
 2698 00e4 75       		.uleb128 .L144-.LFB1495
 2699 00e5 00       		.uleb128 0
 2700 00e6 44       		.uleb128 .LEHB40-.LFB1495
 2701 00e7 05       		.uleb128 .LEHE40-.LEHB40
 2702 00e8 00       		.uleb128 0
 2703 00e9 00       		.uleb128 0
 2704 00ea 8A01     		.uleb128 .LEHB41-.LFB1495
 2705 00ec 05       		.uleb128 .LEHE41-.LEHB41
 2706 00ed 00       		.uleb128 0
 2707 00ee 00       		.uleb128 0
 2708              	.LLSDACSE1495:
 2709              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
 2711              		.weak	_ZN8UnitTest18DeferredTestResultD1Ev
 2712              		.set	_ZN8UnitTest18DeferredTestResultD1Ev,_ZN8UnitTest18DeferredTestResultD2Ev
 2713              		.section	.text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_,"axG",@progbits,_ZSt8_DestroyIN8
 2714              		.weak	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
 2716              	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:
 2717              	.LFB1493:
  92:/usr/include/c++/4.9/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 2718              		.loc 6 92 0 is_stmt 1
 2719              		.cfi_startproc
 2720 0000 55       		pushq	%rbp
 2721              		.cfi_def_cfa_offset 16
 2722              		.cfi_offset 6, -16
 2723 0001 4889E5   		movq	%rsp, %rbp
 2724              		.cfi_def_cfa_register 6
 2725 0004 4883EC10 		subq	$16, %rsp
 2726 0008 48897DF8 		movq	%rdi, -8(%rbp)
  93:/usr/include/c++/4.9/bits/stl_construct.h **** 
 2727              		.loc 6 93 0
 2728 000c 488B45F8 		movq	-8(%rbp), %rax
 2729 0010 4889C7   		movq	%rax, %rdi
 2730 0013 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 2730      00
 2731 0018 C9       		leave
 2732              		.cfi_def_cfa 7, 8
 2733 0019 C3       		ret
 2734              		.cfi_endproc
 2735              	.LFE1493:
 2737              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vectorISt4pairIiSsESaIS
 2738              		.align 2
 2739              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev
 2741              	_ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev:
 2742              	.LFB1499:
 423:/usr/include/c++/4.9/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 2743              		.loc 4 423 0
 2744              		.cfi_startproc
 2745              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2746              		.cfi_lsda 0x1b,.LLSDA1499
 2747 0000 55       		pushq	%rbp
 2748              		.cfi_def_cfa_offset 16
 2749              		.cfi_offset 6, -16
 2750 0001 4889E5   		movq	%rsp, %rbp
 2751              		.cfi_def_cfa_register 6
 2752 0004 53       		pushq	%rbx
 2753 0005 4883EC18 		subq	$24, %rsp
 2754              		.cfi_offset 3, -24
 2755 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2756              	.LBB35:
 425:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2757              		.loc 4 425 0
 2758 000d 488B45E8 		movq	-24(%rbp), %rax
 2759 0011 4889C7   		movq	%rax, %rdi
 2760              	.LEHB42:
 2761 0014 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 2761      00
 2762 0019 4889C2   		movq	%rax, %rdx
 2763 001c 488B45E8 		movq	-24(%rbp), %rax
 2764 0020 488B4808 		movq	8(%rax), %rcx
 2765 0024 488B45E8 		movq	-24(%rbp), %rax
 2766 0028 488B00   		movq	(%rax), %rax
 424:/usr/include/c++/4.9/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 2767              		.loc 4 424 0
 2768 002b 4889CE   		movq	%rcx, %rsi
 2769 002e 4889C7   		movq	%rax, %rdi
 2770 0031 E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E@PLT
 2770      00
 2771              	.LEHE42:
 425:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2772              		.loc 4 425 0
 2773 0036 488B45E8 		movq	-24(%rbp), %rax
 2774 003a 4889C7   		movq	%rax, %rdi
 2775              	.LEHB43:
 2776 003d E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev@PLT
 2776      00
 2777              	.LEHE43:
 2778 0042 EB1A     		jmp	.L151
 2779              	.L150:
 2780 0044 4889C3   		movq	%rax, %rbx
 2781 0047 488B45E8 		movq	-24(%rbp), %rax
 2782 004b 4889C7   		movq	%rax, %rdi
 2783 004e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev@PLT
 2783      00
 2784 0053 4889D8   		movq	%rbx, %rax
 2785 0056 4889C7   		movq	%rax, %rdi
 2786              	.LEHB44:
 2787 0059 E8000000 		call	_Unwind_Resume@PLT
 2787      00
 2788              	.LEHE44:
 2789              	.L151:
 2790              	.LBE35:
 2791 005e 4883C418 		addq	$24, %rsp
 2792 0062 5B       		popq	%rbx
 2793 0063 5D       		popq	%rbp
 2794              		.cfi_def_cfa 7, 8
 2795 0064 C3       		ret
 2796              		.cfi_endproc
 2797              	.LFE1499:
 2798              		.section	.gcc_except_table
 2799              	.LLSDA1499:
 2800 00ef FF       		.byte	0xff
 2801 00f0 FF       		.byte	0xff
 2802 00f1 01       		.byte	0x1
 2803 00f2 0C       		.uleb128 .LLSDACSE1499-.LLSDACSB1499
 2804              	.LLSDACSB1499:
 2805 00f3 14       		.uleb128 .LEHB42-.LFB1499
 2806 00f4 22       		.uleb128 .LEHE42-.LEHB42
 2807 00f5 44       		.uleb128 .L150-.LFB1499
 2808 00f6 00       		.uleb128 0
 2809 00f7 3D       		.uleb128 .LEHB43-.LFB1499
 2810 00f8 05       		.uleb128 .LEHE43-.LEHB43
 2811 00f9 00       		.uleb128 0
 2812 00fa 00       		.uleb128 0
 2813 00fb 59       		.uleb128 .LEHB44-.LFB1499
 2814 00fc 05       		.uleb128 .LEHE44-.LEHB44
 2815 00fd 00       		.uleb128 0
 2816 00fe 00       		.uleb128 0
 2817              	.LLSDACSE1499:
 2818              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vectorISt4pairIiSsESaIS
 2820              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev
 2821              		.set	_ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev,_ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev
 2822              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_
 2823              		.align 2
 2824              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev
 2826              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev:
 2827              	.LFB1508:
  79:/usr/include/c++/4.9/bits/stl_vector.h ****       : public _Tp_alloc_type
 2828              		.loc 4 79 0
 2829              		.cfi_startproc
 2830 0000 55       		pushq	%rbp
 2831              		.cfi_def_cfa_offset 16
 2832              		.cfi_offset 6, -16
 2833 0001 4889E5   		movq	%rsp, %rbp
 2834              		.cfi_def_cfa_register 6
 2835 0004 4883EC10 		subq	$16, %rsp
 2836 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2837              	.LBB36:
  79:/usr/include/c++/4.9/bits/stl_vector.h ****       : public _Tp_alloc_type
 2838              		.loc 4 79 0
 2839 000c 488B45F8 		movq	-8(%rbp), %rax
 2840 0010 4889C7   		movq	%rax, %rdi
 2841 0013 E8000000 		call	_ZNSaISt4pairIiSsEED2Ev@PLT
 2841      00
 2842              	.LBE36:
 2843 0018 C9       		leave
 2844              		.cfi_def_cfa 7, 8
 2845 0019 C3       		ret
 2846              		.cfi_endproc
 2847              	.LFE1508:
 2849              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev
 2850              		.set	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev,_ZNSt12_Vector_baseISt4pairIiSsESa
 2851              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseISt
 2852              		.align 2
 2853              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev
 2855              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev:
 2856              	.LFB1510:
 159:/usr/include/c++/4.9/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 2857              		.loc 4 159 0
 2858              		.cfi_startproc
 2859              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2860              		.cfi_lsda 0x1b,.LLSDA1510
 2861 0000 55       		pushq	%rbp
 2862              		.cfi_def_cfa_offset 16
 2863              		.cfi_offset 6, -16
 2864 0001 4889E5   		movq	%rsp, %rbp
 2865              		.cfi_def_cfa_register 6
 2866 0004 53       		pushq	%rbx
 2867 0005 4883EC18 		subq	$24, %rsp
 2868              		.cfi_offset 3, -24
 2869 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2870              	.LBB37:
 161:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2871              		.loc 4 161 0
 2872 000d 488B45E8 		movq	-24(%rbp), %rax
 2873 0011 488B4010 		movq	16(%rax), %rax
 2874 0015 4889C2   		movq	%rax, %rdx
 2875 0018 488B45E8 		movq	-24(%rbp), %rax
 2876 001c 488B00   		movq	(%rax), %rax
 2877 001f 4829C2   		subq	%rax, %rdx
 2878 0022 4889D0   		movq	%rdx, %rax
 2879 0025 48C1F804 		sarq	$4, %rax
 2880 0029 4889C2   		movq	%rax, %rdx
 2881 002c 488B45E8 		movq	-24(%rbp), %rax
 2882 0030 488B08   		movq	(%rax), %rcx
 160:/usr/include/c++/4.9/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 2883              		.loc 4 160 0
 2884 0033 488B45E8 		movq	-24(%rbp), %rax
 2885 0037 4889CE   		movq	%rcx, %rsi
 2886 003a 4889C7   		movq	%rax, %rdi
 2887              	.LEHB45:
 2888 003d E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m@PLT
 2888      00
 2889              	.LEHE45:
 161:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2890              		.loc 4 161 0
 2891 0042 488B45E8 		movq	-24(%rbp), %rax
 2892 0046 4889C7   		movq	%rax, %rdi
 2893 0049 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev@PLT
 2893      00
 2894 004e EB1A     		jmp	.L158
 2895              	.L157:
 2896 0050 4889C3   		movq	%rax, %rbx
 2897 0053 488B45E8 		movq	-24(%rbp), %rax
 2898 0057 4889C7   		movq	%rax, %rdi
 2899 005a E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev@PLT
 2899      00
 2900 005f 4889D8   		movq	%rbx, %rax
 2901 0062 4889C7   		movq	%rax, %rdi
 2902              	.LEHB46:
 2903 0065 E8000000 		call	_Unwind_Resume@PLT
 2903      00
 2904              	.LEHE46:
 2905              	.L158:
 2906              	.LBE37:
 2907 006a 4883C418 		addq	$24, %rsp
 2908 006e 5B       		popq	%rbx
 2909 006f 5D       		popq	%rbp
 2910              		.cfi_def_cfa 7, 8
 2911 0070 C3       		ret
 2912              		.cfi_endproc
 2913              	.LFE1510:
 2914              		.section	.gcc_except_table
 2915              	.LLSDA1510:
 2916 00ff FF       		.byte	0xff
 2917 0100 FF       		.byte	0xff
 2918 0101 01       		.byte	0x1
 2919 0102 08       		.uleb128 .LLSDACSE1510-.LLSDACSB1510
 2920              	.LLSDACSB1510:
 2921 0103 3D       		.uleb128 .LEHB45-.LFB1510
 2922 0104 05       		.uleb128 .LEHE45-.LEHB45
 2923 0105 50       		.uleb128 .L157-.LFB1510
 2924 0106 00       		.uleb128 0
 2925 0107 65       		.uleb128 .LEHB46-.LFB1510
 2926 0108 05       		.uleb128 .LEHE46-.LEHB46
 2927 0109 00       		.uleb128 0
 2928 010a 00       		.uleb128 0
 2929              	.LLSDACSE1510:
 2930              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseISt
 2932              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED1Ev
 2933              		.set	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED1Ev,_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev
 2934              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZN
 2935              		.align 2
 2936              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv
 2938              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv:
 2939              	.LFB1512:
 113:/usr/include/c++/4.9/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 2940              		.loc 4 113 0
 2941              		.cfi_startproc
 2942 0000 55       		pushq	%rbp
 2943              		.cfi_def_cfa_offset 16
 2944              		.cfi_offset 6, -16
 2945 0001 4889E5   		movq	%rsp, %rbp
 2946              		.cfi_def_cfa_register 6
 2947 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/4.9/bits/stl_vector.h **** 
 2948              		.loc 4 114 0
 2949 0008 488B45F8 		movq	-8(%rbp), %rax
 2950 000c 5D       		popq	%rbp
 2951              		.cfi_def_cfa 7, 8
 2952 000d C3       		ret
 2953              		.cfi_endproc
 2954              	.LFE1512:
 2956              		.section	.text._ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPSt4pai
 2957              		.weak	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E
 2959              	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E:
 2960              	.LFB1513:
 148:/usr/include/c++/4.9/bits/stl_construct.h **** 	     allocator<_Tp>&)
 2961              		.loc 6 148 0
 2962              		.cfi_startproc
 2963 0000 55       		pushq	%rbp
 2964              		.cfi_def_cfa_offset 16
 2965              		.cfi_offset 6, -16
 2966 0001 4889E5   		movq	%rsp, %rbp
 2967              		.cfi_def_cfa_register 6
 2968 0004 4883EC20 		subq	$32, %rsp
 2969 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2970 000c 488975F0 		movq	%rsi, -16(%rbp)
 2971 0010 488955E8 		movq	%rdx, -24(%rbp)
 151:/usr/include/c++/4.9/bits/stl_construct.h ****     }
 2972              		.loc 6 151 0
 2973 0014 488B55F0 		movq	-16(%rbp), %rdx
 2974 0018 488B45F8 		movq	-8(%rbp), %rax
 2975 001c 4889D6   		movq	%rdx, %rsi
 2976 001f 4889C7   		movq	%rax, %rdi
 2977 0022 E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_@PLT
 2977      00
 2978              		.loc 6 152 0
 2979 0027 C9       		leave
 2980              		.cfi_def_cfa 7, 8
 2981 0028 C3       		ret
 2982              		.cfi_endproc
 2983              	.LFE1513:
 2985              		.section	.text._ZNSaISt4pairIiSsEED2Ev,"axG",@progbits,_ZNSaISt4pairIiSsEED5Ev,comdat
 2986              		.align 2
 2987              		.weak	_ZNSaISt4pairIiSsEED2Ev
 2989              	_ZNSaISt4pairIiSsEED2Ev:
 2990              	.LFB1519:
 2991              		.loc 7 121 0
 2992              		.cfi_startproc
 2993 0000 55       		pushq	%rbp
 2994              		.cfi_def_cfa_offset 16
 2995              		.cfi_offset 6, -16
 2996 0001 4889E5   		movq	%rsp, %rbp
 2997              		.cfi_def_cfa_register 6
 2998 0004 4883EC10 		subq	$16, %rsp
 2999 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3000              	.LBB38:
 3001              		.loc 7 121 0
 3002 000c 488B45F8 		movq	-8(%rbp), %rax
 3003 0010 4889C7   		movq	%rax, %rdi
 3004 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev@PLT
 3004      00
 3005              	.LBE38:
 3006 0018 C9       		leave
 3007              		.cfi_def_cfa 7, 8
 3008 0019 C3       		ret
 3009              		.cfi_endproc
 3010              	.LFE1519:
 3012              		.weak	_ZNSaISt4pairIiSsEED1Ev
 3013              		.set	_ZNSaISt4pairIiSsEED1Ev,_ZNSaISt4pairIiSsEED2Ev
 3014              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m,"axG",@progbits,_ZNSt
 3015              		.align 2
 3016              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m
 3018              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m:
 3019              	.LFB1521:
 174:/usr/include/c++/4.9/bits/stl_vector.h ****       {
 3020              		.loc 4 174 0
 3021              		.cfi_startproc
 3022 0000 55       		pushq	%rbp
 3023              		.cfi_def_cfa_offset 16
 3024              		.cfi_offset 6, -16
 3025 0001 4889E5   		movq	%rsp, %rbp
 3026              		.cfi_def_cfa_register 6
 3027 0004 4883EC20 		subq	$32, %rsp
 3028 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3029 000c 488975F0 		movq	%rsi, -16(%rbp)
 3030 0010 488955E8 		movq	%rdx, -24(%rbp)
 3031              	.LBB39:
 177:/usr/include/c++/4.9/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 3032              		.loc 4 177 0
 3033 0014 48837DF0 		cmpq	$0, -16(%rbp)
 3033      00
 3034 0019 7417     		je	.L164
 178:/usr/include/c++/4.9/bits/stl_vector.h ****       }
 3035              		.loc 4 178 0
 3036 001b 488B45F8 		movq	-8(%rbp), %rax
 3037 001f 488B55E8 		movq	-24(%rbp), %rdx
 3038 0023 488B4DF0 		movq	-16(%rbp), %rcx
 3039 0027 4889CE   		movq	%rcx, %rsi
 3040 002a 4889C7   		movq	%rax, %rdi
 3041 002d E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE10deallocateERS3_PS2_m@PLT
 3041      00
 3042              	.L164:
 3043              	.LBE39:
 179:/usr/include/c++/4.9/bits/stl_vector.h **** 
 3044              		.loc 4 179 0
 3045 0032 C9       		leave
 3046              		.cfi_def_cfa 7, 8
 3047 0033 C3       		ret
 3048              		.cfi_endproc
 3049              	.LFE1521:
 3051              		.section	.text._ZSt8_DestroyIPSt4pairIiSsEEvT_S3_,"axG",@progbits,_ZSt8_DestroyIPSt4pairIiSsEEvT_S
 3052              		.weak	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_
 3054              	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_:
 3055              	.LFB1522:
 122:/usr/include/c++/4.9/bits/stl_construct.h ****     {
 3056              		.loc 6 122 0
 3057              		.cfi_startproc
 3058 0000 55       		pushq	%rbp
 3059              		.cfi_def_cfa_offset 16
 3060              		.cfi_offset 6, -16
 3061 0001 4889E5   		movq	%rsp, %rbp
 3062              		.cfi_def_cfa_register 6
 3063 0004 4883EC10 		subq	$16, %rsp
 3064 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3065 000c 488975F0 		movq	%rsi, -16(%rbp)
 3066              	.LBB40:
 126:/usr/include/c++/4.9/bits/stl_construct.h **** 	__destroy(__first, __last);
 3067              		.loc 6 126 0
 3068 0010 488B55F0 		movq	-16(%rbp), %rdx
 3069 0014 488B45F8 		movq	-8(%rbp), %rax
 3070 0018 4889D6   		movq	%rdx, %rsi
 3071 001b 4889C7   		movq	%rax, %rdi
 3072 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_@PLT
 3072      00
 3073              	.LBE40:
 128:/usr/include/c++/4.9/bits/stl_construct.h **** 
 3074              		.loc 6 128 0
 3075 0023 C9       		leave
 3076              		.cfi_def_cfa 7, 8
 3077 0024 C3       		ret
 3078              		.cfi_endproc
 3079              	.LFE1522:
 3081              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_a
 3082              		.align 2
 3083              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev
 3085              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev:
 3086              	.LFB1524:
  86:/usr/include/c++/4.9/ext/new_allocator.h **** 
 3087              		.loc 8 86 0
 3088              		.cfi_startproc
 3089 0000 55       		pushq	%rbp
 3090              		.cfi_def_cfa_offset 16
 3091              		.cfi_offset 6, -16
 3092 0001 4889E5   		movq	%rsp, %rbp
 3093              		.cfi_def_cfa_register 6
 3094 0004 48897DF8 		movq	%rdi, -8(%rbp)
  86:/usr/include/c++/4.9/ext/new_allocator.h **** 
 3095              		.loc 8 86 0
 3096 0008 5D       		popq	%rbp
 3097              		.cfi_def_cfa 7, 8
 3098 0009 C3       		ret
 3099              		.cfi_endproc
 3100              	.LFE1524:
 3102              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED1Ev
 3103              		.set	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED1Ev,_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev
 3104              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE10deallocateERS3_PS2_m,"axG",@progbi
 3105              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE10deallocateERS3_PS2_m
 3107              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE10deallocateERS3_PS2_m:
 3108              	.LFB1526:
 184:/usr/include/c++/4.9/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 3109              		.loc 9 184 0
 3110              		.cfi_startproc
 3111 0000 55       		pushq	%rbp
 3112              		.cfi_def_cfa_offset 16
 3113              		.cfi_offset 6, -16
 3114 0001 4889E5   		movq	%rsp, %rbp
 3115              		.cfi_def_cfa_register 6
 3116 0004 4883EC20 		subq	$32, %rsp
 3117 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3118 000c 488975F0 		movq	%rsi, -16(%rbp)
 3119 0010 488955E8 		movq	%rdx, -24(%rbp)
 3120              		.loc 9 185 0
 3121 0014 488B55E8 		movq	-24(%rbp), %rdx
 3122 0018 488B4DF0 		movq	-16(%rbp), %rcx
 3123 001c 488B45F8 		movq	-8(%rbp), %rax
 3124 0020 4889CE   		movq	%rcx, %rsi
 3125 0023 4889C7   		movq	%rax, %rdi
 3126 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m@PLT
 3126      00
 3127 002b C9       		leave
 3128              		.cfi_def_cfa 7, 8
 3129 002c C3       		ret
 3130              		.cfi_endproc
 3131              	.LFE1526:
 3133              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_,"axG",@progbits,_ZNSt12_D
 3134              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_
 3136              	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_:
 3137              	.LFB1527:
 100:/usr/include/c++/4.9/bits/stl_construct.h **** 	{
 3138              		.loc 6 100 0
 3139              		.cfi_startproc
 3140 0000 55       		pushq	%rbp
 3141              		.cfi_def_cfa_offset 16
 3142              		.cfi_offset 6, -16
 3143 0001 4889E5   		movq	%rsp, %rbp
 3144              		.cfi_def_cfa_register 6
 3145 0004 4883EC10 		subq	$16, %rsp
 3146 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3147 000c 488975F0 		movq	%rsi, -16(%rbp)
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3148              		.loc 6 102 0
 3149 0010 EB19     		jmp	.L171
 3150              	.L172:
 103:/usr/include/c++/4.9/bits/stl_construct.h **** 	}
 3151              		.loc 6 103 0 discriminator 2
 3152 0012 488B45F8 		movq	-8(%rbp), %rax
 3153 0016 4889C7   		movq	%rax, %rdi
 3154 0019 E8000000 		call	_ZSt11__addressofISt4pairIiSsEEPT_RS2_@PLT
 3154      00
 3155 001e 4889C7   		movq	%rax, %rdi
 3156 0021 E8000000 		call	_ZSt8_DestroyISt4pairIiSsEEvPT_@PLT
 3156      00
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3157              		.loc 6 102 0 discriminator 2
 3158 0026 488345F8 		addq	$16, -8(%rbp)
 3158      10
 3159              	.L171:
 102:/usr/include/c++/4.9/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3160              		.loc 6 102 0 is_stmt 0 discriminator 1
 3161 002b 488B45F8 		movq	-8(%rbp), %rax
 3162 002f 483B45F0 		cmpq	-16(%rbp), %rax
 3163 0033 75DD     		jne	.L172
 104:/usr/include/c++/4.9/bits/stl_construct.h ****     };
 3164              		.loc 6 104 0 is_stmt 1
 3165 0035 C9       		leave
 3166              		.cfi_def_cfa 7, 8
 3167 0036 C3       		ret
 3168              		.cfi_endproc
 3169              	.LFE1527:
 3171              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m,"axG",@progbits,_ZN9__
 3172              		.align 2
 3173              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m
 3175              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m:
 3176              	.LFB1528:
 109:/usr/include/c++/4.9/ext/new_allocator.h ****       { ::operator delete(__p); }
 3177              		.loc 8 109 0
 3178              		.cfi_startproc
 3179 0000 55       		pushq	%rbp
 3180              		.cfi_def_cfa_offset 16
 3181              		.cfi_offset 6, -16
 3182 0001 4889E5   		movq	%rsp, %rbp
 3183              		.cfi_def_cfa_register 6
 3184 0004 4883EC20 		subq	$32, %rsp
 3185 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3186 000c 488975F0 		movq	%rsi, -16(%rbp)
 3187 0010 488955E8 		movq	%rdx, -24(%rbp)
 3188              		.loc 8 110 0
 3189 0014 488B45F0 		movq	-16(%rbp), %rax
 3190 0018 4889C7   		movq	%rax, %rdi
 3191 001b E8000000 		call	_ZdlPv@PLT
 3191      00
 3192 0020 C9       		leave
 3193              		.cfi_def_cfa 7, 8
 3194 0021 C3       		ret
 3195              		.cfi_endproc
 3196              	.LFE1528:
 3198              		.section	.text._ZSt11__addressofISt4pairIiSsEEPT_RS2_,"axG",@progbits,_ZSt11__addressofISt4pairIiS
 3199              		.weak	_ZSt11__addressofISt4pairIiSsEEPT_RS2_
 3201              	_ZSt11__addressofISt4pairIiSsEEPT_RS2_:
 3202              	.LFB1529:
  47:/usr/include/c++/4.9/bits/move.h ****     {
 3203              		.loc 10 47 0
 3204              		.cfi_startproc
 3205 0000 55       		pushq	%rbp
 3206              		.cfi_def_cfa_offset 16
 3207              		.cfi_offset 6, -16
 3208 0001 4889E5   		movq	%rsp, %rbp
 3209              		.cfi_def_cfa_register 6
 3210 0004 48897DF8 		movq	%rdi, -8(%rbp)
  50:/usr/include/c++/4.9/bits/move.h ****     }
 3211              		.loc 10 50 0
 3212 0008 488B45F8 		movq	-8(%rbp), %rax
 3213              		.loc 10 51 0
 3214 000c 5D       		popq	%rbp
 3215              		.cfi_def_cfa 7, 8
 3216 000d C3       		ret
 3217              		.cfi_endproc
 3218              	.LFE1529:
 3220              		.section	.text._ZNSt4pairIiSsED2Ev,"axG",@progbits,_ZNSt4pairIiSsED5Ev,comdat
 3221              		.align 2
 3222              		.weak	_ZNSt4pairIiSsED2Ev
 3224              	_ZNSt4pairIiSsED2Ev:
 3225              	.LFB1532:
 3226              		.file 12 "/usr/include/c++/4.9/bits/stl_pair.h"
   1:/usr/include/c++/4.9/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/include/c++/4.9/bits/stl_pair.h **** 
   3:/usr/include/c++/4.9/bits/stl_pair.h **** // Copyright (C) 2001-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/bits/stl_pair.h **** //
   5:/usr/include/c++/4.9/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/bits/stl_pair.h **** // any later version.
  10:/usr/include/c++/4.9/bits/stl_pair.h **** 
  11:/usr/include/c++/4.9/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/bits/stl_pair.h **** 
  16:/usr/include/c++/4.9/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/bits/stl_pair.h **** 
  20:/usr/include/c++/4.9/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/bits/stl_pair.h **** 
  25:/usr/include/c++/4.9/bits/stl_pair.h **** /*
  26:/usr/include/c++/4.9/bits/stl_pair.h ****  *
  27:/usr/include/c++/4.9/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.9/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.9/bits/stl_pair.h ****  *
  30:/usr/include/c++/4.9/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.9/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.9/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.9/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.9/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.9/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.9/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.9/bits/stl_pair.h ****  *
  38:/usr/include/c++/4.9/bits/stl_pair.h ****  *
  39:/usr/include/c++/4.9/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/4.9/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.9/bits/stl_pair.h ****  *
  42:/usr/include/c++/4.9/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.9/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.9/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.9/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.9/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.9/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.9/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.9/bits/stl_pair.h ****  */
  50:/usr/include/c++/4.9/bits/stl_pair.h **** 
  51:/usr/include/c++/4.9/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/include/c++/4.9/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.9/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/include/c++/4.9/bits/stl_pair.h ****  */
  55:/usr/include/c++/4.9/bits/stl_pair.h **** 
  56:/usr/include/c++/4.9/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/include/c++/4.9/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/include/c++/4.9/bits/stl_pair.h **** 
  59:/usr/include/c++/4.9/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/include/c++/4.9/bits/stl_pair.h **** 
  61:/usr/include/c++/4.9/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/include/c++/4.9/bits/stl_pair.h **** #include <type_traits> // for std::__decay_and_strip too
  63:/usr/include/c++/4.9/bits/stl_pair.h **** #endif
  64:/usr/include/c++/4.9/bits/stl_pair.h **** 
  65:/usr/include/c++/4.9/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  66:/usr/include/c++/4.9/bits/stl_pair.h **** {
  67:/usr/include/c++/4.9/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  68:/usr/include/c++/4.9/bits/stl_pair.h **** 
  69:/usr/include/c++/4.9/bits/stl_pair.h ****   /**
  70:/usr/include/c++/4.9/bits/stl_pair.h ****    *  @addtogroup utilities
  71:/usr/include/c++/4.9/bits/stl_pair.h ****    *  @{
  72:/usr/include/c++/4.9/bits/stl_pair.h ****    */
  73:/usr/include/c++/4.9/bits/stl_pair.h **** 
  74:/usr/include/c++/4.9/bits/stl_pair.h **** #if __cplusplus >= 201103L
  75:/usr/include/c++/4.9/bits/stl_pair.h ****   /// piecewise_construct_t
  76:/usr/include/c++/4.9/bits/stl_pair.h ****   struct piecewise_construct_t { };
  77:/usr/include/c++/4.9/bits/stl_pair.h **** 
  78:/usr/include/c++/4.9/bits/stl_pair.h ****   /// piecewise_construct
  79:/usr/include/c++/4.9/bits/stl_pair.h ****   constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();
  80:/usr/include/c++/4.9/bits/stl_pair.h **** 
  81:/usr/include/c++/4.9/bits/stl_pair.h ****   // Forward declarations.
  82:/usr/include/c++/4.9/bits/stl_pair.h ****   template<typename...>
  83:/usr/include/c++/4.9/bits/stl_pair.h ****     class tuple;
  84:/usr/include/c++/4.9/bits/stl_pair.h **** 
  85:/usr/include/c++/4.9/bits/stl_pair.h ****   template<std::size_t...>
  86:/usr/include/c++/4.9/bits/stl_pair.h ****     struct _Index_tuple;
  87:/usr/include/c++/4.9/bits/stl_pair.h **** #endif
  88:/usr/include/c++/4.9/bits/stl_pair.h **** 
  89:/usr/include/c++/4.9/bits/stl_pair.h ****  /**
  90:/usr/include/c++/4.9/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
  91:/usr/include/c++/4.9/bits/stl_pair.h ****    *
  92:/usr/include/c++/4.9/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
  93:/usr/include/c++/4.9/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
  94:/usr/include/c++/4.9/bits/stl_pair.h ****    */
  95:/usr/include/c++/4.9/bits/stl_pair.h ****   template<class _T1, class _T2>
  96:/usr/include/c++/4.9/bits/stl_pair.h ****     struct pair
 3227              		.loc 12 96 0
 3228              		.cfi_startproc
 3229 0000 55       		pushq	%rbp
 3230              		.cfi_def_cfa_offset 16
 3231              		.cfi_offset 6, -16
 3232 0001 4889E5   		movq	%rsp, %rbp
 3233              		.cfi_def_cfa_register 6
 3234 0004 4883EC10 		subq	$16, %rsp
 3235 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3236              	.LBB41:
 3237              		.loc 12 96 0
 3238 000c 488B45F8 		movq	-8(%rbp), %rax
 3239 0010 4883C008 		addq	$8, %rax
 3240 0014 4889C7   		movq	%rax, %rdi
 3241 0017 E8000000 		call	_ZNSsD1Ev@PLT
 3241      00
 3242              	.LBE41:
 3243 001c C9       		leave
 3244              		.cfi_def_cfa 7, 8
 3245 001d C3       		ret
 3246              		.cfi_endproc
 3247              	.LFE1532:
 3249              		.weak	_ZNSt4pairIiSsED1Ev
 3250              		.set	_ZNSt4pairIiSsED1Ev,_ZNSt4pairIiSsED2Ev
 3251              		.section	.text._ZSt8_DestroyISt4pairIiSsEEvPT_,"axG",@progbits,_ZSt8_DestroyISt4pairIiSsEEvPT_,com
 3252              		.weak	_ZSt8_DestroyISt4pairIiSsEEvPT_
 3254              	_ZSt8_DestroyISt4pairIiSsEEvPT_:
 3255              	.LFB1530:
  92:/usr/include/c++/4.9/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 3256              		.loc 6 92 0
 3257              		.cfi_startproc
 3258 0000 55       		pushq	%rbp
 3259              		.cfi_def_cfa_offset 16
 3260              		.cfi_offset 6, -16
 3261 0001 4889E5   		movq	%rsp, %rbp
 3262              		.cfi_def_cfa_register 6
 3263 0004 4883EC10 		subq	$16, %rsp
 3264 0008 48897DF8 		movq	%rdi, -8(%rbp)
  93:/usr/include/c++/4.9/bits/stl_construct.h **** 
 3265              		.loc 6 93 0
 3266 000c 488B45F8 		movq	-8(%rbp), %rax
 3267 0010 4889C7   		movq	%rax, %rdi
 3268 0013 E8000000 		call	_ZNSt4pairIiSsED1Ev@PLT
 3268      00
 3269 0018 C9       		leave
 3270              		.cfi_def_cfa 7, 8
 3271 0019 C3       		ret
 3272              		.cfi_endproc
 3273              	.LFE1530:
 3275              		.weak	_ZTVN8UnitTest15XmlTestReporterE
 3276              		.section	.data.rel.ro._ZTVN8UnitTest15XmlTestReporterE,"awG",@progbits,_ZTVN8UnitTest15XmlTestRepo
 3277              		.align 64
 3280              	_ZTVN8UnitTest15XmlTestReporterE:
 3281 0000 00000000 		.quad	0
 3281      00000000 
 3282 0008 00000000 		.quad	_ZTIN8UnitTest15XmlTestReporterE
 3282      00000000 
 3283 0010 00000000 		.quad	_ZN8UnitTest15XmlTestReporterD1Ev
 3283      00000000 
 3284 0018 00000000 		.quad	_ZN8UnitTest15XmlTestReporterD0Ev
 3284      00000000 
 3285 0020 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
 3285      00000000 
 3286 0028 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
 3286      00000000 
 3287 0030 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
 3287      00000000 
 3288 0038 00000000 		.quad	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
 3288      00000000 
 3289              		.section	.text._ZN8UnitTest15XmlTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest15XmlTestReporterD5Ev
 3290              		.align 2
 3291              		.weak	_ZN8UnitTest15XmlTestReporterD2Ev
 3293              	_ZN8UnitTest15XmlTestReporterD2Ev:
 3294              	.LFB1535:
 3295              		.file 13 "XmlTestReporter.h"
   1:XmlTestReporter.h **** #ifndef UNITTEST_XMLTESTREPORTER_H
   2:XmlTestReporter.h **** #define UNITTEST_XMLTESTREPORTER_H
   3:XmlTestReporter.h **** 
   4:XmlTestReporter.h **** #include "DeferredTestReporter.h"
   5:XmlTestReporter.h **** 
   6:XmlTestReporter.h **** #include <iosfwd>
   7:XmlTestReporter.h **** 
   8:XmlTestReporter.h **** namespace UnitTest
   9:XmlTestReporter.h **** {
  10:XmlTestReporter.h **** 
  11:XmlTestReporter.h **** class XmlTestReporter : public DeferredTestReporter
 3296              		.loc 13 11 0
 3297              		.cfi_startproc
 3298 0000 55       		pushq	%rbp
 3299              		.cfi_def_cfa_offset 16
 3300              		.cfi_offset 6, -16
 3301 0001 4889E5   		movq	%rsp, %rbp
 3302              		.cfi_def_cfa_register 6
 3303 0004 4883EC10 		subq	$16, %rsp
 3304 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3305              	.LBB42:
 3306              		.loc 13 11 0
 3307 000c 488B45F8 		movq	-8(%rbp), %rax
 3308 0010 488B1500 		movq	_ZTVN8UnitTest15XmlTestReporterE@GOTPCREL(%rip), %rdx
 3308      000000
 3309 0017 488D5210 		leaq	16(%rdx), %rdx
 3310 001b 488910   		movq	%rdx, (%rax)
 3311 001e 488B45F8 		movq	-8(%rbp), %rax
 3312 0022 4889C7   		movq	%rax, %rdi
 3313 0025 E8000000 		call	_ZN8UnitTest20DeferredTestReporterD2Ev@PLT
 3313      00
 3314              	.LBE42:
 3315 002a B8000000 		movl	$0, %eax
 3315      00
 3316 002f 85C0     		testl	%eax, %eax
 3317 0031 740C     		je	.L179
 3318              		.loc 13 11 0 is_stmt 0 discriminator 4
 3319 0033 488B45F8 		movq	-8(%rbp), %rax
 3320 0037 4889C7   		movq	%rax, %rdi
 3321 003a E8000000 		call	_ZdlPv@PLT
 3321      00
 3322              	.L179:
 3323              		.loc 13 11 0
 3324 003f C9       		leave
 3325              		.cfi_def_cfa 7, 8
 3326 0040 C3       		ret
 3327              		.cfi_endproc
 3328              	.LFE1535:
 3330              		.weak	_ZN8UnitTest15XmlTestReporterD1Ev
 3331              		.set	_ZN8UnitTest15XmlTestReporterD1Ev,_ZN8UnitTest15XmlTestReporterD2Ev
 3332              		.section	.text._ZN8UnitTest15XmlTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest15XmlTestReporterD5Ev
 3333              		.align 2
 3334              		.weak	_ZN8UnitTest15XmlTestReporterD0Ev
 3336              	_ZN8UnitTest15XmlTestReporterD0Ev:
 3337              	.LFB1537:
 3338              		.loc 13 11 0 is_stmt 1
 3339              		.cfi_startproc
 3340 0000 55       		pushq	%rbp
 3341              		.cfi_def_cfa_offset 16
 3342              		.cfi_offset 6, -16
 3343 0001 4889E5   		movq	%rsp, %rbp
 3344              		.cfi_def_cfa_register 6
 3345 0004 4883EC10 		subq	$16, %rsp
 3346 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3347              		.loc 13 11 0
 3348 000c 488B45F8 		movq	-8(%rbp), %rax
 3349 0010 4889C7   		movq	%rax, %rdi
 3350 0013 E8000000 		call	_ZN8UnitTest15XmlTestReporterD1Ev@PLT
 3350      00
 3351 0018 488B45F8 		movq	-8(%rbp), %rax
 3352 001c 4889C7   		movq	%rax, %rdi
 3353 001f E8000000 		call	_ZdlPv@PLT
 3353      00
 3354 0024 C9       		leave
 3355              		.cfi_def_cfa 7, 8
 3356 0025 C3       		ret
 3357              		.cfi_endproc
 3358              	.LFE1537:
 3360              		.weak	_ZTIN8UnitTest15XmlTestReporterE
 3361              		.section	.data.rel.ro._ZTIN8UnitTest15XmlTestReporterE,"awG",@progbits,_ZTIN8UnitTest15XmlTestRepo
 3362              		.align 16
 3365              	_ZTIN8UnitTest15XmlTestReporterE:
 3366 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 3366      00000000 
 3367 0008 00000000 		.quad	_ZTSN8UnitTest15XmlTestReporterE
 3367      00000000 
 3368 0010 00000000 		.quad	_ZTIN8UnitTest20DeferredTestReporterE
 3368      00000000 
 3369              		.weak	_ZTSN8UnitTest15XmlTestReporterE
 3370              		.section	.rodata._ZTSN8UnitTest15XmlTestReporterE,"aG",@progbits,_ZTSN8UnitTest15XmlTestReporterE,
 3371              		.align 16
 3374              	_ZTSN8UnitTest15XmlTestReporterE:
 3375 0000 4E38556E 		.string	"N8UnitTest15XmlTestReporterE"
 3375      69745465 
 3375      73743135 
 3375      586D6C54 
 3375      65737452 
 3376              		.text
 3378              	_Z41__static_initialization_and_destruction_0ii:
 3379              	.LFB1538:
 126:XmlTestReporter.cpp **** 
 127:XmlTestReporter.cpp **** }
 3380              		.loc 1 127 0
 3381              		.cfi_startproc
 3382 0a2a 55       		pushq	%rbp
 3383              		.cfi_def_cfa_offset 16
 3384              		.cfi_offset 6, -16
 3385 0a2b 4889E5   		movq	%rsp, %rbp
 3386              		.cfi_def_cfa_register 6
 3387 0a2e 4883EC10 		subq	$16, %rsp
 3388 0a32 897DFC   		movl	%edi, -4(%rbp)
 3389 0a35 8975F8   		movl	%esi, -8(%rbp)
 3390              		.loc 1 127 0
 3391 0a38 837DFC01 		cmpl	$1, -4(%rbp)
 3392 0a3c 7532     		jne	.L184
 3393              		.loc 1 127 0 is_stmt 0 discriminator 1
 3394 0a3e 817DF8FF 		cmpl	$65535, -8(%rbp)
 3394      FF0000
 3395 0a45 7529     		jne	.L184
 3396              		.file 14 "/usr/include/c++/4.9/iostream"
   1:/usr/include/c++/4.9/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/4.9/iostream **** 
   3:/usr/include/c++/4.9/iostream **** // Copyright (C) 1997-2014 Free Software Foundation, Inc.
   4:/usr/include/c++/4.9/iostream **** //
   5:/usr/include/c++/4.9/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.9/iostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.9/iostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.9/iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.9/iostream **** // any later version.
  10:/usr/include/c++/4.9/iostream **** 
  11:/usr/include/c++/4.9/iostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.9/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.9/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.9/iostream **** // GNU General Public License for more details.
  15:/usr/include/c++/4.9/iostream **** 
  16:/usr/include/c++/4.9/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.9/iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.9/iostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.9/iostream **** 
  20:/usr/include/c++/4.9/iostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.9/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.9/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.9/iostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.9/iostream **** 
  25:/usr/include/c++/4.9/iostream **** /** @file include/iostream
  26:/usr/include/c++/4.9/iostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/4.9/iostream ****  */
  28:/usr/include/c++/4.9/iostream **** 
  29:/usr/include/c++/4.9/iostream **** //
  30:/usr/include/c++/4.9/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:/usr/include/c++/4.9/iostream **** //
  32:/usr/include/c++/4.9/iostream **** 
  33:/usr/include/c++/4.9/iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:/usr/include/c++/4.9/iostream **** #define _GLIBCXX_IOSTREAM 1
  35:/usr/include/c++/4.9/iostream **** 
  36:/usr/include/c++/4.9/iostream **** #pragma GCC system_header
  37:/usr/include/c++/4.9/iostream **** 
  38:/usr/include/c++/4.9/iostream **** #include <bits/c++config.h>
  39:/usr/include/c++/4.9/iostream **** #include <ostream>
  40:/usr/include/c++/4.9/iostream **** #include <istream>
  41:/usr/include/c++/4.9/iostream **** 
  42:/usr/include/c++/4.9/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/4.9/iostream **** {
  44:/usr/include/c++/4.9/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/4.9/iostream **** 
  46:/usr/include/c++/4.9/iostream ****   /**
  47:/usr/include/c++/4.9/iostream ****    *  @name Standard Stream Objects
  48:/usr/include/c++/4.9/iostream ****    *
  49:/usr/include/c++/4.9/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:/usr/include/c++/4.9/iostream ****    *  objects</em>.  For other declarations, see
  51:/usr/include/c++/4.9/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
  52:/usr/include/c++/4.9/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:/usr/include/c++/4.9/iostream ****    *
  54:/usr/include/c++/4.9/iostream ****    *  They are required by default to cooperate with the global C
  55:/usr/include/c++/4.9/iostream ****    *  library's @c FILE streams, and to be available during program
  56:/usr/include/c++/4.9/iostream ****    *  startup and termination. For more information, see the section of the
  57:/usr/include/c++/4.9/iostream ****    *  manual linked to above.
  58:/usr/include/c++/4.9/iostream ****   */
  59:/usr/include/c++/4.9/iostream ****   //@{
  60:/usr/include/c++/4.9/iostream ****   extern istream cin;		/// Linked to standard input
  61:/usr/include/c++/4.9/iostream ****   extern ostream cout;		/// Linked to standard output
  62:/usr/include/c++/4.9/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:/usr/include/c++/4.9/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:/usr/include/c++/4.9/iostream **** 
  65:/usr/include/c++/4.9/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:/usr/include/c++/4.9/iostream ****   extern wistream wcin;		/// Linked to standard input
  67:/usr/include/c++/4.9/iostream ****   extern wostream wcout;	/// Linked to standard output
  68:/usr/include/c++/4.9/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:/usr/include/c++/4.9/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:/usr/include/c++/4.9/iostream **** #endif
  71:/usr/include/c++/4.9/iostream ****   //@}
  72:/usr/include/c++/4.9/iostream **** 
  73:/usr/include/c++/4.9/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:/usr/include/c++/4.9/iostream ****   static ios_base::Init __ioinit;
 3397              		.loc 14 74 0 is_stmt 1
 3398 0a47 488D3D00 		leaq	_ZStL8__ioinit(%rip), %rdi
 3398      000000
 3399 0a4e E8000000 		call	_ZNSt8ios_base4InitC1Ev@PLT
 3399      00
 3400 0a53 488D1500 		leaq	__dso_handle(%rip), %rdx
 3400      000000
 3401 0a5a 488D3500 		leaq	_ZStL8__ioinit(%rip), %rsi
 3401      000000
 3402 0a61 488B0500 		movq	_ZNSt8ios_base4InitD1Ev@GOTPCREL(%rip), %rax
 3402      000000
 3403 0a68 4889C7   		movq	%rax, %rdi
 3404 0a6b E8000000 		call	__cxa_atexit@PLT
 3404      00
 3405              	.L184:
 3406              		.loc 1 127 0
 3407 0a70 C9       		leave
 3408              		.cfi_def_cfa 7, 8
 3409 0a71 C3       		ret
 3410              		.cfi_endproc
 3411              	.LFE1538:
 3414              	_GLOBAL__sub_I_XmlTestReporter.cpp:
 3415              	.LFB1539:
 3416              		.loc 1 127 0
 3417              		.cfi_startproc
 3418 0a72 55       		pushq	%rbp
 3419              		.cfi_def_cfa_offset 16
 3420              		.cfi_offset 6, -16
 3421 0a73 4889E5   		movq	%rsp, %rbp
 3422              		.cfi_def_cfa_register 6
 3423              		.loc 1 127 0
 3424 0a76 BEFFFF00 		movl	$65535, %esi
 3424      00
 3425 0a7b BF010000 		movl	$1, %edi
 3425      00
 3426 0a80 E8A5FFFF 		call	_Z41__static_initialization_and_destruction_0ii
 3426      FF
 3427 0a85 5D       		popq	%rbp
 3428              		.cfi_def_cfa 7, 8
 3429 0a86 C3       		ret
 3430              		.cfi_endproc
 3431              	.LFE1539:
 3433              		.section	.init_array,"aw"
 3434              		.align 8
 3435 0000 00000000 		.quad	_GLOBAL__sub_I_XmlTestReporter.cpp
 3435      00000000 
 3436              		.section	.data.rel.ro,"aw",@progbits
 3437              		.align 8
 3440              	_ZZL18__gthread_active_pvE20__gthread_active_ptr:
 3441 0000 00000000 		.quad	_ZL28__gthrw___pthread_key_createPjPFvPvE
 3441      00000000 
 3442              		.weakref	_ZL28__gthrw___pthread_key_createPjPFvPvE,__pthread_key_create
 3443              		.text
 3444              	.Letext0:
 3445              		.file 15 "/usr/include/c++/4.9/cwchar"
 3446              		.file 16 "/usr/include/c++/4.9/bits/char_traits.h"
 3447              		.file 17 "/usr/include/x86_64-linux-gnu/c++/4.9/bits/c++config.h"
 3448              		.file 18 "/usr/include/c++/4.9/clocale"
 3449              		.file 19 "/usr/include/c++/4.9/bits/basic_string.h"
 3450              		.file 20 "/usr/include/c++/4.9/bits/basic_string.tcc"
 3451              		.file 21 "/usr/include/c++/4.9/bits/vector.tcc"
 3452              		.file 22 "/usr/include/c++/4.9/bits/stringfwd.h"
 3453              		.file 23 "/usr/include/c++/4.9/bits/ios_base.h"
 3454              		.file 24 "/usr/include/c++/4.9/cwctype"
 3455              		.file 25 "/usr/include/c++/4.9/iosfwd"
 3456              		.file 26 "/usr/include/c++/4.9/bits/stl_iterator_base_types.h"
 3457              		.file 27 "/usr/include/c++/4.9/debug/debug.h"
 3458              		.file 28 "/usr/include/c++/4.9/bits/predefined_ops.h"
 3459              		.file 29 "/usr/include/c++/4.9/ext/numeric_traits.h"
 3460              		.file 30 "/usr/include/c++/4.9/bits/cpp_type_traits.h"
 3461              		.file 31 "/usr/include/stdio.h"
 3462              		.file 32 "<built-in>"
 3463              		.file 33 "/usr/lib/gcc/x86_64-linux-gnu/4.9/include/stddef.h"
 3464              		.file 34 "/usr/include/wchar.h"
 3465              		.file 35 "/usr/include/time.h"
 3466              		.file 36 "/usr/include/locale.h"
 3467              		.file 37 "/usr/include/x86_64-linux-gnu/bits/types.h"
 3468              		.file 38 "/usr/include/x86_64-linux-gnu/c++/4.9/bits/atomic_word.h"
 3469              		.file 39 "/usr/include/wctype.h"
 19168              		.align 8
 19171              	DW.ref.__gxx_personality_v0:
 19172 0000 00000000 		.quad	__gxx_personality_v0
 19172      00000000 
 19173              		.hidden	__dso_handle
 19174              		.ident	"GCC: (Ubuntu 4.9.2-10ubuntu13) 4.9.2"
 19175              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 XmlTestReporter.cpp
                             .bss:0000000000000000 _ZStL8__ioinit
     /tmp/ccSsC8ua.s:7      .text:0000000000000000 _ZN12_GLOBAL__N_111ReplaceCharERSscRKSs
     /tmp/ccSsC8ua.s:77     .text:0000000000000075 _ZN12_GLOBAL__N_19XmlEscapeERKSs
     /tmp/ccSsC8ua.s:19171  .data.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccSsC8ua.s:442    .text:0000000000000323 _ZN12_GLOBAL__N_119BuildFailureMessageERKSsiS1_
     /tmp/ccSsC8ua.s:572    .text._ZN8UnitTest12TestReporterC2Ev:0000000000000000 _ZN8UnitTest12TestReporterC2Ev
     /tmp/ccSsC8ua.s:572    .text._ZN8UnitTest12TestReporterC2Ev:0000000000000000 _ZN8UnitTest12TestReporterC1Ev
     /tmp/ccSsC8ua.s:602    .text._ZN8UnitTest20DeferredTestReporterC2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterC2Ev
     /tmp/ccSsC8ua.s:1495   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
     /tmp/ccSsC8ua.s:602    .text._ZN8UnitTest20DeferredTestReporterC2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterC1Ev
     /tmp/ccSsC8ua.s:679    .text._ZN8UnitTest20DeferredTestReporterD2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD2Ev
     /tmp/ccSsC8ua.s:1525   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
     /tmp/ccSsC8ua.s:679    .text._ZN8UnitTest20DeferredTestReporterD2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD1Ev
     /tmp/ccSsC8ua.s:770    .text._ZN8UnitTest20DeferredTestReporterD0Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD0Ev
     /tmp/ccSsC8ua.s:798    .text:000000000000043a _ZN8UnitTest15XmlTestReporterC2ERSo
     /tmp/ccSsC8ua.s:3280   .data.rel.ro._ZTVN8UnitTest15XmlTestReporterE:0000000000000000 _ZTVN8UnitTest15XmlTestReporterE
     /tmp/ccSsC8ua.s:798    .text:000000000000043a _ZN8UnitTest15XmlTestReporterC1ERSo
     /tmp/ccSsC8ua.s:835    .text:0000000000000476 _ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
     /tmp/ccSsC8ua.s:980    .text:00000000000005f4 _ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc
     /tmp/ccSsC8ua.s:1044   .text:000000000000066c _ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif
     /tmp/ccSsC8ua.s:1610   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
     /tmp/ccSsC8ua.s:1756   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
     /tmp/ccSsC8ua.s:1167   .text:0000000000000794 _ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE
     /tmp/ccSsC8ua.s:1779   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv
     /tmp/ccSsC8ua.s:1297   .text:00000000000008a8 _ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE
     /tmp/ccSsC8ua.s:1250   .text:000000000000085e _ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE
     /tmp/ccSsC8ua.s:1727   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv
     /tmp/ccSsC8ua.s:1650   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
     /tmp/ccSsC8ua.s:1689   .text._ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:0000000000000000 _ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
     /tmp/ccSsC8ua.s:1132   .text:000000000000076e _ZN8UnitTest15XmlTestReporter10EndResultsERSo
     /tmp/ccSsC8ua.s:1802   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv
     /tmp/ccSsC8ua.s:1947   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEptEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEptEv
     /tmp/ccSsC8ua.s:1918   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv
     /tmp/ccSsC8ua.s:1842   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv
     /tmp/ccSsC8ua.s:1881   .text._ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:0000000000000000 _ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
     /tmp/ccSsC8ua.s:1495   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
     /tmp/ccSsC8ua.s:1999   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
     /tmp/ccSsC8ua.s:1525   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
     /tmp/ccSsC8ua.s:2114   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccSsC8ua.s:2135   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
     /tmp/ccSsC8ua.s:2028   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
     /tmp/ccSsC8ua.s:2166   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS4_
     /tmp/ccSsC8ua.s:2196   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccSsC8ua.s:2218   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_
     /tmp/ccSsC8ua.s:2248   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccSsC8ua.s:1970   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev
     /tmp/ccSsC8ua.s:2306   .text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED2Ev
     /tmp/ccSsC8ua.s:1970   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev
     /tmp/ccSsC8ua.s:2270   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev
     /tmp/ccSsC8ua.s:1999   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
     /tmp/ccSsC8ua.s:2336   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
     /tmp/ccSsC8ua.s:2028   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
     /tmp/ccSsC8ua.s:2372   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
     /tmp/ccSsC8ua.s:2166   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_
     /tmp/ccSsC8ua.s:2218   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_
     /tmp/ccSsC8ua.s:2270   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev
     /tmp/ccSsC8ua.s:2403   .text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
     /tmp/ccSsC8ua.s:2432   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev
     /tmp/ccSsC8ua.s:2306   .text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED1Ev
     /tmp/ccSsC8ua.s:2455   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m
     /tmp/ccSsC8ua.s:2485   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
     /tmp/ccSsC8ua.s:2524   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev
     /tmp/ccSsC8ua.s:2403   .text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC1Ev
     /tmp/ccSsC8ua.s:2432   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev
     /tmp/ccSsC8ua.s:2547   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
     /tmp/ccSsC8ua.s:2573   .text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:0000000000000000 _ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
     /tmp/ccSsC8ua.s:2716   .text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:0000000000000000 _ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
     /tmp/ccSsC8ua.s:2524   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev
     /tmp/ccSsC8ua.s:2597   .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD2Ev
     /tmp/ccSsC8ua.s:2741   .text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev
     /tmp/ccSsC8ua.s:2597   .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD1Ev
     /tmp/ccSsC8ua.s:2741   .text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev
     /tmp/ccSsC8ua.s:2938   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccSsC8ua.s:2959   .text._ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E
     /tmp/ccSsC8ua.s:2855   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev
     /tmp/ccSsC8ua.s:2826   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev
     /tmp/ccSsC8ua.s:2989   .text._ZNSaISt4pairIiSsEED2Ev:0000000000000000 _ZNSaISt4pairIiSsEED2Ev
     /tmp/ccSsC8ua.s:2826   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev
     /tmp/ccSsC8ua.s:3018   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m
     /tmp/ccSsC8ua.s:2855   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED1Ev
     /tmp/ccSsC8ua.s:3054   .text._ZSt8_DestroyIPSt4pairIiSsEEvT_S3_:0000000000000000 _ZSt8_DestroyIPSt4pairIiSsEEvT_S3_
     /tmp/ccSsC8ua.s:3085   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev
     /tmp/ccSsC8ua.s:2989   .text._ZNSaISt4pairIiSsEED2Ev:0000000000000000 _ZNSaISt4pairIiSsEED1Ev
     /tmp/ccSsC8ua.s:3107   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE10deallocateERS3_PS2_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE10deallocateERS3_PS2_m
     /tmp/ccSsC8ua.s:3136   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_
     /tmp/ccSsC8ua.s:3085   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED1Ev
     /tmp/ccSsC8ua.s:3175   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m
     /tmp/ccSsC8ua.s:3201   .text._ZSt11__addressofISt4pairIiSsEEPT_RS2_:0000000000000000 _ZSt11__addressofISt4pairIiSsEEPT_RS2_
     /tmp/ccSsC8ua.s:3254   .text._ZSt8_DestroyISt4pairIiSsEEvPT_:0000000000000000 _ZSt8_DestroyISt4pairIiSsEEvPT_
     /tmp/ccSsC8ua.s:3224   .text._ZNSt4pairIiSsED2Ev:0000000000000000 _ZNSt4pairIiSsED2Ev
     /tmp/ccSsC8ua.s:3224   .text._ZNSt4pairIiSsED2Ev:0000000000000000 _ZNSt4pairIiSsED1Ev
     /tmp/ccSsC8ua.s:3365   .data.rel.ro._ZTIN8UnitTest15XmlTestReporterE:0000000000000000 _ZTIN8UnitTest15XmlTestReporterE
     /tmp/ccSsC8ua.s:3293   .text._ZN8UnitTest15XmlTestReporterD2Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD1Ev
     /tmp/ccSsC8ua.s:3336   .text._ZN8UnitTest15XmlTestReporterD0Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD0Ev
     /tmp/ccSsC8ua.s:3293   .text._ZN8UnitTest15XmlTestReporterD2Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD2Ev
     /tmp/ccSsC8ua.s:3374   .rodata._ZTSN8UnitTest15XmlTestReporterE:0000000000000000 _ZTSN8UnitTest15XmlTestReporterE
     /tmp/ccSsC8ua.s:3378   .text:0000000000000a2a _Z41__static_initialization_and_destruction_0ii
     /tmp/ccSsC8ua.s:3414   .text:0000000000000a72 _GLOBAL__sub_I_XmlTestReporter.cpp
     /tmp/ccSsC8ua.s:3440   .data.rel.ro:0000000000000000 _ZZL18__gthread_active_pvE20__gthread_active_ptr
                           .group:0000000000000000 _ZN8UnitTest12TestReporterC5Ev
                           .group:0000000000000000 _ZN8UnitTest20DeferredTestReporterC5Ev
                           .group:0000000000000000 _ZN8UnitTest20DeferredTestReporterD5Ev
                           .group:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC5Ev
                           .group:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC5ERKS4_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC5ERKS4_
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC5Ev
                           .group:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED5Ev
                           .group:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC5Ev
                           .group:0000000000000000 _ZN8UnitTest18DeferredTestResultD5Ev
                           .group:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSaISt4pairIiSsEED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED5Ev
                           .group:0000000000000000 _ZNSt4pairIiSsED5Ev
                           .group:0000000000000000 _ZN8UnitTest15XmlTestReporterD5Ev

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
_ZNKSs4findEcm
_ZNSs7replaceEmmRKSs
_ZNSsC1ERKSs
_ZNSaIcEC1Ev
_ZNSsC1EPKcRKSaIcE
_ZNSsD1Ev
_ZNSaIcED1Ev
_Unwind_Resume
__stack_chk_fail
__gxx_personality_v0
_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode
_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
_ZNSolsEi
_ZNKSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv
_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev
_ZTVN8UnitTest12TestReporterE
_ZTVN8UnitTest20DeferredTestReporterE
_ZN8UnitTest12TestReporterD2Ev
_ZdlPv
_ZN8UnitTest20DeferredTestReporter10GetResultsEv
_ZNSolsEf
_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTIN8UnitTest20DeferredTestReporterE
_ZNSt8ios_base4InitC1Ev
__dso_handle
_ZNSt8ios_base4InitD1Ev
__cxa_atexit
__pthread_key_create
