   1              		.file	"eeprom.c"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/asoreyh/Dropbox/projects/lago/acqua/nexys/src/makestuff/libs/libfx2loader" "eeprom.
   5              		.section	.rodata
   6              		.align 8
   7              	.LC0:
   8 0000 66783257 		.string	"fx2WriteEEPROM(): This firmware does not seem to support EEPROM operations - try loading 
   8      72697465 
   8      45455052 
   8      4F4D2829 
   8      3A205468 
   9              		.text
  10              		.globl	fx2WriteEEPROM
  12              	fx2WriteEEPROM:
  13              	.LFB4:
  14              		.file 1 "eeprom.c"
   1:eeprom.c      **** /*
   2:eeprom.c      ****  * Copyright (C) 2009-2012 Chris McClelland
   3:eeprom.c      ****  *
   4:eeprom.c      ****  * This program is free software: you can redistribute it and/or modify
   5:eeprom.c      ****  * it under the terms of the GNU Lesser General Public License as published by
   6:eeprom.c      ****  * the Free Software Foundation, either version 3 of the License, or
   7:eeprom.c      ****  * (at your option) any later version.
   8:eeprom.c      ****  *
   9:eeprom.c      ****  * This program is distributed in the hope that it will be useful,
  10:eeprom.c      ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:eeprom.c      ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:eeprom.c      ****  * GNU Lesser General Public License for more details.
  13:eeprom.c      ****  *
  14:eeprom.c      ****  * You should have received a copy of the GNU Lesser General Public License
  15:eeprom.c      ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:eeprom.c      ****  */
  17:eeprom.c      **** #include <makestuff.h>
  18:eeprom.c      **** #include <libusbwrap.h>
  19:eeprom.c      **** #ifdef WIN32
  20:eeprom.c      **** 	#include <lusb0_usb.h>
  21:eeprom.c      **** #else
  22:eeprom.c      **** 	#include <usb.h>
  23:eeprom.c      **** #endif
  24:eeprom.c      **** #include <liberror.h>
  25:eeprom.c      **** #include <libbuffer.h>
  26:eeprom.c      **** #include "libfx2loader.h"
  27:eeprom.c      **** 
  28:eeprom.c      **** #define A2_WRITE_ERROR "fx2WriteEEPROM(): This firmware does not seem to support EEPROM operations 
  29:eeprom.c      **** #define A2_READ_ERROR "fx2ReadEEPROM(): This firmware does not seem to support EEPROM operations - 
  30:eeprom.c      **** #define BLOCK_SIZE 4096L
  31:eeprom.c      **** 
  32:eeprom.c      **** // Write the supplied reader buffer to EEPROM, using the supplied VID/PID.
  33:eeprom.c      **** //
  34:eeprom.c      **** DLLEXPORT(FX2Status) fx2WriteEEPROM(
  35:eeprom.c      **** 	struct usb_dev_handle *device, const uint8 *bufPtr, int numBytes, const char **error)
  36:eeprom.c      **** {
  15              		.loc 1 36 1
  16              		.cfi_startproc
  17 0000 F30F1EFA 		endbr64
  18 0004 55       		pushq	%rbp
  19              		.cfi_def_cfa_offset 16
  20              		.cfi_offset 6, -16
  21 0005 4889E5   		movq	%rsp, %rbp
  22              		.cfi_def_cfa_register 6
  23 0008 4883EC30 		subq	$48, %rsp
  24 000c 48897DE8 		movq	%rdi, -24(%rbp)
  25 0010 488975E0 		movq	%rsi, -32(%rbp)
  26 0014 8955DC   		movl	%edx, -36(%rbp)
  27 0017 48894DD0 		movq	%rcx, -48(%rbp)
  37:eeprom.c      **** 	FX2Status returnCode;
  38:eeprom.c      **** 	int uStatus;
  39:eeprom.c      **** 	uint16 address = 0x0000;
  28              		.loc 1 39 9
  29 001b 66C745F6 		movw	$0, -10(%rbp)
  29      0000
  40:eeprom.c      **** 	while ( numBytes > BLOCK_SIZE ) {
  30              		.loc 1 40 8
  31 0021 E99C0000 		jmp	.L2
  31      00
  32              	.L5:
  41:eeprom.c      **** 		uStatus = usb_control_msg(
  33              		.loc 1 41 13
  34 0026 0FB755F6 		movzwl	-10(%rbp), %edx
  35 002a 488B4DE0 		movq	-32(%rbp), %rcx
  36 002e 488B45E8 		movq	-24(%rbp), %rax
  37 0032 68881300 		pushq	$5000
  37      00
  38 0037 68001000 		pushq	$4096
  38      00
  39 003c 4989C9   		movq	%rcx, %r9
  40 003f 41B80000 		movl	$0, %r8d
  40      0000
  41 0045 89D1     		movl	%edx, %ecx
  42 0047 BAA20000 		movl	$162, %edx
  42      00
  43 004c BE400000 		movl	$64, %esi
  43      00
  44 0051 4889C7   		movq	%rax, %rdi
  45 0054 E8000000 		call	usb_control_msg@PLT
  45      00
  46 0059 4883C410 		addq	$16, %rsp
  47 005d 8945FC   		movl	%eax, -4(%rbp)
  42:eeprom.c      **** 			device,
  43:eeprom.c      **** 			(USB_ENDPOINT_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE),
  44:eeprom.c      **** 			0xA2, address, 0x0000, (char*)bufPtr, BLOCK_SIZE, 5000
  45:eeprom.c      **** 		);
  46:eeprom.c      **** 		if ( uStatus != BLOCK_SIZE ) {
  48              		.loc 1 46 6
  49 0060 817DFC00 		cmpl	$4096, -4(%rbp)
  49      100000
  50 0067 7440     		je	.L3
  47:eeprom.c      **** 			errRender(error, A2_WRITE_ERROR, BLOCK_SIZE, address, uStatus, usb_strerror());
  51              		.loc 1 47 4
  52 0069 E8000000 		call	usb_strerror@PLT
  52      00
  53 006e 4889C1   		movq	%rax, %rcx
  54 0071 0FB755F6 		movzwl	-10(%rbp), %edx
  55 0075 8B75FC   		movl	-4(%rbp), %esi
  56 0078 488B45D0 		movq	-48(%rbp), %rax
  57 007c 4989C9   		movq	%rcx, %r9
  58 007f 4189F0   		movl	%esi, %r8d
  59 0082 89D1     		movl	%edx, %ecx
  60 0084 BA001000 		movl	$4096, %edx
  60      00
  61 0089 488D3500 		leaq	.LC0(%rip), %rsi
  61      000000
  62 0090 4889C7   		movq	%rax, %rdi
  63 0093 B8000000 		movl	$0, %eax
  63      00
  64 0098 E8000000 		call	errRender@PLT
  64      00
  48:eeprom.c      **** 			FAIL(FX2_USB_ERR);
  65              		.loc 1 48 4
  66 009d C745F801 		movl	$1, -8(%rbp)
  66      000000
  67 00a4 E9A70000 		jmp	.L4
  67      00
  68              	.L3:
  49:eeprom.c      **** 		}
  50:eeprom.c      **** 		numBytes -= BLOCK_SIZE;
  69              		.loc 1 50 12
  70 00a9 8B45DC   		movl	-36(%rbp), %eax
  71 00ac 2D001000 		subl	$4096, %eax
  71      00
  72 00b1 8945DC   		movl	%eax, -36(%rbp)
  51:eeprom.c      **** 		bufPtr += BLOCK_SIZE;
  73              		.loc 1 51 10
  74 00b4 488145E0 		addq	$4096, -32(%rbp)
  74      00100000 
  52:eeprom.c      **** 		address += BLOCK_SIZE;
  75              		.loc 1 52 11
  76 00bc 668145F6 		addw	$4096, -10(%rbp)
  76      0010
  77              	.L2:
  40:eeprom.c      **** 		uStatus = usb_control_msg(
  78              		.loc 1 40 19
  79 00c2 817DDC00 		cmpl	$4096, -36(%rbp)
  79      100000
  80 00c9 0F8F57FF 		jg	.L5
  80      FFFF
  53:eeprom.c      **** 	}
  54:eeprom.c      **** 	uStatus = usb_control_msg(
  81              		.loc 1 54 12
  82 00cf 0FB755F6 		movzwl	-10(%rbp), %edx
  83 00d3 488B75E0 		movq	-32(%rbp), %rsi
  84 00d7 488B45E8 		movq	-24(%rbp), %rax
  85 00db 68881300 		pushq	$5000
  85      00
  86 00e0 8B4DDC   		movl	-36(%rbp), %ecx
  87 00e3 51       		pushq	%rcx
  88 00e4 4989F1   		movq	%rsi, %r9
  89 00e7 41B80000 		movl	$0, %r8d
  89      0000
  90 00ed 89D1     		movl	%edx, %ecx
  91 00ef BAA20000 		movl	$162, %edx
  91      00
  92 00f4 BE400000 		movl	$64, %esi
  92      00
  93 00f9 4889C7   		movq	%rax, %rdi
  94 00fc E8000000 		call	usb_control_msg@PLT
  94      00
  95 0101 4883C410 		addq	$16, %rsp
  96 0105 8945FC   		movl	%eax, -4(%rbp)
  55:eeprom.c      **** 		device,
  56:eeprom.c      **** 		(USB_ENDPOINT_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE),
  57:eeprom.c      **** 		0xA2, address, 0x0000, (char*)bufPtr, numBytes, 5000
  58:eeprom.c      **** 	);
  59:eeprom.c      **** 	if ( uStatus != numBytes ) {
  97              		.loc 1 59 5
  98 0108 8B45FC   		movl	-4(%rbp), %eax
  99 010b 3B45DC   		cmpl	-36(%rbp), %eax
 100 010e 7439     		je	.L6
  60:eeprom.c      **** 		errRender(error, A2_WRITE_ERROR, numBytes, address, uStatus, usb_strerror());
 101              		.loc 1 60 3
 102 0110 E8000000 		call	usb_strerror@PLT
 102      00
 103 0115 4889C6   		movq	%rax, %rsi
 104 0118 0FB74DF6 		movzwl	-10(%rbp), %ecx
 105 011c 8B7DFC   		movl	-4(%rbp), %edi
 106 011f 8B55DC   		movl	-36(%rbp), %edx
 107 0122 488B45D0 		movq	-48(%rbp), %rax
 108 0126 4989F1   		movq	%rsi, %r9
 109 0129 4189F8   		movl	%edi, %r8d
 110 012c 488D3500 		leaq	.LC0(%rip), %rsi
 110      000000
 111 0133 4889C7   		movq	%rax, %rdi
 112 0136 B8000000 		movl	$0, %eax
 112      00
 113 013b E8000000 		call	errRender@PLT
 113      00
  61:eeprom.c      **** 		FAIL(FX2_USB_ERR);
 114              		.loc 1 61 3
 115 0140 C745F801 		movl	$1, -8(%rbp)
 115      000000
 116 0147 EB07     		jmp	.L4
 117              	.L6:
  62:eeprom.c      **** 	}
  63:eeprom.c      **** 	return FX2_SUCCESS;
 118              		.loc 1 63 9
 119 0149 B8000000 		movl	$0, %eax
 119      00
 120 014e EB03     		jmp	.L7
 121              	.L4:
  64:eeprom.c      **** cleanup:
  65:eeprom.c      **** 	return returnCode;
 122              		.loc 1 65 9
 123 0150 8B45F8   		movl	-8(%rbp), %eax
 124              	.L7:
  66:eeprom.c      **** }
 125              		.loc 1 66 1
 126 0153 C9       		leave
 127              		.cfi_def_cfa 7, 8
 128 0154 C3       		ret
 129              		.cfi_endproc
 130              	.LFE4:
 132              		.section	.rodata
 133              	.LC1:
 134 00cd 66783252 		.string	"fx2ReadEEPROM()"
 134      65616445 
 134      4550524F 
 134      4D282900 
 135 00dd 000000   		.align 8
 136              	.LC2:
 137 00e0 66783252 		.string	"fx2ReadEEPROM(): This firmware does not seem to support EEPROM operations - try loading a
 137      65616445 
 137      4550524F 
 137      4D28293A 
 137      20546869 
 138              		.text
 139              		.globl	fx2ReadEEPROM
 141              	fx2ReadEEPROM:
 142              	.LFB5:
  67:eeprom.c      **** 
  68:eeprom.c      **** // Read from the EEPROM into the supplied buffer, using the supplied VID/PID.
  69:eeprom.c      **** //
  70:eeprom.c      **** DLLEXPORT(FX2Status) fx2ReadEEPROM(
  71:eeprom.c      **** 	struct usb_dev_handle *device, uint32 numBytes, struct Buffer *i2cBuffer, const char **error)
  72:eeprom.c      **** {
 143              		.loc 1 72 1
 144              		.cfi_startproc
 145 0155 F30F1EFA 		endbr64
 146 0159 55       		pushq	%rbp
 147              		.cfi_def_cfa_offset 16
 148              		.cfi_offset 6, -16
 149 015a 4889E5   		movq	%rsp, %rbp
 150              		.cfi_def_cfa_register 6
 151 015d 4883EC40 		subq	$64, %rsp
 152 0161 48897DD8 		movq	%rdi, -40(%rbp)
 153 0165 8975D4   		movl	%esi, -44(%rbp)
 154 0168 488955C8 		movq	%rdx, -56(%rbp)
 155 016c 48894DC0 		movq	%rcx, -64(%rbp)
  73:eeprom.c      **** 	FX2Status returnCode;
  74:eeprom.c      **** 	int uStatus;
  75:eeprom.c      **** 	uint16 address = 0x0000;
 156              		.loc 1 75 9
 157 0170 66C745EE 		movw	$0, -18(%rbp)
 157      0000
  76:eeprom.c      **** 	uint8 *bufPtr;
  77:eeprom.c      **** 	if ( bufAppendConst(i2cBuffer, 0x00, numBytes, error) ) {
 158              		.loc 1 77 7
 159 0176 488B4DC0 		movq	-64(%rbp), %rcx
 160 017a 8B55D4   		movl	-44(%rbp), %edx
 161 017d 488B45C8 		movq	-56(%rbp), %rax
 162 0181 BE000000 		movl	$0, %esi
 162      00
 163 0186 4889C7   		movq	%rax, %rdi
 164 0189 E8000000 		call	bufAppendConst@PLT
 164      00
 165              		.loc 1 77 5
 166 018e 85C0     		testl	%eax, %eax
 167 0190 7422     		je	.L9
  78:eeprom.c      **** 		errPrefix(error, "fx2ReadEEPROM()");
 168              		.loc 1 78 3
 169 0192 488B45C0 		movq	-64(%rbp), %rax
 170 0196 488D1500 		leaq	.LC1(%rip), %rdx
 170      000000
 171 019d 4889D6   		movq	%rdx, %rsi
 172 01a0 4889C7   		movq	%rax, %rdi
 173 01a3 E8000000 		call	errPrefix@PLT
 173      00
  79:eeprom.c      **** 		FAIL(FX2_BUF_ERR);
 174              		.loc 1 79 3
 175 01a8 C745F002 		movl	$2, -16(%rbp)
 175      000000
 176 01af E9360100 		jmp	.L10
 176      00
 177              	.L9:
  80:eeprom.c      **** 	}
  81:eeprom.c      **** 	bufPtr = i2cBuffer->data;
 178              		.loc 1 81 9
 179 01b4 488B45C8 		movq	-56(%rbp), %rax
 180 01b8 488B00   		movq	(%rax), %rax
 181 01bb 488945F8 		movq	%rax, -8(%rbp)
  82:eeprom.c      **** 	while ( numBytes > BLOCK_SIZE ) {
 182              		.loc 1 82 8
 183 01bf E9980000 		jmp	.L11
 183      00
 184              	.L13:
  83:eeprom.c      **** 		uStatus = usb_control_msg(
 185              		.loc 1 83 13
 186 01c4 0FB755EE 		movzwl	-18(%rbp), %edx
 187 01c8 488B4DF8 		movq	-8(%rbp), %rcx
 188 01cc 488B45D8 		movq	-40(%rbp), %rax
 189 01d0 68881300 		pushq	$5000
 189      00
 190 01d5 68001000 		pushq	$4096
 190      00
 191 01da 4989C9   		movq	%rcx, %r9
 192 01dd 41B80000 		movl	$0, %r8d
 192      0000
 193 01e3 89D1     		movl	%edx, %ecx
 194 01e5 BAA20000 		movl	$162, %edx
 194      00
 195 01ea BEC00000 		movl	$192, %esi
 195      00
 196 01ef 4889C7   		movq	%rax, %rdi
 197 01f2 E8000000 		call	usb_control_msg@PLT
 197      00
 198 01f7 4883C410 		addq	$16, %rsp
 199 01fb 8945F4   		movl	%eax, -12(%rbp)
  84:eeprom.c      **** 			device,
  85:eeprom.c      **** 			(USB_ENDPOINT_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE),
  86:eeprom.c      **** 			0xA2, address, 0x0000, (char*)bufPtr, BLOCK_SIZE, 5000
  87:eeprom.c      **** 		);
  88:eeprom.c      **** 		if ( uStatus != BLOCK_SIZE ) {
 200              		.loc 1 88 6
 201 01fe 817DF400 		cmpl	$4096, -12(%rbp)
 201      100000
 202 0205 7440     		je	.L12
  89:eeprom.c      **** 			errRender(error, A2_READ_ERROR, BLOCK_SIZE, address, uStatus, usb_strerror());
 203              		.loc 1 89 4
 204 0207 E8000000 		call	usb_strerror@PLT
 204      00
 205 020c 4889C1   		movq	%rax, %rcx
 206 020f 0FB755EE 		movzwl	-18(%rbp), %edx
 207 0213 8B75F4   		movl	-12(%rbp), %esi
 208 0216 488B45C0 		movq	-64(%rbp), %rax
 209 021a 4989C9   		movq	%rcx, %r9
 210 021d 4189F0   		movl	%esi, %r8d
 211 0220 89D1     		movl	%edx, %ecx
 212 0222 BA001000 		movl	$4096, %edx
 212      00
 213 0227 488D3500 		leaq	.LC2(%rip), %rsi
 213      000000
 214 022e 4889C7   		movq	%rax, %rdi
 215 0231 B8000000 		movl	$0, %eax
 215      00
 216 0236 E8000000 		call	errRender@PLT
 216      00
  90:eeprom.c      **** 			FAIL(FX2_USB_ERR);
 217              		.loc 1 90 4
 218 023b C745F001 		movl	$1, -16(%rbp)
 218      000000
 219 0242 E9A30000 		jmp	.L10
 219      00
 220              	.L12:
  91:eeprom.c      **** 		}
  92:eeprom.c      **** 		numBytes -= BLOCK_SIZE;
 221              		.loc 1 92 12
 222 0247 816DD400 		subl	$4096, -44(%rbp)
 222      100000
  93:eeprom.c      **** 		bufPtr += BLOCK_SIZE;
 223              		.loc 1 93 10
 224 024e 488145F8 		addq	$4096, -8(%rbp)
 224      00100000 
  94:eeprom.c      **** 		address += BLOCK_SIZE;
 225              		.loc 1 94 11
 226 0256 668145EE 		addw	$4096, -18(%rbp)
 226      0010
 227              	.L11:
  82:eeprom.c      **** 		uStatus = usb_control_msg(
 228              		.loc 1 82 19
 229 025c 817DD400 		cmpl	$4096, -44(%rbp)
 229      100000
 230 0263 0F875BFF 		ja	.L13
 230      FFFF
  95:eeprom.c      **** 	}
  96:eeprom.c      **** 	uStatus = usb_control_msg(
 231              		.loc 1 96 12
 232 0269 8B4DD4   		movl	-44(%rbp), %ecx
 233 026c 0FB755EE 		movzwl	-18(%rbp), %edx
 234 0270 488B75F8 		movq	-8(%rbp), %rsi
 235 0274 488B45D8 		movq	-40(%rbp), %rax
 236 0278 68881300 		pushq	$5000
 236      00
 237 027d 51       		pushq	%rcx
 238 027e 4989F1   		movq	%rsi, %r9
 239 0281 41B80000 		movl	$0, %r8d
 239      0000
 240 0287 89D1     		movl	%edx, %ecx
 241 0289 BAA20000 		movl	$162, %edx
 241      00
 242 028e BEC00000 		movl	$192, %esi
 242      00
 243 0293 4889C7   		movq	%rax, %rdi
 244 0296 E8000000 		call	usb_control_msg@PLT
 244      00
 245 029b 4883C410 		addq	$16, %rsp
 246 029f 8945F4   		movl	%eax, -12(%rbp)
  97:eeprom.c      **** 		device,
  98:eeprom.c      **** 		(USB_ENDPOINT_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE),
  99:eeprom.c      **** 		0xA2, address, 0x0000, (char*)bufPtr, numBytes, 5000
 100:eeprom.c      **** 	);
 101:eeprom.c      **** 	if ( uStatus != (int)numBytes ) {
 247              		.loc 1 101 18
 248 02a2 8B45D4   		movl	-44(%rbp), %eax
 249              		.loc 1 101 5
 250 02a5 3945F4   		cmpl	%eax, -12(%rbp)
 251 02a8 7439     		je	.L14
 102:eeprom.c      **** 		errRender(error, A2_READ_ERROR, numBytes, address, uStatus, usb_strerror());
 252              		.loc 1 102 3
 253 02aa E8000000 		call	usb_strerror@PLT
 253      00
 254 02af 4889C6   		movq	%rax, %rsi
 255 02b2 0FB74DEE 		movzwl	-18(%rbp), %ecx
 256 02b6 8B7DF4   		movl	-12(%rbp), %edi
 257 02b9 8B55D4   		movl	-44(%rbp), %edx
 258 02bc 488B45C0 		movq	-64(%rbp), %rax
 259 02c0 4989F1   		movq	%rsi, %r9
 260 02c3 4189F8   		movl	%edi, %r8d
 261 02c6 488D3500 		leaq	.LC2(%rip), %rsi
 261      000000
 262 02cd 4889C7   		movq	%rax, %rdi
 263 02d0 B8000000 		movl	$0, %eax
 263      00
 264 02d5 E8000000 		call	errRender@PLT
 264      00
 103:eeprom.c      **** 		FAIL(FX2_USB_ERR);
 265              		.loc 1 103 3
 266 02da C745F001 		movl	$1, -16(%rbp)
 266      000000
 267 02e1 EB07     		jmp	.L10
 268              	.L14:
 104:eeprom.c      **** 	}
 105:eeprom.c      **** 	return FX2_SUCCESS;
 269              		.loc 1 105 9
 270 02e3 B8000000 		movl	$0, %eax
 270      00
 271 02e8 EB03     		jmp	.L15
 272              	.L10:
 106:eeprom.c      **** cleanup:
 107:eeprom.c      **** 	return returnCode;
 273              		.loc 1 107 9
 274 02ea 8B45F0   		movl	-16(%rbp), %eax
 275              	.L15:
 108:eeprom.c      **** }
 276              		.loc 1 108 1
 277 02ed C9       		leave
 278              		.cfi_def_cfa 7, 8
 279 02ee C3       		ret
 280              		.cfi_endproc
 281              	.LFE5:
 283              	.Letext0:
 284              		.file 2 "/home/asoreyh/Dropbox/projects/lago/acqua/nexys/src/makestuff/common/makestuff.h"
 285              		.file 3 "/usr/include/usb.h"
 286              		.file 4 "/home/asoreyh/Dropbox/projects/lago/acqua/nexys/src/makestuff/libs/libbuffer/libbuffer.h"
 287              		.file 5 "libfx2loader.h"
 288              		.file 6 "/home/asoreyh/Dropbox/projects/lago/acqua/nexys/src/makestuff/libs/liberror/liberror.h"
 1201              		.section	.note.gnu.property,"a"
 1202              		.align 8
 1203 0000 04000000 		.long	1f - 0f
 1204 0004 10000000 		.long	4f - 1f
 1205 0008 05000000 		.long	5
 1206              	0:
 1207 000c 474E5500 		.string	"GNU"
 1208              	1:
 1209              		.align 8
 1210 0010 020000C0 		.long	0xc0000002
 1211 0014 04000000 		.long	3f - 2f
 1212              	2:
 1213 0018 03000000 		.long	0x3
 1214              	3:
 1215 001c 00000000 		.align 8
 1216              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 eeprom.c
     /tmp/ccEPEKse.s:12     .text:0000000000000000 fx2WriteEEPROM
     /tmp/ccEPEKse.s:141    .text:0000000000000155 fx2ReadEEPROM

UNDEFINED SYMBOLS
usb_control_msg
usb_strerror
errRender
bufAppendConst
errPrefix
