   1              		.file	"ram.c"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/asoreyh/Dropbox/projects/lago/acqua/nexys/src/makestuff/libs/libfx2loader" "ram.c"
   5              		.section	.rodata
   6              		.align 8
   7              	.LC0:
   8 0000 66783257 		.string	"fx2WriteRAM(): Failed to put the CPU in reset - usb_control_msg() failed returnCode %d: %
   8      72697465 
   8      52414D28 
   8      293A2046 
   8      61696C65 
   9 005b 00000000 		.align 8
   9      00
  10              	.LC1:
  11 0060 66783257 		.string	"fx2WriteRAM(): Failed to write block of 4096 bytes at 0x%04X - usb_control_msg() failed r
  11      72697465 
  11      52414D28 
  11      293A2046 
  11      61696C65 
  12 00ca 00000000 		.align 8
  12      0000
  13              	.LC2:
  14 00d0 66783257 		.string	"fx2WriteRAM(): Failed to write block of %d bytes at 0x%04X - usb_control_msg() failed ret
  14      72697465 
  14      52414D28 
  14      293A2046 
  14      61696C65 
  15              		.text
  16              		.globl	fx2WriteRAM
  18              	fx2WriteRAM:
  19              	.LFB4:
  20              		.file 1 "ram.c"
   1:ram.c         **** /*
   2:ram.c         ****  * Copyright (C) 2009-2012 Chris McClelland
   3:ram.c         ****  *
   4:ram.c         ****  * This program is free software: you can redistribute it and/or modify
   5:ram.c         ****  * it under the terms of the GNU Lesser General Public License as published by
   6:ram.c         ****  * the Free Software Foundation, either version 3 of the License, or
   7:ram.c         ****  * (at your option) any later version.
   8:ram.c         ****  *
   9:ram.c         ****  * This program is distributed in the hope that it will be useful,
  10:ram.c         ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:ram.c         ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:ram.c         ****  * GNU Lesser General Public License for more details.
  13:ram.c         ****  *
  14:ram.c         ****  * You should have received a copy of the GNU Lesser General Public License
  15:ram.c         ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:ram.c         ****  */
  17:ram.c         **** #include <makestuff.h>
  18:ram.c         **** #include <libusbwrap.h>
  19:ram.c         **** #ifdef WIN32
  20:ram.c         **** 	#include <lusb0_usb.h>
  21:ram.c         **** #else
  22:ram.c         **** 	#include <usb.h>
  23:ram.c         **** #endif
  24:ram.c         **** #include <liberror.h>
  25:ram.c         **** #include "libfx2loader.h"
  26:ram.c         **** 
  27:ram.c         **** // Write the supplied reader buffer to RAM, using the supplied VID/PID.
  28:ram.c         **** //
  29:ram.c         **** DLLEXPORT(FX2Status) fx2WriteRAM(
  30:ram.c         **** 	struct usb_dev_handle *device, const uint8 *bufPtr, int numBytes, const char **error)
  31:ram.c         **** {
  21              		.loc 1 31 1
  22              		.cfi_startproc
  23 0000 F30F1EFA 		endbr64
  24 0004 55       		pushq	%rbp
  25              		.cfi_def_cfa_offset 16
  26              		.cfi_offset 6, -16
  27 0005 4889E5   		movq	%rsp, %rbp
  28              		.cfi_def_cfa_register 6
  29 0008 4883EC40 		subq	$64, %rsp
  30 000c 48897DD8 		movq	%rdi, -40(%rbp)
  31 0010 488975D0 		movq	%rsi, -48(%rbp)
  32 0014 8955CC   		movl	%edx, -52(%rbp)
  33 0017 48894DC0 		movq	%rcx, -64(%rbp)
  34              		.loc 1 31 1
  35 001b 64488B04 		movq	%fs:40, %rax
  35      25280000 
  35      00
  36 0024 488945F8 		movq	%rax, -8(%rbp)
  37 0028 31C0     		xorl	%eax, %eax
  32:ram.c         **** 	FX2Status returnCode;
  33:ram.c         **** 	int uStatus;
  34:ram.c         **** 	uint16 address = 0x0000;
  38              		.loc 1 34 9
  39 002a 66C745EE 		movw	$0, -18(%rbp)
  39      0000
  35:ram.c         **** 	char byte = 0x01;
  40              		.loc 1 35 7
  41 0030 C645ED01 		movb	$1, -19(%rbp)
  36:ram.c         **** 	uStatus = usb_control_msg(
  42              		.loc 1 36 12
  43 0034 488D55ED 		leaq	-19(%rbp), %rdx
  44 0038 488B45D8 		movq	-40(%rbp), %rax
  45 003c 68881300 		pushq	$5000
  45      00
  46 0041 6A01     		pushq	$1
  47 0043 4989D1   		movq	%rdx, %r9
  48 0046 41B80000 		movl	$0, %r8d
  48      0000
  49 004c B900E600 		movl	$58880, %ecx
  49      00
  50 0051 BAA00000 		movl	$160, %edx
  50      00
  51 0056 BE400000 		movl	$64, %esi
  51      00
  52 005b 4889C7   		movq	%rax, %rdi
  53 005e E8000000 		call	usb_control_msg@PLT
  53      00
  54 0063 4883C410 		addq	$16, %rsp
  55 0067 8945F4   		movl	%eax, -12(%rbp)
  37:ram.c         **** 		device,
  38:ram.c         **** 		(USB_ENDPOINT_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE),
  39:ram.c         **** 		0xA0, 0xE600, 0x0000, &byte, 1, 5000
  40:ram.c         **** 	);
  41:ram.c         **** 	if ( uStatus != 1 ) {
  56              		.loc 1 41 5
  57 006a 837DF401 		cmpl	$1, -12(%rbp)
  58 006e 0F84BD00 		je	.L4
  58      0000
  42:ram.c         **** 		errRender(
  59              		.loc 1 42 3
  60 0074 E8000000 		call	usb_strerror@PLT
  60      00
  61 0079 4889C1   		movq	%rax, %rcx
  62 007c 8B55F4   		movl	-12(%rbp), %edx
  63 007f 488B45C0 		movq	-64(%rbp), %rax
  64 0083 488D3500 		leaq	.LC0(%rip), %rsi
  64      000000
  65 008a 4889C7   		movq	%rax, %rdi
  66 008d B8000000 		movl	$0, %eax
  66      00
  67 0092 E8000000 		call	errRender@PLT
  67      00
  43:ram.c         **** 			error,
  44:ram.c         **** 			"fx2WriteRAM(): Failed to put the CPU in reset - usb_control_msg() failed returnCode %d: %s",
  45:ram.c         **** 			uStatus, usb_strerror());
  46:ram.c         **** 		FAIL(FX2_USB_ERR);
  68              		.loc 1 46 3
  69 0097 C745F001 		movl	$1, -16(%rbp)
  69      000000
  70 009e E9530100 		jmp	.L3
  70      00
  71              	.L6:
  47:ram.c         **** 	}
  48:ram.c         **** 	while ( numBytes > 4096 ) {
  49:ram.c         **** 		uStatus = usb_control_msg(
  72              		.loc 1 49 13
  73 00a3 0FB755EE 		movzwl	-18(%rbp), %edx
  74 00a7 488B4DD0 		movq	-48(%rbp), %rcx
  75 00ab 488B45D8 		movq	-40(%rbp), %rax
  76 00af 68881300 		pushq	$5000
  76      00
  77 00b4 68001000 		pushq	$4096
  77      00
  78 00b9 4989C9   		movq	%rcx, %r9
  79 00bc 41B80000 		movl	$0, %r8d
  79      0000
  80 00c2 89D1     		movl	%edx, %ecx
  81 00c4 BAA00000 		movl	$160, %edx
  81      00
  82 00c9 BE400000 		movl	$64, %esi
  82      00
  83 00ce 4889C7   		movq	%rax, %rdi
  84 00d1 E8000000 		call	usb_control_msg@PLT
  84      00
  85 00d6 4883C410 		addq	$16, %rsp
  86 00da 8945F4   		movl	%eax, -12(%rbp)
  50:ram.c         **** 			device,
  51:ram.c         **** 			(USB_ENDPOINT_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE),
  52:ram.c         **** 			0xA0, address, 0x0000, (char*)bufPtr, 4096, 5000
  53:ram.c         **** 		);
  54:ram.c         **** 		if ( uStatus != 4096 ) {
  87              		.loc 1 54 6
  88 00dd 817DF400 		cmpl	$4096, -12(%rbp)
  88      100000
  89 00e4 7436     		je	.L5
  55:ram.c         **** 			errRender(
  90              		.loc 1 55 4
  91 00e6 E8000000 		call	usb_strerror@PLT
  91      00
  92 00eb 4889C6   		movq	%rax, %rsi
  93 00ee 0FB755EE 		movzwl	-18(%rbp), %edx
  94 00f2 8B4DF4   		movl	-12(%rbp), %ecx
  95 00f5 488B45C0 		movq	-64(%rbp), %rax
  96 00f9 4989F0   		movq	%rsi, %r8
  97 00fc 488D3500 		leaq	.LC1(%rip), %rsi
  97      000000
  98 0103 4889C7   		movq	%rax, %rdi
  99 0106 B8000000 		movl	$0, %eax
  99      00
 100 010b E8000000 		call	errRender@PLT
 100      00
  56:ram.c         **** 				error,
  57:ram.c         **** 				"fx2WriteRAM(): Failed to write block of 4096 bytes at 0x%04X - usb_control_msg() failed return
  58:ram.c         **** 				address, uStatus, usb_strerror());
  59:ram.c         **** 			FAIL(FX2_USB_ERR);
 101              		.loc 1 59 4
 102 0110 C745F001 		movl	$1, -16(%rbp)
 102      000000
 103 0117 E9DA0000 		jmp	.L3
 103      00
 104              	.L5:
  60:ram.c         **** 		}
  61:ram.c         **** 		numBytes -= 4096;
 105              		.loc 1 61 12
 106 011c 816DCC00 		subl	$4096, -52(%rbp)
 106      100000
  62:ram.c         **** 		bufPtr += 4096;
 107              		.loc 1 62 10
 108 0123 488145D0 		addq	$4096, -48(%rbp)
 108      00100000 
  63:ram.c         **** 		address += 4096;
 109              		.loc 1 63 11
 110 012b 668145EE 		addw	$4096, -18(%rbp)
 110      0010
 111              	.L4:
  48:ram.c         **** 		uStatus = usb_control_msg(
 112              		.loc 1 48 19
 113 0131 817DCC00 		cmpl	$4096, -52(%rbp)
 113      100000
 114 0138 0F8F65FF 		jg	.L6
 114      FFFF
  64:ram.c         **** 	}
  65:ram.c         **** 	uStatus = usb_control_msg(
 115              		.loc 1 65 12
 116 013e 0FB755EE 		movzwl	-18(%rbp), %edx
 117 0142 488B75D0 		movq	-48(%rbp), %rsi
 118 0146 488B45D8 		movq	-40(%rbp), %rax
 119 014a 68881300 		pushq	$5000
 119      00
 120 014f 8B4DCC   		movl	-52(%rbp), %ecx
 121 0152 51       		pushq	%rcx
 122 0153 4989F1   		movq	%rsi, %r9
 123 0156 41B80000 		movl	$0, %r8d
 123      0000
 124 015c 89D1     		movl	%edx, %ecx
 125 015e BAA00000 		movl	$160, %edx
 125      00
 126 0163 BE400000 		movl	$64, %esi
 126      00
 127 0168 4889C7   		movq	%rax, %rdi
 128 016b E8000000 		call	usb_control_msg@PLT
 128      00
 129 0170 4883C410 		addq	$16, %rsp
 130 0174 8945F4   		movl	%eax, -12(%rbp)
  66:ram.c         **** 		device,
  67:ram.c         **** 		(USB_ENDPOINT_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE),
  68:ram.c         **** 		0xA0, address, 0x0000, (char*)bufPtr, numBytes, 5000
  69:ram.c         **** 	);
  70:ram.c         **** 	if ( uStatus != numBytes ) {
 131              		.loc 1 70 5
 132 0177 8B45F4   		movl	-12(%rbp), %eax
 133 017a 3B45CC   		cmpl	-52(%rbp), %eax
 134 017d 7439     		je	.L7
  71:ram.c         **** 		errRender(
 135              		.loc 1 71 3
 136 017f E8000000 		call	usb_strerror@PLT
 136      00
 137 0184 4889C6   		movq	%rax, %rsi
 138 0187 0FB74DEE 		movzwl	-18(%rbp), %ecx
 139 018b 8B7DF4   		movl	-12(%rbp), %edi
 140 018e 8B55CC   		movl	-52(%rbp), %edx
 141 0191 488B45C0 		movq	-64(%rbp), %rax
 142 0195 4989F1   		movq	%rsi, %r9
 143 0198 4189F8   		movl	%edi, %r8d
 144 019b 488D3500 		leaq	.LC2(%rip), %rsi
 144      000000
 145 01a2 4889C7   		movq	%rax, %rdi
 146 01a5 B8000000 		movl	$0, %eax
 146      00
 147 01aa E8000000 		call	errRender@PLT
 147      00
  72:ram.c         **** 			error,
  73:ram.c         **** 			"fx2WriteRAM(): Failed to write block of %d bytes at 0x%04X - usb_control_msg() failed returnCod
  74:ram.c         **** 			numBytes, address, uStatus, usb_strerror());
  75:ram.c         **** 		FAIL(FX2_USB_ERR);
 148              		.loc 1 75 3
 149 01af C745F001 		movl	$1, -16(%rbp)
 149      000000
 150 01b6 EB3E     		jmp	.L3
 151              	.L7:
  76:ram.c         **** 	}
  77:ram.c         **** 
  78:ram.c         **** 	// Since this brings the FX2 out of reset, the host may get a 'failed' returnCode. We have to
  79:ram.c         **** 	// assume that it worked nevertheless.
  80:ram.c         **** 	byte = 0x00;
 152              		.loc 1 80 7
 153 01b8 C645ED00 		movb	$0, -19(%rbp)
  81:ram.c         **** 	usb_control_msg(
 154              		.loc 1 81 2
 155 01bc 488D55ED 		leaq	-19(%rbp), %rdx
 156 01c0 488B45D8 		movq	-40(%rbp), %rax
 157 01c4 68881300 		pushq	$5000
 157      00
 158 01c9 6A01     		pushq	$1
 159 01cb 4989D1   		movq	%rdx, %r9
 160 01ce 41B80000 		movl	$0, %r8d
 160      0000
 161 01d4 B900E600 		movl	$58880, %ecx
 161      00
 162 01d9 BAA00000 		movl	$160, %edx
 162      00
 163 01de BE400000 		movl	$64, %esi
 163      00
 164 01e3 4889C7   		movq	%rax, %rdi
 165 01e6 E8000000 		call	usb_control_msg@PLT
 165      00
 166 01eb 4883C410 		addq	$16, %rsp
  82:ram.c         **** 		device,
  83:ram.c         **** 		(USB_ENDPOINT_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE),
  84:ram.c         **** 		0xA0, 0xE600, 0x0000, &byte, 1, 5000
  85:ram.c         **** 	);
  86:ram.c         **** 	return FX2_SUCCESS;
 167              		.loc 1 86 9
 168 01ef B8000000 		movl	$0, %eax
 168      00
 169 01f4 EB03     		jmp	.L9
 170              	.L3:
  87:ram.c         **** cleanup:
  88:ram.c         **** 	return returnCode;
 171              		.loc 1 88 9
 172 01f6 8B45F0   		movl	-16(%rbp), %eax
 173              	.L9:
  89:ram.c         **** }
 174              		.loc 1 89 1 discriminator 1
 175 01f9 488B55F8 		movq	-8(%rbp), %rdx
 176 01fd 64482B14 		subq	%fs:40, %rdx
 176      25280000 
 176      00
 177 0206 7405     		je	.L10
 178              		.loc 1 89 1 is_stmt 0
 179 0208 E8000000 		call	__stack_chk_fail@PLT
 179      00
 180              	.L10:
 181 020d C9       		leave
 182              		.cfi_def_cfa 7, 8
 183 020e C3       		ret
 184              		.cfi_endproc
 185              	.LFE4:
 187              	.Letext0:
 188              		.file 2 "/home/asoreyh/Dropbox/projects/lago/acqua/nexys/src/makestuff/common/makestuff.h"
 189              		.file 3 "/usr/include/usb.h"
 190              		.file 4 "libfx2loader.h"
 191              		.file 5 "/home/asoreyh/Dropbox/projects/lago/acqua/nexys/src/makestuff/libs/liberror/liberror.h"
 802              		.section	.note.gnu.property,"a"
 803              		.align 8
 804 0000 04000000 		.long	1f - 0f
 805 0004 10000000 		.long	4f - 1f
 806 0008 05000000 		.long	5
 807              	0:
 808 000c 474E5500 		.string	"GNU"
 809              	1:
 810              		.align 8
 811 0010 020000C0 		.long	0xc0000002
 812 0014 04000000 		.long	3f - 2f
 813              	2:
 814 0018 03000000 		.long	0x3
 815              	3:
 816 001c 00000000 		.align 8
 817              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ram.c
     /tmp/ccrIMswR.s:18     .text:0000000000000000 fx2WriteRAM

UNDEFINED SYMBOLS
usb_control_msg
usb_strerror
errRender
__stack_chk_fail
