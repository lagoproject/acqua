   1              		.file	"libsync.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata
   5              		.align 8
   6              	.LC0:
   7 0000 73796E63 		.string	"syncBulkEndpoints(): Unable to enable sync mode: %s"
   7      42756C6B 
   7      456E6470 
   7      6F696E74 
   7      7328293A 
   8              		.text
   9              		.globl	syncBulkEndpoints
  11              	syncBulkEndpoints:
  12              	.LFB4:
  13              		.file 1 "libsync.c"
   1:libsync.c     **** /*
   2:libsync.c     ****  * Copyright (C) 2009-2012 Chris McClelland
   3:libsync.c     ****  *
   4:libsync.c     ****  * This program is free software: you can redistribute it and/or modify
   5:libsync.c     ****  * it under the terms of the GNU Lesser General Public License as published by
   6:libsync.c     ****  * the Free Software Foundation, either version 3 of the License, or
   7:libsync.c     ****  * (at your option) any later version.
   8:libsync.c     ****  *
   9:libsync.c     ****  * This program is distributed in the hope that it will be useful,
  10:libsync.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:libsync.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:libsync.c     ****  * GNU Lesser General Public License for more details.
  13:libsync.c     ****  *
  14:libsync.c     ****  * You should have received a copy of the GNU Lesser General Public License
  15:libsync.c     ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:libsync.c     ****  */
  17:libsync.c     **** #ifdef SYNC_DEBUG
  18:libsync.c     **** 	#include <stdio.h>
  19:libsync.c     **** #endif
  20:libsync.c     **** #include <makestuff.h>
  21:libsync.c     **** #include <libusbwrap.h>
  22:libsync.c     **** #ifdef WIN32
  23:libsync.c     **** 	#include <lusb0_usb.h>
  24:libsync.c     **** #else
  25:libsync.c     **** 	#include <usb.h>
  26:libsync.c     **** #endif
  27:libsync.c     **** #include <liberror.h>
  28:libsync.c     **** #include <vendorCommands.h>
  29:libsync.c     **** #include "libsync.h"
  30:libsync.c     **** 
  31:libsync.c     **** // ------------------------------------------------------------------------------------------------
  32:libsync.c     **** // Declaration of private types & functions
  33:libsync.c     **** // ------------------------------------------------------------------------------------------------
  34:libsync.c     **** 
  35:libsync.c     **** #define MAX_TRIES 10
  36:libsync.c     **** 
  37:libsync.c     **** static SyncStatus trySync(
  38:libsync.c     **** 	struct usb_dev_handle *deviceHandle, int outEndpoint, int inEndpoint, const char **error
  39:libsync.c     **** ) WARN_UNUSED_RESULT;
  40:libsync.c     **** 
  41:libsync.c     **** // ------------------------------------------------------------------------------------------------
  42:libsync.c     **** // Public functions
  43:libsync.c     **** // ------------------------------------------------------------------------------------------------
  44:libsync.c     **** 
  45:libsync.c     **** // Sync with the device
  46:libsync.c     **** //
  47:libsync.c     **** SyncStatus syncBulkEndpoints(
  48:libsync.c     **** 	struct usb_dev_handle *deviceHandle, SyncMode syncMode, const char **error)
  49:libsync.c     **** {
  14              		.loc 1 49 0
  15              		.cfi_startproc
  16 0000 55       		pushq	%rbp
  17              		.cfi_def_cfa_offset 16
  18              		.cfi_offset 6, -16
  19 0001 4889E5   		movq	%rsp, %rbp
  20              		.cfi_def_cfa_register 6
  21 0004 4883EC30 		subq	$48, %rsp
  22 0008 48897DE8 		movq	%rdi, -24(%rbp)
  23 000c 8975E4   		movl	%esi, -28(%rbp)
  24 000f 488955D8 		movq	%rdx, -40(%rbp)
  50:libsync.c     **** 	SyncStatus returnCode, sStatus;
  51:libsync.c     **** 	int uStatus;
  52:libsync.c     **** 
  53:libsync.c     **** 	// Put the device in sync mode
  54:libsync.c     **** 	uStatus = usb_control_msg(
  25              		.loc 1 54 0
  26 0013 488B45E8 		movq	-24(%rbp), %rax
  27 0017 6A64     		pushq	$100
  28 0019 6A00     		pushq	$0
  29 001b 41B90000 		movl	$0, %r9d
  29      0000
  30 0021 41B80100 		movl	$1, %r8d
  30      0000
  31 0027 B9010000 		movl	$1, %ecx
  31      00
  32 002c BA800000 		movl	$128, %edx
  32      00
  33 0031 BE400000 		movl	$64, %esi
  33      00
  34 0036 4889C7   		movq	%rax, %rdi
  35 0039 E8000000 		call	usb_control_msg@PLT
  35      00
  36 003e 4883C410 		addq	$16, %rsp
  37 0042 8945F8   		movl	%eax, -8(%rbp)
  55:libsync.c     **** 		deviceHandle,
  56:libsync.c     **** 		USB_ENDPOINT_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
  57:libsync.c     **** 		CMD_MODE_STATUS,          // bRequest
  58:libsync.c     **** 		MODE_SYNC,                // wValue
  59:libsync.c     **** 		MODE_SYNC,                // wMask
  60:libsync.c     **** 		NULL,
  61:libsync.c     **** 		0,                        // wLength
  62:libsync.c     **** 		100                       // timeout (ms)
  63:libsync.c     **** 	);
  64:libsync.c     **** 	if ( uStatus < 0 ) {
  38              		.loc 1 64 0
  39 0045 837DF800 		cmpl	$0, -8(%rbp)
  40 0049 792C     		jns	.L2
  65:libsync.c     **** 		errRender(error, "syncBulkEndpoints(): Unable to enable sync mode: %s", usb_strerror());
  41              		.loc 1 65 0
  42 004b E8000000 		call	usb_strerror@PLT
  42      00
  43 0050 4889C2   		movq	%rax, %rdx
  44 0053 488B45D8 		movq	-40(%rbp), %rax
  45 0057 488D3500 		leaq	.LC0(%rip), %rsi
  45      000000
  46 005e 4889C7   		movq	%rax, %rdi
  47 0061 B8000000 		movl	$0, %eax
  47      00
  48 0066 E8000000 		call	errRender@PLT
  48      00
  66:libsync.c     **** 		FAIL(SYNC_ENABLE);
  49              		.loc 1 66 0
  50 006b C745F401 		movl	$1, -12(%rbp)
  50      000000
  51 0072 E9DF0000 		jmp	.L3
  51      00
  52              	.L2:
  67:libsync.c     **** 	}
  68:libsync.c     **** 
  69:libsync.c     **** 	if ( syncMode == SYNC_24 || syncMode == SYNC_BOTH ) {
  53              		.loc 1 69 0
  54 0077 837DE400 		cmpl	$0, -28(%rbp)
  55 007b 7406     		je	.L4
  56              		.loc 1 69 0 is_stmt 0 discriminator 1
  57 007d 837DE402 		cmpl	$2, -28(%rbp)
  58 0081 7531     		jne	.L5
  59              	.L4:
  70:libsync.c     **** 		// Try to sync EP2OUT->EP4IN
  71:libsync.c     **** 		sStatus = trySync(deviceHandle, 2, 4, error);
  60              		.loc 1 71 0 is_stmt 1
  61 0083 488B55D8 		movq	-40(%rbp), %rdx
  62 0087 488B45E8 		movq	-24(%rbp), %rax
  63 008b 4889D1   		movq	%rdx, %rcx
  64 008e BA040000 		movl	$4, %edx
  64      00
  65 0093 BE020000 		movl	$2, %esi
  65      00
  66 0098 4889C7   		movq	%rax, %rdi
  67 009b E8BB0000 		call	trySync
  67      00
  68 00a0 8945FC   		movl	%eax, -4(%rbp)
  72:libsync.c     **** 		if ( sStatus != SYNC_SUCCESS ) {
  69              		.loc 1 72 0
  70 00a3 837DFC00 		cmpl	$0, -4(%rbp)
  71 00a7 740B     		je	.L5
  73:libsync.c     **** 			FAIL(sStatus);
  72              		.loc 1 73 0
  73 00a9 8B45FC   		movl	-4(%rbp), %eax
  74 00ac 8945F4   		movl	%eax, -12(%rbp)
  75 00af E9A20000 		jmp	.L3
  75      00
  76              	.L5:
  74:libsync.c     **** 		}
  75:libsync.c     **** 	}
  76:libsync.c     **** 
  77:libsync.c     **** 	if ( syncMode == SYNC_68 || syncMode == SYNC_BOTH ) {
  77              		.loc 1 77 0
  78 00b4 837DE401 		cmpl	$1, -28(%rbp)
  79 00b8 7406     		je	.L6
  80              		.loc 1 77 0 is_stmt 0 discriminator 1
  81 00ba 837DE402 		cmpl	$2, -28(%rbp)
  82 00be 752E     		jne	.L7
  83              	.L6:
  78:libsync.c     **** 		// Try to sync EP6OUT->EP8IN
  79:libsync.c     **** 		sStatus = trySync(deviceHandle, 6, 8, error);
  84              		.loc 1 79 0 is_stmt 1
  85 00c0 488B55D8 		movq	-40(%rbp), %rdx
  86 00c4 488B45E8 		movq	-24(%rbp), %rax
  87 00c8 4889D1   		movq	%rdx, %rcx
  88 00cb BA080000 		movl	$8, %edx
  88      00
  89 00d0 BE060000 		movl	$6, %esi
  89      00
  90 00d5 4889C7   		movq	%rax, %rdi
  91 00d8 E87E0000 		call	trySync
  91      00
  92 00dd 8945FC   		movl	%eax, -4(%rbp)
  80:libsync.c     **** 		if ( sStatus != SYNC_SUCCESS ) {
  93              		.loc 1 80 0
  94 00e0 837DFC00 		cmpl	$0, -4(%rbp)
  95 00e4 7408     		je	.L7
  81:libsync.c     **** 			FAIL(sStatus);
  96              		.loc 1 81 0
  97 00e6 8B45FC   		movl	-4(%rbp), %eax
  98 00e9 8945F4   		movl	%eax, -12(%rbp)
  99 00ec EB68     		jmp	.L3
 100              	.L7:
  82:libsync.c     **** 		}
  83:libsync.c     **** 	}
  84:libsync.c     **** 
  85:libsync.c     **** 	// Bring the device out of sync mode
  86:libsync.c     **** 	uStatus = usb_control_msg(
 101              		.loc 1 86 0
 102 00ee 488B45E8 		movq	-24(%rbp), %rax
 103 00f2 6A64     		pushq	$100
 104 00f4 6A00     		pushq	$0
 105 00f6 41B90000 		movl	$0, %r9d
 105      0000
 106 00fc 41B80100 		movl	$1, %r8d
 106      0000
 107 0102 B9000000 		movl	$0, %ecx
 107      00
 108 0107 BA800000 		movl	$128, %edx
 108      00
 109 010c BE400000 		movl	$64, %esi
 109      00
 110 0111 4889C7   		movq	%rax, %rdi
 111 0114 E8000000 		call	usb_control_msg@PLT
 111      00
 112 0119 4883C410 		addq	$16, %rsp
 113 011d 8945F8   		movl	%eax, -8(%rbp)
  87:libsync.c     **** 		deviceHandle,
  88:libsync.c     **** 		USB_ENDPOINT_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
  89:libsync.c     **** 		CMD_MODE_STATUS,          // bRequest
  90:libsync.c     **** 		0x0000,                   // wValue : off
  91:libsync.c     **** 		MODE_SYNC,                // wMask
  92:libsync.c     **** 		NULL,
  93:libsync.c     **** 		0,                        // wLength
  94:libsync.c     **** 		100                       // timeout (ms)
  95:libsync.c     **** 	);
  96:libsync.c     **** 	if ( uStatus < 0 ) {
 114              		.loc 1 96 0
 115 0120 837DF800 		cmpl	$0, -8(%rbp)
 116 0124 7929     		jns	.L8
  97:libsync.c     **** 		errRender(
 117              		.loc 1 97 0
 118 0126 E8000000 		call	usb_strerror@PLT
 118      00
 119 012b 4889C2   		movq	%rax, %rdx
 120 012e 488B45D8 		movq	-40(%rbp), %rax
 121 0132 488D3500 		leaq	.LC0(%rip), %rsi
 121      000000
 122 0139 4889C7   		movq	%rax, %rdi
 123 013c B8000000 		movl	$0, %eax
 123      00
 124 0141 E8000000 		call	errRender@PLT
 124      00
  98:libsync.c     **** 			error, "syncBulkEndpoints(): Unable to enable sync mode: %s", usb_strerror());
  99:libsync.c     **** 		FAIL(SYNC_DISABLE);
 125              		.loc 1 99 0
 126 0146 C745F403 		movl	$3, -12(%rbp)
 126      000000
 127 014d EB07     		jmp	.L3
 128              	.L8:
 100:libsync.c     **** 	}
 101:libsync.c     **** 	return SYNC_SUCCESS;
 129              		.loc 1 101 0
 130 014f B8000000 		movl	$0, %eax
 130      00
 131 0154 EB03     		jmp	.L9
 132              	.L3:
 102:libsync.c     **** cleanup:
 103:libsync.c     **** 	return returnCode;
 133              		.loc 1 103 0
 134 0156 8B45F4   		movl	-12(%rbp), %eax
 135              	.L9:
 104:libsync.c     **** }
 136              		.loc 1 104 0
 137 0159 C9       		leave
 138              		.cfi_def_cfa 7, 8
 139 015a C3       		ret
 140              		.cfi_endproc
 141              	.LFE4:
 143              		.section	.rodata
 144 0034 00000000 		.align 8
 145              	.LC1:
 146 0038 73796E63 		.string	"syncBulkEndpoints(): Sync of EP%dOUT->EP%dIN failed after %d fill attempts: %s"
 146      42756C6B 
 146      456E6470 
 146      6F696E74 
 146      7328293A 
 147 0087 00       		.align 8
 148              	.LC2:
 149 0088 73796E63 		.string	"syncBulkEndpoints(): Sync of EP%dOUT->EP%dIN failed after %d drain attempts: %s"
 149      42756C6B 
 149      456E6470 
 149      6F696E74 
 149      7328293A 
 150              		.align 8
 151              	.LC3:
 152 00d8 73796E63 		.string	"syncBulkEndpoints(): Sync of EP%dOUT->EP%dIN read back 0x%08lX instead of the expected 0x
 152      42756C6B 
 152      456E6470 
 152      6F696E74 
 152      7328293A 
 153              		.text
 155              	trySync:
 156              	.LFB5:
 105:libsync.c     **** 
 106:libsync.c     **** // ------------------------------------------------------------------------------------------------
 107:libsync.c     **** // Implementation of private functions
 108:libsync.c     **** // ------------------------------------------------------------------------------------------------
 109:libsync.c     **** 
 110:libsync.c     **** static SyncStatus trySync(
 111:libsync.c     **** 	struct usb_dev_handle *deviceHandle, int outEndpoint, int inEndpoint, const char **error)
 112:libsync.c     **** {
 157              		.loc 1 112 0
 158              		.cfi_startproc
 159 015b 55       		pushq	%rbp
 160              		.cfi_def_cfa_offset 16
 161              		.cfi_offset 6, -16
 162 015c 4889E5   		movq	%rsp, %rbp
 163              		.cfi_def_cfa_register 6
 164 015f 4881EC50 		subq	$592, %rsp
 164      020000
 165 0166 4889BDC8 		movq	%rdi, -568(%rbp)
 165      FDFFFF
 166 016d 89B5C4FD 		movl	%esi, -572(%rbp)
 166      FFFF
 167 0173 8995C0FD 		movl	%edx, -576(%rbp)
 167      FFFF
 168 0179 48898DB8 		movq	%rcx, -584(%rbp)
 168      FDFFFF
 169              		.loc 1 112 0
 170 0180 64488B04 		movq	%fs:40, %rax
 170      25280000 
 170      00
 171 0189 488945F8 		movq	%rax, -8(%rbp)
 172 018d 31C0     		xorl	%eax, %eax
 113:libsync.c     **** 	SyncStatus returnCode;
 114:libsync.c     **** 	const uint32 hackLower = 0x6861636B;
 173              		.loc 1 114 0
 174 018f C785E4FD 		movl	$1751212907, -540(%rbp)
 174      FFFF6B63 
 174      6168
 115:libsync.c     **** 	const uint32 hackUpper = 0x4841434B;
 175              		.loc 1 115 0
 176 0199 C785E8FD 		movl	$1212236619, -536(%rbp)
 176      FFFF4B43 
 176      4148
 116:libsync.c     **** 	int uStatus;
 117:libsync.c     **** 	union {
 118:libsync.c     **** 		uint32 lword;
 119:libsync.c     **** 		char bytes[512];
 120:libsync.c     **** 	} u;
 121:libsync.c     **** 	uint8 count = 2, i;
 177              		.loc 1 121 0
 178 01a3 C685DEFD 		movb	$2, -546(%rbp)
 178      FFFF02
 179              	.L11:
 122:libsync.c     **** 	do {
 123:libsync.c     **** 		uStatus = usb_bulk_read(deviceHandle, USB_ENDPOINT_IN | inEndpoint, u.bytes, 512, 100);
 180              		.loc 1 123 0 discriminator 1
 181 01aa 8B85C0FD 		movl	-576(%rbp), %eax
 181      FFFF
 182 01b0 0C80     		orb	$-128, %al
 183 01b2 89C6     		movl	%eax, %esi
 184 01b4 488D95F0 		leaq	-528(%rbp), %rdx
 184      FDFFFF
 185 01bb 488B85C8 		movq	-568(%rbp), %rax
 185      FDFFFF
 186 01c2 41B86400 		movl	$100, %r8d
 186      0000
 187 01c8 B9000200 		movl	$512, %ecx
 187      00
 188 01cd 4889C7   		movq	%rax, %rdi
 189 01d0 E8000000 		call	usb_bulk_read@PLT
 189      00
 190 01d5 8985ECFD 		movl	%eax, -532(%rbp)
 190      FFFF
 124:libsync.c     **** 		#ifdef SYNC_DEBUG
 125:libsync.c     **** 			if ( uStatus > 0 ) {
 126:libsync.c     **** 				printf("CLEAN: Read %d bytes, starting with 0x%08lX\n", uStatus, u.lword);
 127:libsync.c     **** 			} else {
 128:libsync.c     **** 				printf("CLEAN: ReturnCode %d\n", uStatus);
 129:libsync.c     **** 			}
 130:libsync.c     **** 		#endif
 131:libsync.c     **** 	} while ( uStatus > 0 );
 191              		.loc 1 131 0 discriminator 1
 192 01db 83BDECFD 		cmpl	$0, -532(%rbp)
 192      FFFF00
 193 01e2 7FC6     		jg	.L11
 194              	.L16:
 132:libsync.c     **** 	do {
 133:libsync.c     **** 		u.lword = 0xDEADDEAD;
 195              		.loc 1 133 0
 196 01e4 C785F0FD 		movl	$-559030611, -528(%rbp)
 196      FFFFADDE 
 196      ADDE
 134:libsync.c     **** 		for ( i = 0; i < count; i++ ) {
 197              		.loc 1 134 0
 198 01ee C685DFFD 		movb	$0, -545(%rbp)
 198      FFFF00
 199 01f5 EB37     		jmp	.L12
 200              	.L13:
 135:libsync.c     **** 			usb_bulk_write(deviceHandle, USB_ENDPOINT_OUT | outEndpoint, u.bytes, 4, 100);
 201              		.loc 1 135 0 discriminator 3
 202 01f7 488D95F0 		leaq	-528(%rbp), %rdx
 202      FDFFFF
 203 01fe 8BB5C4FD 		movl	-572(%rbp), %esi
 203      FFFF
 204 0204 488B85C8 		movq	-568(%rbp), %rax
 204      FDFFFF
 205 020b 41B86400 		movl	$100, %r8d
 205      0000
 206 0211 B9040000 		movl	$4, %ecx
 206      00
 207 0216 4889C7   		movq	%rax, %rdi
 208 0219 E8000000 		call	usb_bulk_write@PLT
 208      00
 134:libsync.c     **** 		for ( i = 0; i < count; i++ ) {
 209              		.loc 1 134 0 discriminator 3
 210 021e 0FB685DF 		movzbl	-545(%rbp), %eax
 210      FDFFFF
 211 0225 83C001   		addl	$1, %eax
 212 0228 8885DFFD 		movb	%al, -545(%rbp)
 212      FFFF
 213              	.L12:
 134:libsync.c     **** 		for ( i = 0; i < count; i++ ) {
 214              		.loc 1 134 0 is_stmt 0 discriminator 1
 215 022e 0FB685DF 		movzbl	-545(%rbp), %eax
 215      FDFFFF
 216 0235 3A85DEFD 		cmpb	-546(%rbp), %al
 216      FFFF
 217 023b 72BA     		jb	.L13
 136:libsync.c     **** 		}
 137:libsync.c     **** 		u.lword = hackLower;
 218              		.loc 1 137 0 is_stmt 1
 219 023d 8B85E4FD 		movl	-540(%rbp), %eax
 219      FFFF
 220 0243 8985F0FD 		movl	%eax, -528(%rbp)
 220      FFFF
 138:libsync.c     **** 		usb_bulk_write(deviceHandle, USB_ENDPOINT_OUT | outEndpoint, u.bytes, 4, 100);
 221              		.loc 1 138 0
 222 0249 488D95F0 		leaq	-528(%rbp), %rdx
 222      FDFFFF
 223 0250 8BB5C4FD 		movl	-572(%rbp), %esi
 223      FFFF
 224 0256 488B85C8 		movq	-568(%rbp), %rax
 224      FDFFFF
 225 025d 41B86400 		movl	$100, %r8d
 225      0000
 226 0263 B9040000 		movl	$4, %ecx
 226      00
 227 0268 4889C7   		movq	%rax, %rdi
 228 026b E8000000 		call	usb_bulk_write@PLT
 228      00
 139:libsync.c     **** 		uStatus = usb_bulk_read(deviceHandle, USB_ENDPOINT_IN | inEndpoint, u.bytes, 4, 100);
 229              		.loc 1 139 0
 230 0270 8B85C0FD 		movl	-576(%rbp), %eax
 230      FFFF
 231 0276 0C80     		orb	$-128, %al
 232 0278 89C6     		movl	%eax, %esi
 233 027a 488D95F0 		leaq	-528(%rbp), %rdx
 233      FDFFFF
 234 0281 488B85C8 		movq	-568(%rbp), %rax
 234      FDFFFF
 235 0288 41B86400 		movl	$100, %r8d
 235      0000
 236 028e B9040000 		movl	$4, %ecx
 236      00
 237 0293 4889C7   		movq	%rax, %rdi
 238 0296 E8000000 		call	usb_bulk_read@PLT
 238      00
 239 029b 8985ECFD 		movl	%eax, -532(%rbp)
 239      FFFF
 140:libsync.c     **** 		#ifdef SYNC_DEBUG
 141:libsync.c     **** 			if ( uStatus >= 0 ) {
 142:libsync.c     **** 				printf("SYNC(%d): Read %d bytes, starting with 0x%08lX\n", count, uStatus, u.lword);
 143:libsync.c     **** 			} else {
 144:libsync.c     **** 				printf("SYNC(%d): ReturnCode %d\n", count, uStatus);
 145:libsync.c     **** 			}
 146:libsync.c     **** 		#endif
 147:libsync.c     **** 		count++;
 240              		.loc 1 147 0
 241 02a1 0FB685DE 		movzbl	-546(%rbp), %eax
 241      FDFFFF
 242 02a8 83C001   		addl	$1, %eax
 243 02ab 8885DEFD 		movb	%al, -546(%rbp)
 243      FFFF
 148:libsync.c     **** 	} while ( (uStatus < 0 || u.lword != 0xDEADDEAD) && count < MAX_TRIES );
 244              		.loc 1 148 0
 245 02b1 83BDECFD 		cmpl	$0, -532(%rbp)
 245      FFFF00
 246 02b8 780D     		js	.L14
 247              		.loc 1 148 0 is_stmt 0 discriminator 2
 248 02ba 8B85F0FD 		movl	-528(%rbp), %eax
 248      FFFF
 249 02c0 3DADDEAD 		cmpl	$-559030611, %eax
 249      DE
 250 02c5 740D     		je	.L15
 251              	.L14:
 252              		.loc 1 148 0 discriminator 3
 253 02c7 80BDDEFD 		cmpb	$9, -546(%rbp)
 253      FFFF09
 254 02ce 0F8610FF 		jbe	.L16
 254      FFFF
 255              	.L15:
 149:libsync.c     **** 	if ( u.lword != 0xDEADDEAD ) {
 256              		.loc 1 149 0 is_stmt 1
 257 02d4 8B85F0FD 		movl	-528(%rbp), %eax
 257      FFFF
 258 02da 3DADDEAD 		cmpl	$-559030611, %eax
 258      DE
 259 02df 744B     		je	.L17
 150:libsync.c     **** 		errRender(
 260              		.loc 1 150 0
 261 02e1 E8000000 		call	usb_strerror@PLT
 261      00
 262 02e6 4889C7   		movq	%rax, %rdi
 263 02e9 0FB6B5DE 		movzbl	-546(%rbp), %esi
 263      FDFFFF
 264 02f0 8B8DC0FD 		movl	-576(%rbp), %ecx
 264      FFFF
 265 02f6 8B95C4FD 		movl	-572(%rbp), %edx
 265      FFFF
 266 02fc 488B85B8 		movq	-584(%rbp), %rax
 266      FDFFFF
 267 0303 4989F9   		movq	%rdi, %r9
 268 0306 4189F0   		movl	%esi, %r8d
 269 0309 488D3500 		leaq	.LC1(%rip), %rsi
 269      000000
 270 0310 4889C7   		movq	%rax, %rdi
 271 0313 B8000000 		movl	$0, %eax
 271      00
 272 0318 E8000000 		call	errRender@PLT
 272      00
 151:libsync.c     **** 			error,
 152:libsync.c     **** 			"syncBulkEndpoints(): Sync of EP%dOUT->EP%dIN failed after %d fill attempts: %s",
 153:libsync.c     **** 			outEndpoint, inEndpoint, count, usb_strerror());
 154:libsync.c     **** 		FAIL(SYNC_FAILED);
 273              		.loc 1 154 0
 274 031d C785E0FD 		movl	$2, -544(%rbp)
 274      FFFF0200 
 274      0000
 275 0327 E9130100 		jmp	.L18
 275      00
 276              	.L17:
 155:libsync.c     **** 	}
 156:libsync.c     **** 	count = 0;
 277              		.loc 1 156 0
 278 032c C685DEFD 		movb	$0, -546(%rbp)
 278      FFFF00
 279              	.L21:
 157:libsync.c     **** 	do {
 158:libsync.c     **** 		uStatus = usb_bulk_read(deviceHandle, USB_ENDPOINT_IN | inEndpoint, u.bytes, 4, 100);
 280              		.loc 1 158 0 discriminator 4
 281 0333 8B85C0FD 		movl	-576(%rbp), %eax
 281      FFFF
 282 0339 0C80     		orb	$-128, %al
 283 033b 89C6     		movl	%eax, %esi
 284 033d 488D95F0 		leaq	-528(%rbp), %rdx
 284      FDFFFF
 285 0344 488B85C8 		movq	-568(%rbp), %rax
 285      FDFFFF
 286 034b 41B86400 		movl	$100, %r8d
 286      0000
 287 0351 B9040000 		movl	$4, %ecx
 287      00
 288 0356 4889C7   		movq	%rax, %rdi
 289 0359 E8000000 		call	usb_bulk_read@PLT
 289      00
 290 035e 8985ECFD 		movl	%eax, -532(%rbp)
 290      FFFF
 159:libsync.c     **** 		#ifdef SYNC_DEBUG
 160:libsync.c     **** 			if ( uStatus >= 0 ) {
 161:libsync.c     **** 				printf("WAIT: Read %d bytes, starting with 0x%08lX\n", uStatus, u.lword);
 162:libsync.c     **** 			} else {
 163:libsync.c     **** 				printf("WAIT: ReturnCode %d\n", uStatus);
 164:libsync.c     **** 			}
 165:libsync.c     **** 		#endif
 166:libsync.c     **** 		count++;
 291              		.loc 1 166 0 discriminator 4
 292 0364 0FB685DE 		movzbl	-546(%rbp), %eax
 292      FDFFFF
 293 036b 83C001   		addl	$1, %eax
 294 036e 8885DEFD 		movb	%al, -546(%rbp)
 294      FFFF
 167:libsync.c     **** 	} while ( (u.lword != hackUpper || uStatus < 0) && count < MAX_TRIES );
 295              		.loc 1 167 0 discriminator 4
 296 0374 8B85F0FD 		movl	-528(%rbp), %eax
 296      FFFF
 297 037a 3B85E8FD 		cmpl	-536(%rbp), %eax
 297      FFFF
 298 0380 7509     		jne	.L19
 299              		.loc 1 167 0 is_stmt 0 discriminator 2
 300 0382 83BDECFD 		cmpl	$0, -532(%rbp)
 300      FFFF00
 301 0389 7909     		jns	.L20
 302              	.L19:
 303              		.loc 1 167 0 discriminator 3
 304 038b 80BDDEFD 		cmpb	$9, -546(%rbp)
 304      FFFF09
 305 0392 769F     		jbe	.L21
 306              	.L20:
 168:libsync.c     **** 	if ( uStatus < 0 ) {
 307              		.loc 1 168 0 is_stmt 1
 308 0394 83BDECFD 		cmpl	$0, -532(%rbp)
 308      FFFF00
 309 039b 7948     		jns	.L22
 169:libsync.c     **** 		errRender(
 310              		.loc 1 169 0
 311 039d E8000000 		call	usb_strerror@PLT
 311      00
 312 03a2 4889C7   		movq	%rax, %rdi
 313 03a5 0FB6B5DE 		movzbl	-546(%rbp), %esi
 313      FDFFFF
 314 03ac 8B8DC0FD 		movl	-576(%rbp), %ecx
 314      FFFF
 315 03b2 8B95C4FD 		movl	-572(%rbp), %edx
 315      FFFF
 316 03b8 488B85B8 		movq	-584(%rbp), %rax
 316      FDFFFF
 317 03bf 4989F9   		movq	%rdi, %r9
 318 03c2 4189F0   		movl	%esi, %r8d
 319 03c5 488D3500 		leaq	.LC2(%rip), %rsi
 319      000000
 320 03cc 4889C7   		movq	%rax, %rdi
 321 03cf B8000000 		movl	$0, %eax
 321      00
 322 03d4 E8000000 		call	errRender@PLT
 322      00
 170:libsync.c     **** 			error,
 171:libsync.c     **** 			"syncBulkEndpoints(): Sync of EP%dOUT->EP%dIN failed after %d drain attempts: %s",
 172:libsync.c     **** 			outEndpoint, inEndpoint, count, usb_strerror());
 173:libsync.c     **** 		FAIL(SYNC_FAILED);
 323              		.loc 1 173 0
 324 03d9 C785E0FD 		movl	$2, -544(%rbp)
 324      FFFF0200 
 324      0000
 325 03e3 EB5A     		jmp	.L18
 326              	.L22:
 174:libsync.c     **** 	}
 175:libsync.c     **** 	if ( u.lword != hackUpper ) {
 327              		.loc 1 175 0
 328 03e5 8B85F0FD 		movl	-528(%rbp), %eax
 328      FFFF
 329 03eb 3B85E8FD 		cmpl	-536(%rbp), %eax
 329      FFFF
 330 03f1 7445     		je	.L23
 176:libsync.c     **** 		errRender(
 331              		.loc 1 176 0
 332 03f3 8BB5F0FD 		movl	-528(%rbp), %esi
 332      FFFF
 333 03f9 8BBDE8FD 		movl	-536(%rbp), %edi
 333      FFFF
 334 03ff 8B8DC0FD 		movl	-576(%rbp), %ecx
 334      FFFF
 335 0405 8B95C4FD 		movl	-572(%rbp), %edx
 335      FFFF
 336 040b 488B85B8 		movq	-584(%rbp), %rax
 336      FDFFFF
 337 0412 4189F9   		movl	%edi, %r9d
 338 0415 4189F0   		movl	%esi, %r8d
 339 0418 488D3500 		leaq	.LC3(%rip), %rsi
 339      000000
 340 041f 4889C7   		movq	%rax, %rdi
 341 0422 B8000000 		movl	$0, %eax
 341      00
 342 0427 E8000000 		call	errRender@PLT
 342      00
 177:libsync.c     **** 			error,
 178:libsync.c     **** 			"syncBulkEndpoints(): Sync of EP%dOUT->EP%dIN read back 0x%08lX instead of the expected 0x%08lX"
 179:libsync.c     **** 			outEndpoint, inEndpoint, u.lword, hackUpper);
 180:libsync.c     **** 		FAIL(SYNC_FAILED);
 343              		.loc 1 180 0
 344 042c C785E0FD 		movl	$2, -544(%rbp)
 344      FFFF0200 
 344      0000
 345 0436 EB07     		jmp	.L18
 346              	.L23:
 181:libsync.c     **** 	}
 182:libsync.c     **** 	return SYNC_SUCCESS;
 347              		.loc 1 182 0
 348 0438 B8000000 		movl	$0, %eax
 348      00
 349 043d EB06     		jmp	.L25
 350              	.L18:
 183:libsync.c     **** cleanup:
 184:libsync.c     **** 	return returnCode;
 351              		.loc 1 184 0
 352 043f 8B85E0FD 		movl	-544(%rbp), %eax
 352      FFFF
 353              	.L25:
 185:libsync.c     **** }
 354              		.loc 1 185 0 discriminator 1
 355 0445 488B4DF8 		movq	-8(%rbp), %rcx
 356 0449 6448330C 		xorq	%fs:40, %rcx
 356      25280000 
 356      00
 357 0452 7405     		je	.L26
 358              		.loc 1 185 0 is_stmt 0
 359 0454 E8000000 		call	__stack_chk_fail@PLT
 359      00
 360              	.L26:
 361 0459 C9       		leave
 362              		.cfi_def_cfa 7, 8
 363 045a C3       		ret
 364              		.cfi_endproc
 365              	.LFE5:
 367              	.Letext0:
 368              		.file 2 "/home/asoreyh/Dropbox/projects/lago/lago-software/acqua/brc/lago/makestuff/common/makestu
 369              		.file 3 "libsync.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 libsync.c
     /tmp/ccTjx73K.s:11     .text:0000000000000000 syncBulkEndpoints
     /tmp/ccTjx73K.s:155    .text:000000000000015b trySync

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
usb_control_msg
usb_strerror
errRender
usb_bulk_read
usb_bulk_write
__stack_chk_fail
