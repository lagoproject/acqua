   1              		.file	"eeprom.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata
   5              		.align 8
   6              	.LC0:
   7 0000 66783257 		.string	"fx2WriteEEPROM(): This firmware does not seem to support EEPROM operations - try loading 
   7      72697465 
   7      45455052 
   7      4F4D2829 
   7      3A205468 
   8              		.text
   9              		.globl	fx2WriteEEPROM
  11              	fx2WriteEEPROM:
  12              	.LFB4:
  13              		.file 1 "eeprom.c"
   1:eeprom.c      **** /*
   2:eeprom.c      ****  * Copyright (C) 2009-2012 Chris McClelland
   3:eeprom.c      ****  *
   4:eeprom.c      ****  * This program is free software: you can redistribute it and/or modify
   5:eeprom.c      ****  * it under the terms of the GNU Lesser General Public License as published by
   6:eeprom.c      ****  * the Free Software Foundation, either version 3 of the License, or
   7:eeprom.c      ****  * (at your option) any later version.
   8:eeprom.c      ****  *
   9:eeprom.c      ****  * This program is distributed in the hope that it will be useful,
  10:eeprom.c      ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:eeprom.c      ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:eeprom.c      ****  * GNU Lesser General Public License for more details.
  13:eeprom.c      ****  *
  14:eeprom.c      ****  * You should have received a copy of the GNU Lesser General Public License
  15:eeprom.c      ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:eeprom.c      ****  */
  17:eeprom.c      **** #include <makestuff.h>
  18:eeprom.c      **** #include <libusbwrap.h>
  19:eeprom.c      **** #ifdef WIN32
  20:eeprom.c      **** 	#include <lusb0_usb.h>
  21:eeprom.c      **** #else
  22:eeprom.c      **** 	#include <usb.h>
  23:eeprom.c      **** #endif
  24:eeprom.c      **** #include <liberror.h>
  25:eeprom.c      **** #include <libbuffer.h>
  26:eeprom.c      **** #include "libfx2loader.h"
  27:eeprom.c      **** 
  28:eeprom.c      **** #define A2_WRITE_ERROR "fx2WriteEEPROM(): This firmware does not seem to support EEPROM operations 
  29:eeprom.c      **** #define A2_READ_ERROR "fx2ReadEEPROM(): This firmware does not seem to support EEPROM operations - 
  30:eeprom.c      **** #define BLOCK_SIZE 4096L
  31:eeprom.c      **** 
  32:eeprom.c      **** // Write the supplied reader buffer to EEPROM, using the supplied VID/PID.
  33:eeprom.c      **** //
  34:eeprom.c      **** DLLEXPORT(FX2Status) fx2WriteEEPROM(
  35:eeprom.c      **** 	struct usb_dev_handle *device, const uint8 *bufPtr, int numBytes, const char **error)
  36:eeprom.c      **** {
  14              		.loc 1 36 0
  15              		.cfi_startproc
  16 0000 55       		pushq	%rbp
  17              		.cfi_def_cfa_offset 16
  18              		.cfi_offset 6, -16
  19 0001 4889E5   		movq	%rsp, %rbp
  20              		.cfi_def_cfa_register 6
  21 0004 4883EC30 		subq	$48, %rsp
  22 0008 48897DE8 		movq	%rdi, -24(%rbp)
  23 000c 488975E0 		movq	%rsi, -32(%rbp)
  24 0010 8955DC   		movl	%edx, -36(%rbp)
  25 0013 48894DD0 		movq	%rcx, -48(%rbp)
  37:eeprom.c      **** 	FX2Status returnCode;
  38:eeprom.c      **** 	int uStatus;
  39:eeprom.c      **** 	uint16 address = 0x0000;
  26              		.loc 1 39 0
  27 0017 66C745F6 		movw	$0, -10(%rbp)
  27      0000
  40:eeprom.c      **** 	while ( numBytes > BLOCK_SIZE ) {
  28              		.loc 1 40 0
  29 001d E99C0000 		jmp	.L2
  29      00
  30              	.L5:
  41:eeprom.c      **** 		uStatus = usb_control_msg(
  31              		.loc 1 41 0
  32 0022 0FB755F6 		movzwl	-10(%rbp), %edx
  33 0026 488B4DE0 		movq	-32(%rbp), %rcx
  34 002a 488B45E8 		movq	-24(%rbp), %rax
  35 002e 68881300 		pushq	$5000
  35      00
  36 0033 68001000 		pushq	$4096
  36      00
  37 0038 4989C9   		movq	%rcx, %r9
  38 003b 41B80000 		movl	$0, %r8d
  38      0000
  39 0041 89D1     		movl	%edx, %ecx
  40 0043 BAA20000 		movl	$162, %edx
  40      00
  41 0048 BE400000 		movl	$64, %esi
  41      00
  42 004d 4889C7   		movq	%rax, %rdi
  43 0050 E8000000 		call	usb_control_msg@PLT
  43      00
  44 0055 4883C410 		addq	$16, %rsp
  45 0059 8945FC   		movl	%eax, -4(%rbp)
  42:eeprom.c      **** 			device,
  43:eeprom.c      **** 			(USB_ENDPOINT_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE),
  44:eeprom.c      **** 			0xA2, address, 0x0000, (char*)bufPtr, BLOCK_SIZE, 5000
  45:eeprom.c      **** 		);
  46:eeprom.c      **** 		if ( uStatus != BLOCK_SIZE ) {
  46              		.loc 1 46 0
  47 005c 817DFC00 		cmpl	$4096, -4(%rbp)
  47      100000
  48 0063 7440     		je	.L3
  47:eeprom.c      **** 			errRender(error, A2_WRITE_ERROR, BLOCK_SIZE, address, uStatus, usb_strerror());
  49              		.loc 1 47 0
  50 0065 E8000000 		call	usb_strerror@PLT
  50      00
  51 006a 4889C6   		movq	%rax, %rsi
  52 006d 0FB755F6 		movzwl	-10(%rbp), %edx
  53 0071 8B4DFC   		movl	-4(%rbp), %ecx
  54 0074 488B45D0 		movq	-48(%rbp), %rax
  55 0078 4989F1   		movq	%rsi, %r9
  56 007b 4189C8   		movl	%ecx, %r8d
  57 007e 89D1     		movl	%edx, %ecx
  58 0080 BA001000 		movl	$4096, %edx
  58      00
  59 0085 488D3500 		leaq	.LC0(%rip), %rsi
  59      000000
  60 008c 4889C7   		movq	%rax, %rdi
  61 008f B8000000 		movl	$0, %eax
  61      00
  62 0094 E8000000 		call	errRender@PLT
  62      00
  48:eeprom.c      **** 			FAIL(FX2_USB_ERR);
  63              		.loc 1 48 0
  64 0099 C745F801 		movl	$1, -8(%rbp)
  64      000000
  65 00a0 E9A70000 		jmp	.L4
  65      00
  66              	.L3:
  49:eeprom.c      **** 		}
  50:eeprom.c      **** 		numBytes -= BLOCK_SIZE;
  67              		.loc 1 50 0
  68 00a5 8B45DC   		movl	-36(%rbp), %eax
  69 00a8 2D001000 		subl	$4096, %eax
  69      00
  70 00ad 8945DC   		movl	%eax, -36(%rbp)
  51:eeprom.c      **** 		bufPtr += BLOCK_SIZE;
  71              		.loc 1 51 0
  72 00b0 488145E0 		addq	$4096, -32(%rbp)
  72      00100000 
  52:eeprom.c      **** 		address += BLOCK_SIZE;
  73              		.loc 1 52 0
  74 00b8 668145F6 		addw	$4096, -10(%rbp)
  74      0010
  75              	.L2:
  40:eeprom.c      **** 		uStatus = usb_control_msg(
  76              		.loc 1 40 0
  77 00be 817DDC00 		cmpl	$4096, -36(%rbp)
  77      100000
  78 00c5 0F8F57FF 		jg	.L5
  78      FFFF
  53:eeprom.c      **** 	}
  54:eeprom.c      **** 	uStatus = usb_control_msg(
  79              		.loc 1 54 0
  80 00cb 0FB755F6 		movzwl	-10(%rbp), %edx
  81 00cf 488B75E0 		movq	-32(%rbp), %rsi
  82 00d3 488B45E8 		movq	-24(%rbp), %rax
  83 00d7 68881300 		pushq	$5000
  83      00
  84 00dc 8B4DDC   		movl	-36(%rbp), %ecx
  85 00df 51       		pushq	%rcx
  86 00e0 4989F1   		movq	%rsi, %r9
  87 00e3 41B80000 		movl	$0, %r8d
  87      0000
  88 00e9 89D1     		movl	%edx, %ecx
  89 00eb BAA20000 		movl	$162, %edx
  89      00
  90 00f0 BE400000 		movl	$64, %esi
  90      00
  91 00f5 4889C7   		movq	%rax, %rdi
  92 00f8 E8000000 		call	usb_control_msg@PLT
  92      00
  93 00fd 4883C410 		addq	$16, %rsp
  94 0101 8945FC   		movl	%eax, -4(%rbp)
  55:eeprom.c      **** 		device,
  56:eeprom.c      **** 		(USB_ENDPOINT_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE),
  57:eeprom.c      **** 		0xA2, address, 0x0000, (char*)bufPtr, numBytes, 5000
  58:eeprom.c      **** 	);
  59:eeprom.c      **** 	if ( uStatus != numBytes ) {
  95              		.loc 1 59 0
  96 0104 8B45FC   		movl	-4(%rbp), %eax
  97 0107 3B45DC   		cmpl	-36(%rbp), %eax
  98 010a 7439     		je	.L6
  60:eeprom.c      **** 		errRender(error, A2_WRITE_ERROR, numBytes, address, uStatus, usb_strerror());
  99              		.loc 1 60 0
 100 010c E8000000 		call	usb_strerror@PLT
 100      00
 101 0111 4889C7   		movq	%rax, %rdi
 102 0114 0FB74DF6 		movzwl	-10(%rbp), %ecx
 103 0118 8B75FC   		movl	-4(%rbp), %esi
 104 011b 8B55DC   		movl	-36(%rbp), %edx
 105 011e 488B45D0 		movq	-48(%rbp), %rax
 106 0122 4989F9   		movq	%rdi, %r9
 107 0125 4189F0   		movl	%esi, %r8d
 108 0128 488D3500 		leaq	.LC0(%rip), %rsi
 108      000000
 109 012f 4889C7   		movq	%rax, %rdi
 110 0132 B8000000 		movl	$0, %eax
 110      00
 111 0137 E8000000 		call	errRender@PLT
 111      00
  61:eeprom.c      **** 		FAIL(FX2_USB_ERR);
 112              		.loc 1 61 0
 113 013c C745F801 		movl	$1, -8(%rbp)
 113      000000
 114 0143 EB07     		jmp	.L4
 115              	.L6:
  62:eeprom.c      **** 	}
  63:eeprom.c      **** 	return FX2_SUCCESS;
 116              		.loc 1 63 0
 117 0145 B8000000 		movl	$0, %eax
 117      00
 118 014a EB03     		jmp	.L7
 119              	.L4:
  64:eeprom.c      **** cleanup:
  65:eeprom.c      **** 	return returnCode;
 120              		.loc 1 65 0
 121 014c 8B45F8   		movl	-8(%rbp), %eax
 122              	.L7:
  66:eeprom.c      **** }
 123              		.loc 1 66 0
 124 014f C9       		leave
 125              		.cfi_def_cfa 7, 8
 126 0150 C3       		ret
 127              		.cfi_endproc
 128              	.LFE4:
 130              		.section	.rodata
 131              	.LC1:
 132 00cd 66783252 		.string	"fx2ReadEEPROM()"
 132      65616445 
 132      4550524F 
 132      4D282900 
 133 00dd 000000   		.align 8
 134              	.LC2:
 135 00e0 66783252 		.string	"fx2ReadEEPROM(): This firmware does not seem to support EEPROM operations - try loading a
 135      65616445 
 135      4550524F 
 135      4D28293A 
 135      20546869 
 136              		.text
 137              		.globl	fx2ReadEEPROM
 139              	fx2ReadEEPROM:
 140              	.LFB5:
  67:eeprom.c      **** 
  68:eeprom.c      **** // Read from the EEPROM into the supplied buffer, using the supplied VID/PID.
  69:eeprom.c      **** //
  70:eeprom.c      **** DLLEXPORT(FX2Status) fx2ReadEEPROM(
  71:eeprom.c      **** 	struct usb_dev_handle *device, uint32 numBytes, struct Buffer *i2cBuffer, const char **error)
  72:eeprom.c      **** {
 141              		.loc 1 72 0
 142              		.cfi_startproc
 143 0151 55       		pushq	%rbp
 144              		.cfi_def_cfa_offset 16
 145              		.cfi_offset 6, -16
 146 0152 4889E5   		movq	%rsp, %rbp
 147              		.cfi_def_cfa_register 6
 148 0155 4883EC40 		subq	$64, %rsp
 149 0159 48897DD8 		movq	%rdi, -40(%rbp)
 150 015d 8975D4   		movl	%esi, -44(%rbp)
 151 0160 488955C8 		movq	%rdx, -56(%rbp)
 152 0164 48894DC0 		movq	%rcx, -64(%rbp)
  73:eeprom.c      **** 	FX2Status returnCode;
  74:eeprom.c      **** 	int uStatus;
  75:eeprom.c      **** 	uint16 address = 0x0000;
 153              		.loc 1 75 0
 154 0168 66C745EE 		movw	$0, -18(%rbp)
 154      0000
  76:eeprom.c      **** 	uint8 *bufPtr;
  77:eeprom.c      **** 	if ( bufAppendConst(i2cBuffer, 0x00, numBytes, error) ) {
 155              		.loc 1 77 0
 156 016e 488B4DC0 		movq	-64(%rbp), %rcx
 157 0172 8B55D4   		movl	-44(%rbp), %edx
 158 0175 488B45C8 		movq	-56(%rbp), %rax
 159 0179 BE000000 		movl	$0, %esi
 159      00
 160 017e 4889C7   		movq	%rax, %rdi
 161 0181 E8000000 		call	bufAppendConst@PLT
 161      00
 162 0186 85C0     		testl	%eax, %eax
 163 0188 741F     		je	.L9
  78:eeprom.c      **** 		errPrefix(error, "fx2ReadEEPROM()");
 164              		.loc 1 78 0
 165 018a 488B45C0 		movq	-64(%rbp), %rax
 166 018e 488D3500 		leaq	.LC1(%rip), %rsi
 166      000000
 167 0195 4889C7   		movq	%rax, %rdi
 168 0198 E8000000 		call	errPrefix@PLT
 168      00
  79:eeprom.c      **** 		FAIL(FX2_BUF_ERR);
 169              		.loc 1 79 0
 170 019d C745F002 		movl	$2, -16(%rbp)
 170      000000
 171 01a4 E9360100 		jmp	.L10
 171      00
 172              	.L9:
  80:eeprom.c      **** 	}
  81:eeprom.c      **** 	bufPtr = i2cBuffer->data;
 173              		.loc 1 81 0
 174 01a9 488B45C8 		movq	-56(%rbp), %rax
 175 01ad 488B00   		movq	(%rax), %rax
 176 01b0 488945F8 		movq	%rax, -8(%rbp)
  82:eeprom.c      **** 	while ( numBytes > BLOCK_SIZE ) {
 177              		.loc 1 82 0
 178 01b4 E9980000 		jmp	.L11
 178      00
 179              	.L13:
  83:eeprom.c      **** 		uStatus = usb_control_msg(
 180              		.loc 1 83 0
 181 01b9 0FB755EE 		movzwl	-18(%rbp), %edx
 182 01bd 488B4DF8 		movq	-8(%rbp), %rcx
 183 01c1 488B45D8 		movq	-40(%rbp), %rax
 184 01c5 68881300 		pushq	$5000
 184      00
 185 01ca 68001000 		pushq	$4096
 185      00
 186 01cf 4989C9   		movq	%rcx, %r9
 187 01d2 41B80000 		movl	$0, %r8d
 187      0000
 188 01d8 89D1     		movl	%edx, %ecx
 189 01da BAA20000 		movl	$162, %edx
 189      00
 190 01df BEC00000 		movl	$192, %esi
 190      00
 191 01e4 4889C7   		movq	%rax, %rdi
 192 01e7 E8000000 		call	usb_control_msg@PLT
 192      00
 193 01ec 4883C410 		addq	$16, %rsp
 194 01f0 8945F4   		movl	%eax, -12(%rbp)
  84:eeprom.c      **** 			device,
  85:eeprom.c      **** 			(USB_ENDPOINT_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE),
  86:eeprom.c      **** 			0xA2, address, 0x0000, (char*)bufPtr, BLOCK_SIZE, 5000
  87:eeprom.c      **** 		);
  88:eeprom.c      **** 		if ( uStatus != BLOCK_SIZE ) {
 195              		.loc 1 88 0
 196 01f3 817DF400 		cmpl	$4096, -12(%rbp)
 196      100000
 197 01fa 7440     		je	.L12
  89:eeprom.c      **** 			errRender(error, A2_READ_ERROR, BLOCK_SIZE, address, uStatus, usb_strerror());
 198              		.loc 1 89 0
 199 01fc E8000000 		call	usb_strerror@PLT
 199      00
 200 0201 4889C6   		movq	%rax, %rsi
 201 0204 0FB755EE 		movzwl	-18(%rbp), %edx
 202 0208 8B4DF4   		movl	-12(%rbp), %ecx
 203 020b 488B45C0 		movq	-64(%rbp), %rax
 204 020f 4989F1   		movq	%rsi, %r9
 205 0212 4189C8   		movl	%ecx, %r8d
 206 0215 89D1     		movl	%edx, %ecx
 207 0217 BA001000 		movl	$4096, %edx
 207      00
 208 021c 488D3500 		leaq	.LC2(%rip), %rsi
 208      000000
 209 0223 4889C7   		movq	%rax, %rdi
 210 0226 B8000000 		movl	$0, %eax
 210      00
 211 022b E8000000 		call	errRender@PLT
 211      00
  90:eeprom.c      **** 			FAIL(FX2_USB_ERR);
 212              		.loc 1 90 0
 213 0230 C745F001 		movl	$1, -16(%rbp)
 213      000000
 214 0237 E9A30000 		jmp	.L10
 214      00
 215              	.L12:
  91:eeprom.c      **** 		}
  92:eeprom.c      **** 		numBytes -= BLOCK_SIZE;
 216              		.loc 1 92 0
 217 023c 816DD400 		subl	$4096, -44(%rbp)
 217      100000
  93:eeprom.c      **** 		bufPtr += BLOCK_SIZE;
 218              		.loc 1 93 0
 219 0243 488145F8 		addq	$4096, -8(%rbp)
 219      00100000 
  94:eeprom.c      **** 		address += BLOCK_SIZE;
 220              		.loc 1 94 0
 221 024b 668145EE 		addw	$4096, -18(%rbp)
 221      0010
 222              	.L11:
  82:eeprom.c      **** 		uStatus = usb_control_msg(
 223              		.loc 1 82 0
 224 0251 817DD400 		cmpl	$4096, -44(%rbp)
 224      100000
 225 0258 0F875BFF 		ja	.L13
 225      FFFF
  95:eeprom.c      **** 	}
  96:eeprom.c      **** 	uStatus = usb_control_msg(
 226              		.loc 1 96 0
 227 025e 8B4DD4   		movl	-44(%rbp), %ecx
 228 0261 0FB755EE 		movzwl	-18(%rbp), %edx
 229 0265 488B75F8 		movq	-8(%rbp), %rsi
 230 0269 488B45D8 		movq	-40(%rbp), %rax
 231 026d 68881300 		pushq	$5000
 231      00
 232 0272 51       		pushq	%rcx
 233 0273 4989F1   		movq	%rsi, %r9
 234 0276 41B80000 		movl	$0, %r8d
 234      0000
 235 027c 89D1     		movl	%edx, %ecx
 236 027e BAA20000 		movl	$162, %edx
 236      00
 237 0283 BEC00000 		movl	$192, %esi
 237      00
 238 0288 4889C7   		movq	%rax, %rdi
 239 028b E8000000 		call	usb_control_msg@PLT
 239      00
 240 0290 4883C410 		addq	$16, %rsp
 241 0294 8945F4   		movl	%eax, -12(%rbp)
  97:eeprom.c      **** 		device,
  98:eeprom.c      **** 		(USB_ENDPOINT_IN | USB_TYPE_VENDOR | USB_RECIP_DEVICE),
  99:eeprom.c      **** 		0xA2, address, 0x0000, (char*)bufPtr, numBytes, 5000
 100:eeprom.c      **** 	);
 101:eeprom.c      **** 	if ( uStatus != (int)numBytes ) {
 242              		.loc 1 101 0
 243 0297 8B45D4   		movl	-44(%rbp), %eax
 244 029a 3B45F4   		cmpl	-12(%rbp), %eax
 245 029d 7439     		je	.L14
 102:eeprom.c      **** 		errRender(error, A2_READ_ERROR, numBytes, address, uStatus, usb_strerror());
 246              		.loc 1 102 0
 247 029f E8000000 		call	usb_strerror@PLT
 247      00
 248 02a4 4889C7   		movq	%rax, %rdi
 249 02a7 0FB74DEE 		movzwl	-18(%rbp), %ecx
 250 02ab 8B75F4   		movl	-12(%rbp), %esi
 251 02ae 8B55D4   		movl	-44(%rbp), %edx
 252 02b1 488B45C0 		movq	-64(%rbp), %rax
 253 02b5 4989F9   		movq	%rdi, %r9
 254 02b8 4189F0   		movl	%esi, %r8d
 255 02bb 488D3500 		leaq	.LC2(%rip), %rsi
 255      000000
 256 02c2 4889C7   		movq	%rax, %rdi
 257 02c5 B8000000 		movl	$0, %eax
 257      00
 258 02ca E8000000 		call	errRender@PLT
 258      00
 103:eeprom.c      **** 		FAIL(FX2_USB_ERR);
 259              		.loc 1 103 0
 260 02cf C745F001 		movl	$1, -16(%rbp)
 260      000000
 261 02d6 EB07     		jmp	.L10
 262              	.L14:
 104:eeprom.c      **** 	}
 105:eeprom.c      **** 	return FX2_SUCCESS;
 263              		.loc 1 105 0
 264 02d8 B8000000 		movl	$0, %eax
 264      00
 265 02dd EB03     		jmp	.L15
 266              	.L10:
 106:eeprom.c      **** cleanup:
 107:eeprom.c      **** 	return returnCode;
 267              		.loc 1 107 0
 268 02df 8B45F0   		movl	-16(%rbp), %eax
 269              	.L15:
 108:eeprom.c      **** }
 270              		.loc 1 108 0
 271 02e2 C9       		leave
 272              		.cfi_def_cfa 7, 8
 273 02e3 C3       		ret
 274              		.cfi_endproc
 275              	.LFE5:
 277              	.Letext0:
 278              		.file 2 "/home/asoreyh/Dropbox/projects/lago/lago-software/acqua/brc/lago/makestuff/common/makestu
 279              		.file 3 "/home/asoreyh/Dropbox/projects/lago/lago-software/acqua/brc/lago/makestuff/libs/libbuffer
 280              		.file 4 "libfx2loader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 eeprom.c
     /tmp/ccprc2GG.s:11     .text:0000000000000000 fx2WriteEEPROM
     /tmp/ccprc2GG.s:139    .text:0000000000000151 fx2ReadEEPROM

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
usb_control_msg
usb_strerror
errRender
bufAppendConst
errPrefix
